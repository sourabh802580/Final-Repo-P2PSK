@{
    Layout = null;
}

<style>

    #pendingTable th, #pendingTable td {
        text-align: center !important;
        vertical-align: middle !important;
    }
</style>


<div id="pendingSection">

    <div class="container bg-white rounded m-2 shadow p-2">
        <h3 class="text-center text-primary">Pending Supplier Quotations</h3>

        <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap ">

            <!-- Left: Date Range Picker + Export Buttons -->
            <div class="d-flex align-items-center gap-3">
                <!-- Date Range Picker -->
                <div class="input-group" style="height: 40px; max-width: 280px;">
                    <span class="input-group-text bg-primary text-white" style="height: 100%;">
                        <i class="bi bi-calendar-date"></i>
                    </span>
                    <input type="text" id="PendingDatepicker" class="form-control" placeholder="Select date range" readonly style="height: 100%;" />
                </div>
            </div>

        </div>

        <table id="pendingTable" class="table table-bordered table-striped">
            <thead class="table-dark text-white text-center fw-bold">
                <tr>
                    <th><input type="checkbox" id="selectAll"></th>
                    <th>Sr. No</th>
                    <th>RFQ Code</th>
                    <th>Supplier Quotation Code</th>
                    <th>Date</th>
                    <th>Vendor Name</th>
                   
                    <th>Total Amount</th>
                    <th>Delivery Speed</th>
                    <th>Evaluation Score</th>
                    <th>Recommendation</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>



<script>
    // ✅ Toast helper
    // ✅ Toast helper with progress bar
    function showToast(message, type = 'warning') {
        const toastId = 'toast-' + Date.now();
        let bgClass = '';
        let icon = '';

        switch (type) {
            case 'success':
                bgClass = 'bg-success text-white';
                icon = '<i class="bi bi-check-circle-fill me-2"></i>';
                break;
            case 'danger':
                bgClass = 'bg-danger text-white';
                icon = '<i class="bi bi-x-circle-fill me-2"></i>';
                break;
            default: // warning
                bgClass = 'bg-warning text-white';
                icon = '<i class="bi bi-exclamation-triangle-fill me-2"></i>';
                break;
        }

        const toastHTML = `
      <div id="${toastId}" class="toast align-items-center ${bgClass} border-0 mb-2 shadow"
           role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex flex-column w-100">
          <div class="d-flex">
            <div class="toast-body flex-grow-1 d-flex align-items-center">
              ${icon} <span>${message}</span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto"
                    data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
          <!-- Progress bar -->
          <div class="progress" style="height:3px;">
            <div class="progress-bar bg-dark" role="progressbar" style="width: 100%"></div>
          </div>
        </div>
      </div>
    `;

        $('#toastContainer').append(toastHTML);
        const toastEl = document.getElementById(toastId);
        const bsToast = new bootstrap.Toast(toastEl, { delay: 3000 }); // 3 sec timeout
        bsToast.show();

        // Animate progress bar
        let progressBar = $(toastEl).find('.progress-bar');
        progressBar.animate({ width: "0%" }, 3000, "linear");

        // Remove toast when hidden
        toastEl.addEventListener('hidden.bs.toast', () => {
            $(toastEl).remove();
        });
    }


    var tblPending;

    $(document).ready(function () {

        function loadPendingQuotations() {
            
            $.ajax({
                url: "/Purchase/AllPendingQuotsDataAMG",
                type: "GET",
                dataType: "json",
                success: function (data) {

                    tblPending = $("#pendingTable").DataTable({
                        destroy: true,
                        data: data,
                        ordering: false,
                        dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
                        buttons: [
                            {
                                extend: 'print',
                                text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                                title: '', // remove default title
                                customize: function (win) {
                                    const now = moment().format('DD/MM/YYYY');

                                    // Add heading and generated date
                                    $(win.document.body)
                                        .css('font-size', '12pt')
                                        .prepend(
                                            `<h2 style="text-align:center; margin-bottom:5px;">Pending Supplier Quotations</h2>
         <div style="text-align:center; margin-bottom:10px; font-size:10pt;">Generated Date: ${now}</div>`
                                        );


                                    $(win.document.body).append(`


                    <style>
    thead th {
        background-color: black !important;
        color: white !important;
        text-align: center !important;
        -webkit-print-color-adjust: exact !important;
        print-color-adjust: exact !important;
    }
    table {
        border-collapse: collapse !important;
        width: 100% !important;
    }
    td, th {
        border: 1px solid #000 !important;
        padding: 6px !important;
    }
</style>



                    `)


                                    // Find the table created by DataTables print
                                    const $table = $(win.document.body).find('table');

                                    // Apply table classes and styles
                                    $table.addClass('table table-bordered').css({
                                        'border-collapse': 'collapse',
                                        'width': '100%',
                                        'text-align': 'center'
                                    });

                                    // Apply border and padding to all cells
                                    $table.find('th, td').css({
                                        'border': '1px solid black',
                                        'padding': '5px',
                                        'text-align': 'center'
                                    });

                                    // Apply black header
                                    $table.find('thead th').each(function () {
                                        $(this).css({
                                            'background-color': 'black',
                                            'color': 'white'
                                        });
                                    });
                                }
                                ,
                                action: function (e, dt, button, config) {
                                    if ($('#pendingTable tbody input.row-check:checked').length === 0) {
                                        showToast("Please select at least one row to Print!");
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) { return $(node).find('.row-check').prop('checked'); },
                                    columns: ':visible:not(:first-child):not(:last-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            if (column === 1) {
                                                return $('#pendingTable tbody input.row-check:checked')
                                                    .index($(node).closest('tr').find('.row-check')) + 1;
                                            }
                                            if (column === 2 && data) { // date column
                                                let parts = data.split("-");
                                                if (parts.length === 3) data = `${parts[0]}/${parts[1]}/${parts[2]}`;
                                            }
                                            return data;
                                        }
                                    }
                                }
                            },

                            {
                                extend: 'pdfHtml5',
                                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                                title: "Pending Quotations",
                                customize: function (doc) {
                                    // Add generated date in center
                                    doc.content.splice(1, 0, {
                                        text: 'Generated Date: ' + new Date().toLocaleDateString('en-GB'),
                                        alignment: 'center',
                                        margin: [0, 0, 0, 12]
                                    });

                                    // Keep table header style
                                    doc.styles.tableHeader = {
                                        fillColor: '#000000',
                                        color: 'white',
                                        alignment: 'center'
                                    };

                                    // Add borders
                                    var objLayout = {};
                                    objLayout['hLineWidth'] = function () { return 1; };
                                    objLayout['vLineWidth'] = function () { return 1; };
                                    objLayout['hLineColor'] = function () { return '#000'; };
                                    objLayout['vLineColor'] = function () { return '#000'; };
                                    objLayout['paddingLeft'] = function () { return 4; };
                                    objLayout['paddingRight'] = function () { return 4; };
                                    doc.content[doc.content.length - 1].layout = objLayout;

                                    // Center align all cells
                                    var tableBody = doc.content[doc.content.length - 1].table.body;
                                    tableBody.forEach(function (row) {
                                        row.forEach(function (cell) {
                                            cell.alignment = 'center';
                                        });
                                    });
                                },
                                action: function (e, dt, button, config) {
                                    if ($('#pendingTable tbody input.row-check:checked').length === 0) {
                                        showToast('Please select at least one row to export PDF!', 'warning');
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-check').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child):not(:last-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            // If column is the RecommendedQuotation column, remove HTML
                                            if (column === 9) { // adjust index if needed
                                                return $(data).text().trim() || '-';
                                            }

                                            // Handle checkbox numbering for first columns
                                            if (column === 1) {
                                                return $('#pendingTable tbody input.row-check:checked')
                                                    .index($(node).closest('tr').find('.row-check')) + 1;
                                            }

                                            return typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '') // strip any remaining HTML
                                                : data;
                                        }
                                    }
                                }

                            },
                            {
                                extend: 'excelHtml5',
                                text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                                title: "Pending Quotations",
                                action: function (e, dt, button, config) {
                                    if ($('#pendingTable tbody input.row-check:checked').length === 0) {
                                        showToast('Please select at least one row to export Excel!', 'warning');
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-check').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child):not(:last-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            if (column === 1) {
                                                return $('#pendingTable tbody input.row-check:checked')
                                                    .index($(node).closest('tr').find('.row-check')) + 1;
                                            }
                                            return data;
                                        }
                                    }
                                }
                            },
                            {
                                extend: 'csvHtml5',
                                text: '<i class="bi bi-filetype-csv text-primary fs-5"></i>',
                                title: "Pending Quotations",
                                action: function (e, dt, button, config) {
                                    if ($('#pendingTable tbody input.row-check:checked').length === 0) {
                                        showToast('Please select at least one row to export CSV!', 'warning');
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-check').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child):not(:last-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            if (column === 1) {
                                                return $('#pendingTable tbody input.row-check:checked')
                                                    .index($(node).closest('tr').find('.row-check')) + 1;
                                            }
                                            return data;
                                        }
                                    }
                                }
                            }
                        ],
                        columns: [
                            { data: null, orderable: false, render: () => `<input type="checkbox" class="row-check">` },
                            { data: null, render: (data, type, row, meta) => meta.row + 1 },
                            { data: "RFQCode" },
                            { data: "RegisterQuotationCode" },
                            //{
                            //    data: "AddedDate",
                            //    render: (data) => data || ""
                            //},

                            {
                                data: "AddedDate", title: "AddedDate",
                                "render": function (data) {
                                    if (!data) return "";

                                    // .NET JSON format: /Date(1736985600000)/
                                    var match = /Date\((\d+)\)/.exec(data);
                                    if (match) {
                                        var dt = new Date(parseInt(match[1], 10));
                                        return dt.toLocaleDateString("en-GB"); // dd/mm/yyyy
                                    }

                                    // Agar normal ISO string hai to
                                    var dt2 = new Date(data);
                                    if (!isNaN(dt2.getTime())) {
                                        return dt2.toLocaleDateString("en-GB");
                                    }

                                    return data; // fallback
                                }
                            },



                            { data: "VenderName" },
                            {
                                data: "TotalAmount",
                                render: data => parseFloat(data).toLocaleString('en-IN', { style: 'currency', currency: 'INR' })
                            },
                            { data: "DeliverySpeed" },
                            { data: "AffordableRank" },
                            {
                                data: "RecommendedQuotation",
                                render: data => data === "Recommended"
                                    ? `<span class="badge bg-success">${data}</span>`
                                    : `<span class="badge bg-secondary">-</span>`
                            },
                            {
                                data: null, orderable: false, render: function (data, type, row) {
                                    let quotationCode = row.RegisterQuotationCode || ''; // fallback if null 
                                    let amount = parseFloat(row.TotalAmount);
                                    let isHighAmount = amount > 500000;
                                    let approveIcon = isHighAmount
                                        ? `<i class="bi bi-send-fill text-white" 
                  data-bs-toggle="tooltip" 
                  data-bs-placement="top" 
                  title="Send for Admin Approval" 
                  style="cursor:pointer; font-size:18px;" 
                  data-id="${quotationCode}"></i>`
                                        : `<i class="bi bi-check-circle text-white" 
                  data-bs-toggle="tooltip" 
                  data-bs-placement="top" 
                  title="Approve" 
                  style="cursor:pointer; font-size:18px;" 
                  data-id="${quotationCode}"></i>`;                                    return `
                <div class="d-flex gap-3 justify-content-center">
                    <button class="btn btn-sm btn-primary action-approve" data-id="${quotationCode}">
                        ${approveIcon}
                    </button>
                    <button class="btn btn-sm btn-primary btn-view" data-id="${quotationCode}" title="View Details">
                        <i class="bi bi-eye-fill text-white" style="font-size:18px;"></i>
                    </button>
                </div>
            `;
                                }
                            }
                        ],

                        drawCallback: function () {
                            $('[data-bs-toggle="tooltip"]').tooltip();
                        },
                        initComplete: function () {
                            $('#pendingTable_filter').addClass('ms-auto');
                            $('#pendingTable_filter input')
                                .addClass('form-control ms-2')
                                .css('width', '250px');
                            $('.dt-buttons').addClass('d-flex gap-2');
                        }
                    });

                    $('#selectAll').off('change').on('change', function () {
                        $('#pendingTable tbody input.row-check').prop('checked', $(this).prop('checked'));
                    });
                }
            });
        }

        loadPendingQuotations();

        // Approve icon click
        $(document).on("click", ".action-approve", function () {
            var id = $(this).data("id");
            var row = $(this).closest('tr');
            var amountText = row.find('td').eq(6).text().replace(/[^\d.]/g, '');
            var amount = parseFloat(amountText);
            var url = amount > 500000 ? "/Purchase/ApproveRequestAdminAMG" : "/Purchase/ApproveQuotAMG";
            var vname = row.find('td').eq(5).text();
            var msg = amount > 500000
                ? `Send quotation <b>${id}</b> for admin approval?`
                : `Approve quotation <b>${id}</b> ?`;

            Swal.fire({
                title: 'Are you sure?',
                html: msg,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, proceed!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post(url, { quotationCode: id }, function (res) {
                        Swal.fire({
                            title: 'Done!',
                            text: res.message,
                            icon: 'success',
                            timer: 2000, // auto close after 2 seconds
                            showConfirmButton: false,
                            timerProgressBar: true,
                            didClose: () => {
                                loadPendingQuotations(); // reload table after auto-close
                            }
                        });
                    }).fail(function () {
                        Swal.fire('Error', 'Something went wrong', 'error');
                    });
                }
            });
        });
    });

    // Initialize Pending Date Range Picker
    $('#PendingDatepicker').daterangepicker({
        autoUpdateInput: false,
        opens: "center",
        drops: "down",
        locale: { cancelLabel: 'Clear' },
        ranges: {
            'Today': [moment(), moment()],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
            'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
            'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
        }
    }, function (start, end) {
        $('#PendingDatepicker').val(start.format('DD-MM-YYYY') + ' - ' + end.format('DD-MM-YYYY'));

        // Filter Pending Table
        $.fn.dataTable.ext.search.push(function (settings, data) {
            if (settings.nTable.id !== 'pendingTable') return true; // only for pendingTable
            var addedDate = moment(data[4], 'DD-MM-YYYY'); // column index 4 = Date
            return addedDate.isBetween(start, end, undefined, '[]');
        });

        tblPending.draw();
        $.fn.dataTable.ext.search.pop();
    });

    // Clear filter on cancel
    $('#PendingDatepicker').on('cancel.daterangepicker', function () {
        $(this).val('');
        tblPending.draw();
    });



    // ✅ Date range picker
    //$('#dateRange').daterangepicker({
    //    autoUpdateInput: false,
    //    alwaysShowCalendars: false,
    //    locale: {
    //        cancelLabel: 'Clear',
    //        format: 'DD-MM-YYYY',
    //        applyLabel: 'Apply',
    //        customRangeLabel: 'Custom Range'
    //    },
    //    ranges: {
    //        'Today': [moment(), moment()],
    //        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
    //        'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
    //        'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
    //        'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
    //    }
    //}, function (start, end) {
    //    startDate = start.toDate();
    //    endDate = end.toDate();
    //    $('#dateRange').val(start.format('DD-MM-YYYY') + ' - ' + end.format('DD-MM-YYYY'));
    //    table.draw();
    //    updateChart();
    //});

    //$('#dateRange').on('cancel.daterangepicker', function () {
    //    $(this).val('Select Date Range');
    //    startDate = null; endDate = null;
    //    table.draw();
    //    updateChart();
    //});

    //$('#dateRange').val('Select Date Range');





</script>

