@{
    ViewBag.Title = "PurchaseOrederHistoryOk";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
  
    <style>
        .dt-paging nav {
            display: flex;
            justify-content: end;
            margin-right: 20px;
        }
/*        .dt-search {
            display: none;
        }*/

        .daterangepicker-container {
            border: 1px solid #ccc;
            padding: 6px 10px;
            border-radius: 6px;
            cursor: pointer;
            display: inline-block;
            min-width: 200px;
            background: #fff;
        }

        #exportContainer .dt-buttons {
            display: flex;
            justify-content: end; /* center align */
            gap: 8px;
        }
        .table-container {
            overflow-x: auto; /* enable horizontal scroll if needed */
            width: 100%; /* force to parent container width */
        }

        #tblPOHistory {
            width: 100% !important; /* force table to stay inside container */
            table-layout: auto; /* let columns adjust naturally */
        }

        #tblPOHistory th div {
            white-space: nowrap; /* Prevent line break */
            overflow: hidden; /* Hide extra text */
            text-overflow: ellipsis; /* Add "..." if too long */
        }

        #tblPOHistory th {
            vertical-align: middle; /* Align text center vertically */
            text-align: center; /* Align text center horizontally */
            padding: 10px 12px; /* Adjust spacing */
        }
        #searchContainer
        {
           margin-top:70px!important;
        }

    </style>
</head>
<body>
    <!-- Toast container somewhere fixed, e.g. top right -->
    <div id="toastContainer"
         class="toast-container position-fixed top-0 end-0 p-3"
         style="z-index: 2000;">
    </div>

    <div class="container-fluid px-4">
        <div class="card shadow-lg mb-4 ps-3 pe-3">
            <h3 class="text-primary d-flex justify-content-center align-content-center">
                Purchase Order History
            </h3>

            <div class="d-flex justify-content-between align-items-start mb-5 flex-wrap">
                <!-- Left side -->
                <div class="d-flex flex-column gap-3">
                    <!-- Date Range Picker -->
                    <div class="input-group shadow-sm rounded" style="min-width: 250px; height: 53px;">
                        <span class="input-group-text bg-primary text-white border-0">
                            <i class="bi bi-calendar-date"></i>
                        </span>
                        <input type="text" id="Purchasedatepicker"
                               class="form-control border-0 shadow-none"
                               placeholder="Select date range" readonly style="height: 100%;" />
                    </div>

                    <!-- Export Buttons -->
                    <div id="exportContainer" class="d-flex align-items-center gap-2"></div>
                </div>

                <!-- Right side -->
                <div id="searchContainer"></div>
            </div>


            <!-- Table -->
            <div class="table-container pb-4">
                <table class="table table-striped table-bordered text-center align-middle" id="tblPOHistory">
                    <thead class="table-dark text-center align-middle">
                        <tr>
                            <th>
                                <div class="d-flex align-items-center justify-content-center">
                                    <input type="checkbox" id="selectAll" class="me-1">
                                </div>
                            </th>
                            <th><div>SRNO</div></th>
                            <th><div>PONO</div></th>
                            <th><div>Added Date</div></th>
                            <th><div>Vendor Name</div></th>
                            <th><div>Company Name</div></th>
                            <th><div>Total Amount</div></th>
                            <th class="d-none"><div>State Name</div></th>
                            <th><div>Action</div></th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
        <script>
        $(document).ready(function () {
            // Reusable PDF/Print customization function
            function customizeDoc(doc) {
                // Title Styling
                doc.styles.title = {
                    color: '#000000',
                    fontSize: 16,
                    bold: true,
                    alignment: 'center'
                };

                // Generated on date
                doc.content.splice(1, 0, {
                    text: 'Generated on: ' + new Date().toISOString().split('T')[0],
                    fontSize: 10,
                    italics: true,
                    alignment: 'center',
                    margin: [0, 0, 0, 12]
                });

                // Table Header Styling
                doc.styles.tableHeader = {
                    fillColor: '#000000',
                    color: 'white',
                    bold: true,
                    fontSize: 11,
                    alignment: 'center'
                };

                // Table Border + Padding
                var objLayout = {};
                objLayout['hLineWidth'] = function () { return .5; };
                objLayout['vLineWidth'] = function () { return .5; };
                objLayout['hLineColor'] = function () { return '#aaa'; };
                objLayout['vLineColor'] = function () { return '#aaa'; };
                objLayout['paddingLeft'] = function () { return 6; };
                objLayout['paddingRight'] = function () { return 6; };

                // Get the table
                var tableNode = doc.content[doc.content.length - 1];
                tableNode.layout = objLayout;

                // Set fixed widths for all columns
                var colCount = tableNode.table.body[0].length;
                tableNode.table.widths = Array(colCount).fill('*');

                // Wrap in margin to simulate center alignment
                tableNode.alignment = 'center';
                tableNode.margin = [0, 0, 0, 0];
            }

            // Clear processing state for all DataTable buttons
            window.__dt_clearAllProcessing = function () {
                try {
                    // Try to clear via DataTables API
                    var tables = $.fn.dataTable.tables();
                    for (var i = 0; i < tables.length; i++) {
                        try {
                            var api = $(tables[i]).DataTable();
                            if (!api || !api.buttons) continue;
                            var btnCount = (api.buttons().nodes && api.buttons().nodes().length) || 0;
                            for (var j = 0; j < btnCount; j++) {
                                try { api.button(j).processing(false); } catch (e) { }
                            }
                        } catch (e) { }
                    }
                } catch (e) { }

                // Fallback DOM cleanup
                try {
                    $('.dt-button').removeClass('dt-button-processing');
                    $('.dt-button').prop('disabled', false);
                } catch (e) { }
            };

            // Listen for print-done message from print window
            window.addEventListener('message', function (ev) {
                if (ev && ev.data === 'dt_print_done') {
                    window.__dt_clearAllProcessing();
                }
            });

            // Store original button actions if not already stored
            if (!$.fn.dataTable.ext.buttons.pdfHtml5.__originalAction) {
                $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction =
                    $.fn.dataTable.ext.buttons.pdfHtml5.action;
            }
            if (!$.fn.dataTable.ext.buttons.print.__originalAction) {
                $.fn.dataTable.ext.buttons.print.__originalAction =
                    $.fn.dataTable.ext.buttons.print.action;
            }
            if (!$.fn.dataTable.ext.buttons.excelHtml5.__originalAction) {
                $.fn.dataTable.ext.buttons.excelHtml5.__originalAction =
                    $.fn.dataTable.ext.buttons.excelHtml5.action;
            }
            if (!$.fn.dataTable.ext.buttons.csvHtml5.__originalAction) {
                $.fn.dataTable.ext.buttons.csvHtml5.__originalAction =
                    $.fn.dataTable.ext.buttons.csvHtml5.action;
            }

            // Toast notification function
            // ✅ Configure toastr once
            toastr.options = {
                closeButton: true,
                progressBar: true,
                newestOnTop: true,
                positionClass: "toast-top-right",
                preventDuplicates: true,
                timeOut: 3000,
                extendedTimeOut: 1000,
                showDuration: 300,
                hideDuration: 300,
                showMethod: "slideDown",
                hideMethod: "fadeOut"
            };

            // ✅ Helper function for warning toast
            function showExportToast() {
                toastr.warning("Please select at least one row before exporting.", "Warning");
            }

        // Initialize Purchase Order History DataTable
        var tblPOHistory = $("#tblPOHistory").DataTable({
            ajax: {
                url: '@Url.Action("FetchPOHistoryOK", "Purchase")',
                type: "GET",
                dataSrc: "data"
            },
            columns: [
                {
                    data: null,
                    orderable: false,
                    className: "dt-body-center",
                    render: function (data, type, row) {
                        return `<input type="checkbox" class="row-select" value="${row.QuotationID}">`;
                    }
                },
                { data: "SRNO", title: "Sr.No" },
                { data: "POCode", title: "PO NO" },
                {
                    data: "AddedDateString", title: "Added Date",
                    "render": function (data) {
                        if (!data) return "";
                        var match = /Date\((\d+)\)/.exec(data);
                        if (match) {
                            var dt = new Date(parseInt(match[1], 10));
                            return dt.toLocaleDateString("en-GB");
                        }
                        var dt2 = new Date(data);
                        if (!isNaN(dt2.getTime())) {
                            return dt2.toLocaleDateString("en-GB");
                        }

                        return data;
                    }
                },
                { data: "VendorName", title: "Vendor Name" },
                { data: "CompanyName", title: "Company Name" },
                {
                    data: "TotalAmount",
                    title: "Total Amount",
                    render: function (data, type, row) {
                        return "₹ " + data;
                    }
                },
                { data: "StateName", title: "State Name", visible: false },
                {
                    data: null,
                    render: function (data, type, row) {
                        return `
                            <button class="btn btn-sm btn-primary btn-view"
                                    data-row='${JSON.stringify(row)}'
                                    data-bs-toggle="tooltip"
                                    data-bs-placement="top"
                                    title="View PO">
                                <i class="bi bi-eye-fill"></i>
                            </button>`;
                    }
                }
            ],
            paging: true,
            searching: true,
            lengthChange: false,
            pageLength: 10,
            ordering: false ,
            select: {
                style: 'multi',
                selector: 'td:first-child input[type="checkbox"]'
            },
            dom: 'Bfrtip',
            buttons: [
                // Print button
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    titleAttr: 'Print',
                    title: 'Purchase Order History List',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7],
                        rows: function (idx, data, node) {
                            return $(tblPOHistory.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, tblPOHistory);
                                return data;
                            }
                        }
                    },
                    customize: function (win) {
                        var $body = $(win.document.body);

                        // Inject custom CSS for print
                        $body.append(`
                            <style>
                                thead th {
                                    background-color: black !important;
                                    color: white !important;
                                    text-align: center !important;
                                    -webkit-print-color-adjust: exact !important;
                                    print-color-adjust: exact !important;
                                }
                                table {
                                    border-collapse: collapse !important;
                                    width: 100% !important;
                                }
                                td, th {
                                    border: 1px solid #000 !important;
                                    padding: 6px !important;
                                }
                            </style>
                        `);

                        // Center title
                        $body.find('h1').css('text-align', 'center');

                        // Insert generated date
                        $body.find('h1').after(
                            '<div style="text-align:center;font-style:italic;font-size:10pt;margin-bottom:12px;">Generated on: '
                            + new Date().toISOString().split('T')[0] + '</div>'
                        );

                        // Add bootstrap table styles
                        $body.find('table')
                            .addClass('table table-bordered table-striped')
                            .css('width', '100%');

                        // Font size
                        $body.css('font-size', '12pt');
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // Show spinner
                        try { btnApi.processing(true); } catch (err) { }

                        // Call original print action
                        try {
                            $.fn.dataTable.ext.buttons.print.__originalAction.call(this, e, dt, button, config);
                        } catch (err) {
                            // Ensure spinner not left running
                            setTimeout(function () { try { btnApi.processing(false); } catch (e) { } }, 300);
                            throw err;
                        }

                        // Final fallback: if print window never reports, clear after 2s
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 2000);
                    }
                },
                // PDF Export button
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf-fill text-danger fs-5"></i>',
                    titleAttr: 'PDF',
                    title: 'Purchase Order History List',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7],
                        rows: function (idx, data, node) {
                            return $(tblPOHistory.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, tblPOHistory);
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            btnApi.processing(false);
                            return;
                        }

                        btnApi.processing(true);

                        // If pdfMake exists, wrap its download so we can stop spinner when done
                        if (window.pdfMake && pdfMake.createPdf && !pdfMake._patchedForDT) {
                            (function () {
                                var origCreate = pdfMake.createPdf;
                                pdfMake.createPdf = function (docDefinition) {
                                    var pdfDoc = origCreate.call(pdfMake, docDefinition);
                                    var origDownload = pdfDoc.download;
                                    pdfDoc.download = function (filename, cb) {
                                        origDownload.call(pdfDoc, filename, function () {
                                            try { btnApi.processing(false); } catch (err) { }
                                            if (typeof cb === 'function') cb();
                                        });
                                    };
                                    return pdfDoc;
                                };
                                pdfMake._patchedForDT = true; // only patch once
                            })();
                        }

                        // Call original action
                        $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction.call(this, e, dt, button, config);

                        // Final fallback: clear after timeout just in case
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 1500);
                    },
                    customize: customizeDoc
                },
                // Excel Export button
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel-fill text-success fs-5"></i>',
                    titleAttr: 'Excel',
                    title: 'Purchase Order History List',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7],
                        rows: function (idx, data, node) {
                            return $(tblPOHistory.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, tblPOHistory);
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        try { btnApi.processing(true); } catch (err) { }

                        // Call original excelHtml5 action
                        $.fn.dataTable.ext.buttons.excelHtml5.__originalAction.call(this, e, dt, button, config);

                        // Fallback clear spinner after 1.5s
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 300);
                    }
                },
                // CSV Export button
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    titleAttr: 'CSV',
                    title: 'Purchase Order History List',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6, 7],
                        rows: function (idx, data, node) {
                            return $(tblPOHistory.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, tblPOHistory);
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        try { btnApi.processing(false); } catch (err) { }

                        $.fn.dataTable.ext.buttons.csvHtml5.__originalAction.call(this, e, dt, button, config);

                        // Stop spinner almost immediately (no real callback exists)
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 300);
                    }
                }
            ],
            // Recalculate Sr.No on every draw
            drawCallback: function (settings) {
                var api = this.api();
                api.column(1, { page: 'current' }).nodes().each(function (cell, i) {
                    cell.innerHTML = i + 1 + settings._iDisplayStart;
                });
                initTooltips();
            }
        });

        // Initialize Bootstrap tooltips
        function initTooltips() {
            const tooltipTriggerList = [].slice.call(
                document.querySelectorAll('[data-bs-toggle="tooltip"]')
            );
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    customClass: 'tooltip-dark'
                });
            });
        }

        // Move DataTables buttons to the left container
        tblPOHistory.buttons().container().appendTo('#exportContainer');

        // Move default DataTables search input to the right container
        $('.dt-search label').appendTo('#searchContainer');
        $('.dt-search input[type="search"]').appendTo('#searchContainer');

        // Function to get selected rows
        function getSelectedRows() {
            var selected = [];
            tblPOHistory.$('input.row-select:checked').each(function () {
                var rowIndex = tblPOHistory.row($(this).closest('tr')).index();
                selected.push(rowIndex);
            });
            return selected;
        }

        // Handle Select All checkbox
        $(document).on('change', '#selectAll', function () {
            var isChecked = $(this).is(':checked');
            $('.row-select').prop('checked', isChecked);
        });

        // If any row unchecked → uncheck header checkbox
        $(document).on('change', '.row-select', function () {
            if ($('.row-select:checked').length === $('.row-select').length) {
                $('#selectAll').prop('checked', true);
            } else {
                $('#selectAll').prop('checked', false);
            }
        });

        // View PO button click handler
        $(document).on("click", ".btn-view", function () {
            let row = $(this).data("row");
            // Open PDF in new tab
            window.open('/Purchase/GeneratePOPDF?POCode=' + row.POCode, '_blank');
        });

            // Date Picker initialization
            $('#Purchasedatepicker').daterangepicker({
                autoUpdateInput: false,
                opens: "center",
                drops: "down",
                locale: {
                    cancelLabel: 'Clear',
                    format: 'DD/MM/YYYY' // display format
                },
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                    'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                    'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
                    //'This Month': [moment().startOf('month'), moment().endOf('month')],
                    //'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, function (start, end) {
                // Update input field
                $('#Purchasedatepicker').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));

                // Filter DataTable rows based on selected date range
                $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                    var addedDate = moment(data[3], 'DD/MM/YYYY'); // assuming 4th column is date
                    return addedDate.isBetween(start, end, undefined, '[]');
                });

                tblPOHistory.draw();
                $.fn.dataTable.ext.search.pop();
            });

            // Clear date picker when cancelled
            $('#Purchasedatepicker').on('cancel.daterangepicker', function () {
                $(this).val('');
                tblPOHistory.draw();
            });

            // Clear filter button
            $('#clearFilter').on('click', function () {
                $('#Purchasedatepicker').val('');
                tblPOHistory.draw();
            });


        // Handle Select All checkbox (duplicate - consider removing one)
        $(document).on('change', '#selectAll', function () {
            var isChecked = $(this).is(':checked');
            $('.row-select').prop('checked', isChecked);
        });

        $(document).on('change', '.row-select', function () {
            if ($('.row-select:checked').length === $('.row-select').length) {
                $('#selectAll').prop('checked', true);
            } else {
                $('#selectAll').prop('checked', false);
            }
        });

        // View PO button click handler (duplicate - consider removing one)
        $(document).on("click", ".btn-view", function (e) {
            // Tooltip cleanup
            var $targetWithTooltip = $(e.target).closest('[data-bs-toggle="tooltip"]');
            if ($targetWithTooltip.length === 0) {
                $targetWithTooltip = $(this).closest('button, [data-bs-toggle="tooltip"]');
            }

            try { $targetWithTooltip.blur(); } catch (err) { }
            const tooltip = bootstrap.Tooltip.getInstance($targetWithTooltip.get(0));
            if (tooltip) {
                tooltip.hide(); // or tooltip.dispose() if you want to fully destroy
            }

            // Your existing logic: open PDF
            let row = $(this).data("row");
            window.open('/Purchase/GeneratePOPDF?POCode=' + row.POCode, '_blank');
        });

    });

    // Helper function to recalc SrNo for export across all pages
    function getExportSrNo(rowIdx, tbl) {
        // Get all rows nodes
        let allRows = tbl.rows({ order: 'applied', search: 'applied' }).nodes().toArray();
        // Filter only the checked rows
        let checkedRows = allRows.filter(row => $(row).find('input.row-select').prop('checked'));
        // Find the position of this row in the checkedRows array
        let sr = checkedRows.findIndex(row => tbl.row(row).index() === rowIdx) + 1;
        return sr; // consecutive Sr.No
    }
        </script>
</body>
</html>

