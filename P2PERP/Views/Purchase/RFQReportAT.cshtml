@model IEnumerable<P2PLibray.Purchase.Purchase>

<div id="pageContent" class="main-ocntent">
    <div class="container mt-5">
        <!-- ✅ Date Range Picker -->
        <div class="row mb-3">
            <div class="col-md-3">
                <div class="input-group">
                    <span class="input-group-text bg-primary text-white">
                        <i class="bi bi-calendar-event"></i>
                    </span>
                    <input type="text" id="dateRange" class="form-control" placeholder="Select Date Range" />
                </div>
            </div>
        </div>

        <!-- ✅ Chart Section -->
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card p-3 shadow h-100">
                    <h4 class="text-primary fw-bold text-center mb-3">RFQ Vendors Invited vs Responded</h4>
                    <div id="rfqBarChart" style="height:350px;"></div>
                </div>
            </div>
        </div>



        <!-- ✅ Toast container -->
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1100">
            <div id="exportToast" class="toast align-items-center text-bg-warning border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">
                        ⚠️ Select at least one row before exporting.
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        </div>




        <!-- ✅ Table Section -->
        <div class="card p-3 shadow">
            <h3 class="mb-3 text-center text-primary">RFQ List</h3>
            <div class="table-responsive">
                <table id="purchaseTable" class="table table-striped table-bordered nowrap w-100">
                    <thead class="table-dark">
                        <tr>
                            <th><input type="checkbox" id="selectAll" /></th> <!-- checkbox first -->
                            <th>Sr.</th> <!-- serial number second -->
                            <th>RFQ Code</th>
                            <th>Status</th>
                            <th>Added By</th>
                            <th>Added Date</th>
                            <th>Vendors Invited</th>
                            <th>Responses</th>
                            <th>Response Rate</th>
                            <th>Generated PO</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td><input type="checkbox" class="rowCheckbox" value="@item.RFQCode" /></td>
                                <td></td> <!-- serial filled by JS -->
                                <td>@item.RFQCode</td>
                                <td>@item.StatusName</td>
                                <td>@item.AddedBy</td>
                                @*<td>@(DateTime.TryParse(item.AddedDate, out var d) ? d.ToString("dd-MM-yyyy") : "-")</td>*@
                                <td>
                                   @(item.AddedDateAT.HasValue 
        ? item.AddedDateAT.Value.ToString("dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture) 
        : "")
                                </td>
                                <td>@item.VendorsInvited</td>
                                <td>@item.VendorsResponded</td> 
                                <td>@item.ResponseRatePercent</td>
                                <td>@item.FinalOutcomePOCode</td>
                                <td>
                                    <button id="btnview" type="button"
                                            class="btn btn-sm btn-primary view-vendors"
                                            data-rfqcode="@item.RFQCode">
                                        <i class="bi bi-eye"></i>
                                    </button>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>




@*Modal View*@


<div class="modal fade" data-bs-backdrop="true" id="rfqVendorModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <div class="w-100 text-center">
                    <h5 class="modal-title text-white mb-3">RFQ Vendor Responses</h5>
                </div>
                <button type="button" class="btn-close btn-close-white mb-2" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body">
                <table id="rfqVendorTable" class="table table-striped table-bordered w-100">
                    <thead class="table-dark">
                        <tr>
                            <th class="text-center">Sr.</th>
                            <th class="text-center">RQ Code</th>
                            <th class="text-center">Vendor Name</th>
                            <th class="text-center">Days to Receive Quotation</th>
                            <th class="text-center">Days to Approve Quotation</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>





<style>
    #rfqVendorModal th, #rfqVendorModal td {
        text-align: center;
        vertical-align: middle;
        border: 1px solid #dee2e6 !important;
    }
</style>

<style>
    /* ensure table borders show in UI */
    #purchaseTable th, #purchaseTable td {
        text-align: center;
        vertical-align: middle;
        border: 1px solid #dee2e6 !important;
    }

    /* keep the buttons/search area visible when horizontally scrolling */
    .dataTables_wrapper .dt-buttons,
    .dataTables_wrapper .dataTables_filter {
        position: sticky;
        top: 0;
        z-index: 6;
        background: #fff;
        padding-top: .5rem;
        padding-bottom: .5rem;
    }



    .status-badge {
        background-color: green;
        padding: 2px 6px;
        border-radius: 4px;
        /*        font-weight: bold;*/
        /*        display: inline-block;*/
        font-size: 0.9em;
        /*        border-radius :40px;*/
    }

    .bg-warning {
        background-color: orange;
    }
</style>

<script>


    // Clear processing state for all DataTable buttons
    window.__dt_clearAllProcessing = function () {
        try {
            // Try to clear via DataTables API
            var tables = $.fn.dataTable.tables();
            for (var i = 0; i < tables.length; i++) {
                try {
                    var api = $(tables[i]).DataTable();
                    if (!api || !api.buttons) continue;
                    var btnCount = (api.buttons().nodes && api.buttons().nodes().length) || 0;
                    for (var j = 0; j < btnCount; j++) {
                        try { api.button(j).processing(false); } catch (e) { }
                    }
                } catch (e) { }
            }
        } catch (e) { }

        // Fallback DOM cleanup
        try {
            $('.dt-button').removeClass('dt-button-processing');
            $('.dt-button').prop('disabled', false);
        } catch (e) { }
    };

    // Listen for print-done message from print window
    window.addEventListener('message', function (ev) {
        if (ev && ev.data === 'dt_print_done') {
            window.__dt_clearAllProcessing();
        }
    });

    // Store original button actions if not already stored
    if (!$.fn.dataTable.ext.buttons.pdfHtml5.__originalAction) {
        $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction =
            $.fn.dataTable.ext.buttons.pdfHtml5.action;
    }
    if (!$.fn.dataTable.ext.buttons.print.__originalAction) {
        $.fn.dataTable.ext.buttons.print.__originalAction =
            $.fn.dataTable.ext.buttons.print.action;
    }
    if (!$.fn.dataTable.ext.buttons.excelHtml5.__originalAction) {
        $.fn.dataTable.ext.buttons.excelHtml5.__originalAction =
            $.fn.dataTable.ext.buttons.excelHtml5.action;
    }
    if (!$.fn.dataTable.ext.buttons.csvHtml5.__originalAction) {
        $.fn.dataTable.ext.buttons.csvHtml5.__originalAction =
            $.fn.dataTable.ext.buttons.csvHtml5.action;
    }


    var table, rfqChart;
    var startDate = null, endDate = null;

    $(document).ready(function () {
        table = $('#purchaseTable').DataTable({
            scrollX: false,
            autoWidth: false,
            ordering: false,
            dom:
                "<'row mb-2'<'col-6'B><'col-6 text-end'f>>" +
                "<'row'<'col-12'tr>>" +
                "<'row mt-2'<'col-5'i><'col-7 text-end'p>>",

            columnDefs: [
                { targets: 0, orderable: false, searchable: false }, // checkbox
                { targets: 1, orderable: false, searchable: false }, // serial
                { targets: 4, visible: false }                       // 🔥 hide "Added By" column
            ],

            createdRow: function (row, data, dataIndex) {
                var status = data[3]; // Status column index (0-based)
                var $cell = $('td', row).eq(3);

                if (status === "Requested") {
                    $cell.html('<span class="status-badge text-white bg-success">Requested</span>');
                } else if (status === "Pending") {
                    $cell.html('<span class="status-badge text-white bg-warning">Pending</span>');
                }
            },
            order: [[2, 'asc']],
            buttons: [

                //Print
                {
                    extend: 'print',
                    title: 'RFQ List',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3, 4, 5, 6, 7, 8, 9], // exclude checkbox
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    // correct serial number based on filtered rows
                                    var idxInFiltered = table.rows({ filter: 'applied' }).indexes().indexOf(row);
                                    return idxInFiltered + 1;
                                }
                                return data;
                            }
                        }
                    },
                    //action: function (e, dt, button, config) {
                    //    if ($('.rowCheckbox:checked').length === 0) {
                    //        showExportToast();
                    //        return;
                    //    }
                    //    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    //},
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        // Support both checkbox classes
                        var selectedCount = selected || $('.rowCheckbox:checked').length;

                        // --- No selection ---
                        if (selectedCount === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // --- Show spinner ---
                        try { btnApi.processing(true); } catch (err) { }

                        // --- Call original Print action ---
                        try {
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        } catch (err) {
                            console.error('Print export error:', err);
                            // Ensure spinner stops on error
                            setTimeout(function () { try { btnApi.processing(false); } catch (e) { } }, 300);
                            throw err;
                        }

                        // --- Final fallback: stop spinner after 2s ---
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 2000);
                    },

                    customize: function (win) {
                        // center the heading
                        $(win.document.body).find('h1').css({
                            'text-align': 'center',
                            'font-size': '20px',
                            'margin-bottom': '0'
                        });
                        // add export date below heading
                        var exportDate = new Date().toLocaleDateString('en-GB');
                        $(win.document.body).find('h1').after('<div style="text-align:center; margin-bottom:10px; font-size:12px;">Export Date: ' + exportDate + '</div>');

                        // center the table
                        $(win.document.body).find('table').css({
                            'margin': '0 auto',
                            'text-align': 'center'
                        });
                    }
                },

                //PDF
                {
                    extend: 'pdfHtml5',
                    title: 'RFQ List',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3, 4, 5, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    // serial number based on filtered rows
                                    var idxInFiltered = table.rows({ filter: 'applied' }).indexes().indexOf(row);
                                    return idxInFiltered + 1;
                                }
                                return data;
                            }
                        }
                    },
                    //action: function (e, dt, button, config) {
                    //    if ($('.rowCheckbox:checked').length === 0) {
                    //        showExportToast();
                    //        return;
                    //    }
                    //    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    //},
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        // Check selection via both checkbox classes
                        var selectedCount = selected || $('.rowCheckbox:checked').length;

                        if (selectedCount === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // Show spinner
                        try { btnApi.processing(true); } catch (err) { }

                        // Patch pdfMake download to stop spinner when done (only once)
                        if (window.pdfMake && pdfMake.createPdf && !pdfMake._patchedForDT) {
                            (function () {
                                var origCreate = pdfMake.createPdf;
                                pdfMake.createPdf = function (docDefinition) {
                                    var pdfDoc = origCreate.call(pdfMake, docDefinition);
                                    var origDownload = pdfDoc.download;
                                    pdfDoc.download = function (filename, cb) {
                                        origDownload.call(pdfDoc, filename, function () {
                                            try { btnApi.processing(false); } catch (err) { }
                                            if (typeof cb === 'function') cb();
                                        });
                                    };
                                    return pdfDoc;
                                };
                                pdfMake._patchedForDT = true; // patch only once
                            })();
                        }

                        // Call original PDF action
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);

                        // Fallback: stop spinner after 1.5s if something fails
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 1500);
                    },

                    customize: function (doc) {
                        // Center heading
                        doc.content[0].alignment = 'center';
                        doc.content[0].fontSize = 14;

                        // Add export date below heading
                        var exportDate = new Date().toLocaleDateString('en-GB');
                        doc.content.splice(1, 0, {
                            text: 'Export Date: ' + exportDate,
                            alignment: 'center',
                            margin: [0, 0, 0, 8],
                            fontSize: 10
                        });

                        // Table header style: black background, white text
                        doc.styles.tableHeader.fillColor = '#000000';
                        doc.styles.tableHeader.color = '#ffffff';
                        doc.styles.tableHeader.alignment = 'center';
                        doc.styles.tableHeader.bold = true;

                        // Table layout
                        var objLayout = {};
                        objLayout['hLineWidth'] = function (i) { return 0.5; };
                        objLayout['vLineWidth'] = function (i) { return 0.5; };
                        objLayout['hLineColor'] = function (i) { return '#aaa'; };
                        objLayout['vLineColor'] = function (i) { return '#aaa'; };
                        objLayout['paddingLeft'] = function (i) { return 4; };
                        objLayout['paddingRight'] = function (i) { return 4; };
                        doc.content[doc.content.length - 1].layout = objLayout;
                    }
                },

                //Excel
                {
                    extend: 'excelHtml5',
                    title: 'RFQ List',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3, 4, 5, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    // Serial number based on filtered/checked rows
                                    var filteredIndexes = table.rows({ filter: 'applied' }).indexes().toArray();
                                    var checkedIndexes = filteredIndexes.filter(i => {
                                        var node = table.row(i).node();
                                        return $(node).find('input.rowCheckbox').prop('checked');
                                    });
                                    return checkedIndexes.indexOf(row) + 1;
                                }
                                return data;
                            }
                        }
                    },
                    //action: function (e, dt, button, config) {
                    //    if ($('.rowCheckbox:checked').length === 0) {
                    //        showExportToast();
                    //        return;
                    //    }
                    //    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    //}
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        // Support both checkbox classes
                        var selectedCount = selected || $('.rowCheckbox:checked').length;

                        // --- No selection ---
                        if (selectedCount === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // --- Show spinner ---
                        try { btnApi.processing(true); } catch (err) { }

                        // --- Call original Excel export action ---
                        try {
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        } catch (err) {
                            console.error('Excel export error:', err);
                            setTimeout(function () { try { btnApi.processing(false); } catch (e) { } }, 300);
                            throw err;
                        }

                        // --- Fallback: stop spinner shortly after ---
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 1500);
                    },

                },
                //CSV
                {
                    extend: 'csvHtml5',
                    title: 'RFQ List',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.rowCheckbox').prop('checked');
                        },
                        columns: [1, 2, 3, 4, 5, 6, 7, 8, 9],
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    // Serial number based on filtered/checked rows
                                    var filteredIndexes = table.rows({ filter: 'applied' }).indexes().toArray();
                                    var checkedIndexes = filteredIndexes.filter(i => {
                                        var node = table.row(i).node();
                                        return $(node).find('input.rowCheckbox').prop('checked');
                                    });
                                    return checkedIndexes.indexOf(row) + 1;
                                }
                                return data;
                            }
                        }
                    },
                    //action: function (e, dt, button, config) {
                    //    if ($('.rowCheckbox:checked').length === 0) {
                    //        showExportToast();
                    //        return;
                    //    }
                    //    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    //}
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        // Support both checkbox classes
                        var selectedCount = selected || $('.rowCheckbox:checked').length;

                        // --- No selection ---
                        if (selectedCount === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // --- Show spinner ---
                        try { btnApi.processing(true); } catch (err) { }

                        // --- Call original CSV export action ---
                        try {
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        } catch (err) {
                            console.error('CSV export error:', err);
                            setTimeout(function () { try { btnApi.processing(false); } catch (e) { } }, 300);
                            throw err;
                        }

                        // --- Fallback: stop spinner shortly after ---
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 300);
                    },

                },
                'colvis'
            ]

        });

        // ✅ Serial numbers in sequence
        table.on('draw.dt', function () {
            var pageInfo = table.page.info();
            table.column(1, { page: 'current' }).nodes().each(function (cell, i) {
                cell.innerHTML = pageInfo.start + i + 1;
            });
        }).draw();



        // ✅ Date filter
        
        $.fn.dataTable.ext.search.push(function (settings, data) {
            var dateStr = data[5]; // Added Date column
            if (!dateStr) return true;

            // Split by slash '/'
            var parts = dateStr.split("/");
            if (parts.length !== 3) return true;

            var d = new Date(parts[2], parts[1] - 1, parts[0]);
            d.setHours(0, 0, 0, 0);

            var s = startDate ? new Date(startDate) : null;
            var e = endDate ? new Date(endDate) : null;
            if (s) s.setHours(0, 0, 0, 0);
            if (e) e.setHours(0, 0, 0, 0);

            if (s && d < s) return false;
            if (e && d > e) return false;

            return true;
        });

        // ✅ Checkbox logic
        $(document).on('change', '#selectAll', function () {
            var checked = this.checked;
            $('.rowCheckbox').prop('checked', checked);
        });

        $(document).on('change', '.rowCheckbox', function () {
            var total = $('.rowCheckbox').length;
            var checkedCount = $('.rowCheckbox:checked').length;
            if (checkedCount === total) {
                $('#selectAll').prop('checked', true).prop('indeterminate', false);
            } else if (checkedCount === 0) {
                $('#selectAll').prop('checked', false).prop('indeterminate', false);
            } else {
                // remove minus sign completely
                $('#selectAll').prop('checked', false).prop('indeterminate', false);
            }
        });

        // ✅ Date range picker
        $('#dateRange').daterangepicker({
            autoUpdateInput: false,
            alwaysShowCalendars: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'DD-MM-YYYY',
                applyLabel: 'Apply',
                customRangeLabel: 'Custom Range'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        }, function (start, end) {
            startDate = start.toDate();
            endDate = end.toDate();
            $('#dateRange').val(start.format('DD-MM-YYYY') + ' - ' + end.format('DD-MM-YYYY'));
            table.draw();
            updateChart();
        });

        $('#dateRange').on('cancel.daterangepicker', function () {
            $(this).val('Select Date Range');
            startDate = null; endDate = null;
            table.draw();
            updateChart();
        });

        $('#dateRange').val('Select Date Range');

        // ✅ Build/Update Highcharts bar chart (same as your existing updateChart function)
        function buildChart(rfqCodes, invitedData, respondedData, totalRFQs) {
            rfqChart = Highcharts.chart('rfqBarChart', {
                chart: { type: 'column' },
                title: { text: 'Vendors Invited vs Vendors Responded per RFQ' },
                subtitle: {
                    text: '<span style="font-size:32px; font-weight:bold;">Total RFQs: ' + totalRFQs + '</span>',
                    align: 'left', verticalAlign: 'top', x: 10, y: 20, useHTML: true
                },
                xAxis: { categories: rfqCodes, crosshair: true },
                yAxis: { min: 0, title: { text: 'Count' } },
                tooltip: { shared: true },
                plotOptions: { column: { grouping: true, shadow: false, borderWidth: 0 } },
                series: [
                    { name: 'Vendors Invited', data: invitedData, color: '#007bff' },
                    { name: 'Vendors Responded', data: respondedData, color: '#28a745' }
                ]
            });
        }

        function updateChart() {
            var rfqData = [];
            table.rows({ filter: 'applied' }).every(function () {
                var d = this.data();
                var addedDateStr = d[5];
                var parts = addedDateStr.split("-");
                var addedDate = new Date(parts[2], parts[1] - 1, parts[0]);
                var responded = parseInt(d[7]) || 0;
                if (responded > 0) {
                    rfqData.push({
                        rfqCode: d[2],
                        invited: parseInt(d[6]) || 0,
                        responded: responded,
                        date: addedDate
                    });
                }
            });

            rfqData.sort((a, b) => b.date - a.date);
            var chartData = rfqData.slice(0, 15);

            var rfqCodes = chartData.map(x => x.rfqCode);
            var invitedData = chartData.map(x => x.invited);
            var respondedData = chartData.map(x => x.responded);
            var totalRFQs = table.rows({ filter: 'applied' }).count();

            if (rfqChart) {
                rfqChart.xAxis[0].setCategories(rfqCodes, false);
                rfqChart.series[0].setData(invitedData, false);
                rfqChart.series[1].setData(respondedData, false);
                rfqChart.setSubtitle({
                    text: '<span style="font-size:32px; font-weight:bold;">Total RFQs: ' + totalRFQs + '</span>',
                    align: 'left', verticalAlign: 'top', x: 10, y: 20, useHTML: true
                });
                rfqChart.redraw();
            } else {
                buildChart(rfqCodes, invitedData, respondedData, totalRFQs);
            }
        }

        updateChart();
        table.on('draw', function () { updateChart(); });


        // ✅ Utility: show warning toast
        function showExportToast() {
            var toastEl = document.getElementById('exportToast');
            var toast = new bootstrap.Toast(toastEl);
            toast.show();
        }


        // ✅ Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            preventDuplicates: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            timeOut: "3000" // 3 seconds
        };

        // ✅ Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.", "Warning");
        }




        //modal table

        $(document).on('click', '.view-vendors', function () {
            var rfqCode = $(this).data('rfqcode');

            $.ajax({
                url: '/Purchase/GetRFQVendorResponses',
                type: 'GET',
                data: { rfqCode: rfqCode },
                success: function (res) {
                    if (res.success) {
                        var tbody = $('#rfqVendorTable tbody');
                        tbody.empty();

                        $.each(res.data, function (i, item) {
                            tbody.append(`
        <tr>
            <td>${i + 1}</td> <!-- Serial number -->
            <td>${item.RegisterQuotationCode}</td>
            <td>${item.VendorName}</td>
            <td>${item.DaysToReceiveQuotation}</td>
            <td>${item.DaysToApproveQuotation}</td>
        </tr>
    `);
                        });


                        $('#rfqVendorModal').modal('show');
                    } else {
                        toastr.error(res.message || 'No data found.');
                    }
                },
                error: function () {
                    toastr.error('Error loading vendor responses.');
                }
            });
        });


    });
</script>
