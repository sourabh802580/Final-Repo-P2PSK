@model IEnumerable<P2PLibray.Purchase.Purchase>

<div class="main-content" id="pageContent">
    <div class="container mt-5">
        <!-- ✅ Date Range Picker -->
        <div class="row mb-3">
            <div class="col-md-3">
                <div class="input-group">
                    <span class="input-group-text bg-primary text-white">
                        <i class="bi bi-calendar-event"></i>
                    </span>
                    <input type="text" id="dateRange" class="form-control" placeholder="Select Date Range" />
                </div>
            </div>
        </div>

        @*✅ Pie Chart Section with total count on left*@
        <div class="row mb-4">
            @*Chart on Right*@
            <div class="col-md-12">
                <div class="card p-3 shadow h-100">
                    <h4 class="text-primary fw-bold text-center mb-3">PR Converted vs Not Converted</h4>
                    <div id="statusPieChart" style="height:350px;"></div>
                </div>
            </div>
        </div>


        <!-- ✅ Table Section -->
        <div class="card p-3 shadow">
            <h3 class="mb-3">Purchase Requisition List</h3>
            <div class="table-responsive">
                <table id="purchaseTable" class="table table-striped table-bordered nowrap w-100">
                    <thead class="table-dark">
                        <tr>
                            <th><input type="checkbox" id="selectAll" /></th> <!-- ✅ now first column is checkbox -->
                            <th>Sr.</th> <!-- ✅ second column serial number -->
                            <th>PR Code</th>
                            <th>PR Created</th>
                            <th>PR Approved</th>
                            <th>Converted RFQ</th>
                            <th>RFQ Code</th>
                            <th>RFQ Created</th>
                            <th>Days To Convert</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td><input type="checkbox" class="rowCheckbox" value="@item.PRCode" /></td> <!-- 0 -->
                                <td></td> <!-- 1 -->
                                <td>@item.PRCode</td> <!-- 2 -->
                                <td>@(item.PRCreatedDate.HasValue ? item.PRCreatedDate.Value.ToString("dd'/'MM'/'yyyy", System.Globalization.CultureInfo.InvariantCulture) : "")</td>
                                <td>@(item.PRApprovedDate.HasValue ? item.PRApprovedDate.Value.ToString("dd'/'MM'/'yyyy", System.Globalization.CultureInfo.InvariantCulture) : "")</td>
                                <td>@item.ConvertedToRFQ</td>
                                <td>@item.RFQCode</td>
                                <td>@(item.RFQCreatedDate.HasValue ? item.RFQCreatedDate.Value.ToString("dd'/'MM'/'yyyy", System.Globalization.CultureInfo.InvariantCulture) : "")</td>
                                <td>@item.DaysToConvert</td>
                                <td>@item.StatusName</td>
                                <td>
                                    <button id="btnview" type="button"
                                            class="btn btn-sm btn-primary view-items"
                                            data-prcode="@item.PRCode">
                                        <i class="bi bi-eye"></i>
                                    </button>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>



@*Modal View*@

<div class="modal fade" data-bs-backdrop="true" id="prItemsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="modal-title text-white w-100 text-center">Purchase Requisition Items</h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body">
                <table id="prItemsTable" class="table table-striped table-bordered w-100">
                    <thead class="table-dark">
                        <tr>
                            <th class="text-center">Sr.</th>
                            <th class="text-center">PRCode</th>
                            <th class="text-center">Item Name</th>
                            <th class="text-center">Cost Per Unit</th>
                            <th class="text-center">RequiredQuantity</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>





<style>
    #purchaseTable th,
    #purchaseTable td {
        text-align: center;
        vertical-align: middle;
    }

    .status-badge {
        background-color: green;
        padding: 2px 6px;
        border-radius: 4px;
        /*        font-weight: bold;*/
        /*        display: inline-block;*/
        font-size: 0.9em;
        /*        border-radius :40px;*/
    }

    .bg-warning {
        background-color: orange;
    }
</style>


<script>
    var table;
    var statusChart;
    var startDate = null;
    var endDate = null;
    var selectedPRCodes = [];

    $(document).ready(function () {
        table = $('#purchaseTable').DataTable({
            scrollX: false,
            scrollCollapse: true,
            ordering:false,
            autoWidth: false,
            dom:
                "<'row mb-2'<'col-6'B><'col-6 text-end'f>>" +
                "<'row'<'col-12'tr>>" +
                "<'row mt-2'<'col-5'i><'col-7 text-end'p>>",
            columnDefs: [
                { targets: 0, orderable: false, searchable: false }, // checkbox col
                { targets: 1, orderable: false, searchable: false }  // serial col
            ],

            createdRow: function (row, data, dataIndex) {
                var status = data[9]; // Status column index (0-based)
                var $cell = $('td', row).eq(9);

                if (status === "Approved") {
                    $cell.html('<span class="status-badge text-white bg-success">Approved</span>');
                } else if (status === "Rejected") {
                    $cell.html('<span class="status-badge text-white bg-danger">Rejected</span>');
                }
            },



            // Show Approved (Status) first (col 9), then PR Code (col 2)
            order: [[9, 'asc'], [2, 'asc']],
            buttons: [
                {
                    extend: 'print',
                    title: '', // remove default title
                    text: '<i class="bi bi-printer-fill text-dark"></i>',
                    className: 'btn bg-muted btn-outline-dark border-2 fw-bold',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 6, 7, 8, 9], // include Sr.No, exclude checkbox & action
                        rows: function (idx, data, node) {
                            return selectedPRCodes.length === 0 || selectedPRCodes.includes(data[2]);
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                // remove any HTML tags
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) {
                            showExportToast();
                            return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                    customize: function (win) {
                        var exportDate = new Date().toLocaleDateString('en-GB');

                        // Remove unwanted blank text (from DataTables default print)
                        $(win.document.body).find('h1').remove();

                        // Add custom heading and export date
                        $(win.document.body).prepend(
                            `<h2 style="text-align:center; margin-bottom:0.2em;">Purchase Requisition List</h2>
<p style="text-align:center; font-size:10pt; margin-top:0;">Export Date: ${exportDate}</p>`
                        );

                        $(win.document.body).find('table')
                            .addClass('display')
                            .css('font-size', '10pt')
                            .css('border-collapse', 'collapse')
                            .css('width', '100%');

                        // center all table headers & cells
                        $(win.document.body).find('th, td')
                            .css('text-align', 'center')
                            .css('vertical-align', 'middle');

                        // Recompute Sr.No in the exported table (first column)
                        $(win.document.body).find('table tbody tr').each(function (i, row) {
                            $(row).find('td').eq(0).text(i + 1);
                        });
                    }
                },

                // ----- PDF: exclude checkbox column, keep PR Code intact, add Export Date & header style -----
                {

                    extend: 'pdfHtml5',
                    title: 'Purchase Requisition List',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    className: 'btn bg-muted btn-outline-dark border-2 fw-bold',
                    exportOptions: {
                        columns: function (idx, data, node) { return idx !== 0; },
                        rows: function (idx, data, node) { return selectedPRCodes.length === 0 || selectedPRCodes.includes(data[2]); },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 0) return rowIdx + 1;
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },

                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) {
                            showExportToast(); // 🔔 will now work
                            return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },

                    customize: function (doc) {
                        try {
                            // center title
                            if (doc.content && doc.content.length > 0 && doc.content[0].text) {
                                doc.content[0].alignment = 'center';
                                doc.content[0].fontSize = 14;
                            }

                            // insert Export Date right below title
                            var exportDate = new Date().toLocaleDateString('en-GB'); // dd/mm/yyyy
                            doc.content.splice(1, 0, {
                                text: 'Export Date: ' + exportDate,
                                alignment: 'center',
                                margin: [0, 0, 0, 8],
                                fontSize: 10
                            });

                            // find the first content node that contains a table
                            var tableNodeIndex = -1;
                            for (var i = 0; i < doc.content.length; i++) {
                                if (doc.content[i] && doc.content[i].table) {
                                    tableNodeIndex = i;
                                    break;
                                }
                            }
                            if (tableNodeIndex === -1) return;

                            var tableNode = doc.content[tableNodeIndex];

                            // ensure style objects exist
                            doc.styles = doc.styles || {};
                            doc.styles.tableHeader = doc.styles.tableHeader || {};
                            doc.styles.tableBodyEven = doc.styles.tableBodyEven || {};
                            doc.styles.tableBodyOdd = doc.styles.tableBodyOdd || {};

                            // header style: dark background + white text + centered
                            doc.styles.tableHeader.alignment = 'center';
                            doc.styles.tableHeader.fillColor = '#212529';
                            doc.styles.tableHeader.color = '#ffffff';
                            doc.styles.tableHeader.bold = true;

                            // center body cells
                            doc.styles.tableBodyEven.alignment = 'center';
                            doc.styles.tableBodyOdd.alignment = 'center';

                            // borders & padding
                            tableNode.layout = {
                                hLineWidth: function (i, node) { return 0.5; },
                                vLineWidth: function (i, node) { return 0.5; },
                                hLineColor: function (i, node) { return '#dddddd'; },
                                vLineColor: function (i, node) { return '#dddddd'; },
                                paddingLeft: function (i, node) { return 6; },
                                paddingRight: function (i, node) { return 6; },
                                paddingTop: function (i, node) { return 4; },
                                paddingBottom: function (i, node) { return 4; }
                            };

                            // recompute Sr.No in the exported table body (exported column 0)
                            var body = tableNode.table && tableNode.table.body ? tableNode.table.body : null;
                            if (!body || !body.length) return;
                            for (var r = 1; r < body.length; r++) {
                                body[r][0] = { text: String(r), alignment: 'center' };
                            }
                        } catch (err) {
                            console.error('PDF customize error:', err);
                        }
                    }
                },

                // ----- EXCEL: same column exclusion and Sr.No handling -----
                {
                    extend: 'excelHtml5',
                    title: 'Purchase_Requisition_List',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    className: 'btn bg-muted btn-outline-dark border-2 fw-bold',
                    exportOptions: {
                        //columns: function (idx, data, node) { return idx !== 0; },
                        columns: [1, 2, 3, 4, 6, 7, 8, 9],
                        rows: function (idx, data, node) { return selectedPRCodes.length === 0 || selectedPRCodes.includes(data[2]); },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 0) return rowIdx + 1;
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) {
                            showExportToast();
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    },
                },

                // ----- CSV: same -----
                {
                    extend: 'csvHtml5',
                    title: 'Purchase_Requisition_List',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    className: 'btn bg-muted btn-outline-dark border-2 fw-bold',
                    exportOptions: {
                        columns: function (idx, data, node) { return idx !== 0; },
                        rows: function (idx, data, node) { return selectedPRCodes.length === 0 || selectedPRCodes.includes(data[2]); },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 0) return rowIdx + 1;
                                if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if ($('.rowCheckbox:checked').length === 0) {
                            showExportToast();
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    },
                },

                'colvis'
            ]
        });

        // fill serial number in column index 1 for the UI (visible table)
        table.on('order.dt search.dt draw.dt', function () {
            table.column(1, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                cell.innerHTML = i + 1;
                $(cell).css({ textAlign: 'center', verticalAlign: 'middle' });
            });
        }).draw();

        table.columns.adjust().draw();

        // custom date filter (PR Created Date column index 3)
        
        $.fn.dataTable.ext.search.push(function (settings, data) {
            var reqDateStr = data[3]; // PR Created column
            if (!reqDateStr) return true;

            var parts = reqDateStr.split("/"); // correct for dd/MM/yyyy
            if (parts.length !== 3) return true;

            var reqDate = new Date(parts[2], parts[1] - 1, parts[0]);
            reqDate.setHours(0, 0, 0, 0);

            var s = startDate ? new Date(startDate) : null;
            var e = endDate ? new Date(endDate) : null;
            if (s) s.setHours(0, 0, 0, 0);
            if (e) e.setHours(0, 0, 0, 0);

            if (s && reqDate < s) return false;
            if (e && reqDate > e) return false;
            return true;
        });

        // checkbox logic (select all + individual)
        $(document).on('change', '#selectAll', function () {
            var checked = this.checked;
            $('.rowCheckbox').prop('checked', checked);
            selectedPRCodes = checked ? $('.rowCheckbox').map(function () { return $(this).val(); }).get() : [];
        });
        $(document).on('change', '.rowCheckbox', function () {
            var val = $(this).val();
            if (this.checked) {
                if (!selectedPRCodes.includes(val)) selectedPRCodes.push(val);
            } else {
                selectedPRCodes = selectedPRCodes.filter(x => x !== val);
            }
            $('#selectAll').prop('checked', $('.rowCheckbox:checked').length === $('.rowCheckbox').length);
        });

        // ✅ Date range picker with predefined ranges and placeholder
        $('#dateRange').daterangepicker({
            autoUpdateInput: false, // keep placeholder until user picks something
            alwaysShowCalendars: false, // calendars show only on Custom Range
            locale: {
                cancelLabel: 'Clear',
                format: 'DD-MM-YYYY',
                applyLabel: 'Apply',
                customRangeLabel: 'Custom Range'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        }, function (start, end, label) {
            // Fires after a range is selected (predefined or custom)
            startDate = start.toDate();
            endDate = end.toDate();
            $('#dateRange').val(start.format('DD-MM-YYYY') + ' - ' + end.format('DD-MM-YYYY'));
            table.draw();
        });

        // ✅ Clear selection on cancel
        $('#dateRange').on('cancel.daterangepicker', function () {
            $(this).val('Select Date Range'); // restore placeholder
            startDate = null;
            endDate = null;
            table.draw();
        });

        // ✅ Set initial placeholder text
        $('#dateRange').val('Select Date Range');


        //function for buildchart
        function buildChart(data, totalPR) {
            var dataArray = [];
            for (var key in data) dataArray.push({ name: key, y: data[key] });

            statusChart = Highcharts.chart('statusPieChart', {
                chart: { type: 'pie' },
                title: { text: 'Converted vs Not Converted to RFQ' },
                subtitle: {
                    text: '<span style="font-size:32px; font-weight:bold;">Total PR: ' + totalPR + '</span>',
                    align: 'left', verticalAlign: 'top', x: 10, y: 20, useHTML: true
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.y}'
                        },
                        // ✅ add click event for filtering table
                        point: {
                            events: {
                                click: function () {
                                    // this.name will be "Converted" or "Not Converted"
                                    var filterValue = this.name === 'Converted' ? 'Yes' : 'No';
                                    // search the ConvertedToRFQ column (index 5) for Yes/No
                                    table.column(5).search(filterValue).draw();
                                }
                            }
                        }
                    }
                },
                series: [{
                    name: 'Count',
                    colorByPoint: true,
                    data: dataArray
                }]
            });
        }

        // 🟢 Double-click anywhere on the chart container to clear the filter
        $('#statusPieChart').on('dblclick', function () {
            // clear the search applied on ConvertedToRFQ column (index 5)
            table.column(5).search('').draw();
        });




        function updateChart() {
            var convCounts = { 'Yes': 0, 'No': 0 };
            table.rows({ filter: 'applied' }).every(function () {
                var converted = this.data()[5]; // Converted To RFQ at index 5 in your layout
                convCounts[converted] = (convCounts[converted] || 0) + 1;
            });
            var totalPR = table.rows({ filter: 'applied' }).count();
            var newData = [{ name: 'Converted', y: convCounts['Yes'] }, { name: 'Not Converted', y: convCounts['No'] }];
            if (statusChart) {
                statusChart.series[0].setData(newData, true);
                statusChart.setSubtitle({ text: '<span style="font-size:32px; font-weight:bold;">Total PR: ' + totalPR + '</span>', align: 'left', verticalAlign: 'top', x: 10, y: 20, useHTML: true });
            } else {
                buildChart({ 'Converted': convCounts['Yes'], 'Not Converted': convCounts['No'] }, totalPR);
            }
        }
        updateChart();
        table.on('draw', function () { updateChart(); });



        // ✅ Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            preventDuplicates: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            timeOut: "3000" // 3 seconds
        };

        // ✅ Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.", "Warning");
        }




        // click event for view items
        $(document).on('click', '.view-items', function () {
            var prCode = $(this).data('prcode');

            // clear previous table rows
            $('#prItemsTable tbody').empty();

            $.ajax({
                url: '/Purchase/GetPRItems',  // adjust controller name if needed
                type: 'GET',
                data: { prCode: prCode },
                success: function (data) {
                    if (data && data.length > 0) {
                        data.forEach(function (item, index) {
                            $('#prItemsTable tbody').append(
                                `<tr>
                <td class="text-center">${index + 1}</td>  <!-- 🆕 Serial number -->
                <td class="text-center">${item.PRCode}</td>
                <td class="text-center">${item.ItemName}</td>
                <td class="text-center">₹${item.UnitRates}</td>
                <td class="text-center">${item.RequiredQuantity}</td>
            </tr>`
                            );
                        });
                    }
 else {
                        $('#prItemsTable tbody').append(
                            `<tr><td colspan="4" class="text-center text-muted">No items found.</td></tr>`
                        );
                    }

                    // finally show the modal
                    $('#prItemsModal').modal('show');
                },
                error: function () {
                    toastr.error("Error fetching PR items", "Error");
                }
            });
        });



    });
</script>



