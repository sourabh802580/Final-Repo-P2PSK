@{
    ViewBag.Title = "Purchase OrdersVNK";
}
<html>
<head>
    <style>
        .modal-backdrop {
            display: none;
        }

        body.modal-open .main-content {
            position: relative;
        }

            body.modal-open .main-content::after {
                content: '';
                position: fixed;
                inset: 0;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: 1040;
                pointer-events: none;
            }

        .modal {
            z-index: 1055 !important;
        }

        #tblApproved thead th, #tblApproved tbody td {
            text-align: center !important;
            vertical-align: middle;
        }

        #tblApproved tbody td {
            font-size: 14px;
        }

        .badge-status {
            font-size: 12px;
            padding: 0.35em 0.5em;
            font-weight: 500;
        }

        .dt-toolbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 10px;
        }

        .dt-left {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
        }

        .dataTables_paginate {
            float: right !important;
        }

        .btn-square {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0;
            border-radius: 4px;
        }

        .btn-view {
            color: white;
            margin-left: 40px;
        }

            .btn-view:hover {
                background-color: darkviolet;
                border-color: darkviolet;
                color: white;
            }

        .dt-buttons .btn {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 38px;
            height: 38px;
            border-radius: 50%;
            padding: 0;
        }
    </style>

</head>

<body>
    <div class="main-content">
        <div class="container mt-4 shadow-sm rounded bg-white p-3">

            <!-- Nav Pills -->
            <ul class="nav nav-pills mb-3" id="poTabs" role="tablist">
                <li class="nav-item me-2">
                    <a class="nav-link active" id="pending-tab" data-bs-toggle="tab" href="#pending" role="tab">
                        <i class="bi bi-hourglass-split"></i> Pending Purchase Order
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="approved-tab" data-bs-toggle="tab" href="#approved" role="tab">
                        <i class="bi bi-check2-circle"></i> Approved Purchase Order
                    </a>
                </li>
            </ul>

            <!-- Tab Content (both panes must be inside this wrapper) -->
            <div class="tab-content mt-3">
                <!-- Pending pane -->
                <div class="tab-pane fade show active" id="pending" role="tabpanel">
                    <div id="pendingContainer"></div>
                </div>

                <!-- Approved pane -->
                <div class="tab-pane fade" id="approved" role="tabpanel">
                    <!-- Header -->
                    <div class="text-center mb-3">
                        <h2 class="text-primary fw-bold">Approved Purchase Order</h2>
                    </div>
                    <!-- Date Range Picker -->
                    <div class="mb-3">
                        <div class="input-group" style="max-width: 280px;">
                            <span class="input-group-text bg-primary text-white">
                                <i class="bi bi-calendar-date"></i>
                            </span>
                            <input type="text" id="Purchasedatepicker" class="form-control" placeholder="Select date range" readonly />
                        </div>
                    </div>

                    <!-- Table -->
                    <div class="table-responsive shadow-sm rounded">
                        <table id="tblApproved" class="table table-striped table-hover table-bordered align-middle">
                            <thead class="table-dark">
                                <tr class="text-center">
                                    <th><input type="checkbox" id="selectAll" /></th>
                                    <th>SR NO</th>
                                    <th>PO NO</th>
                                    <th>PO Date</th>
                                    <th>Approved Date</th>
                                    <th>Created By</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody class="text-center"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Single shared Modal (removed duplicate modals) -->
    <div class="modal fade" id="poModal" tabindex="-1">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white justify-content-center">
                    <h5 class="modal-title fw-bold mb-0 text-white">Purchase Order Details</h5>
                    <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="poModalBody"></div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="NewModal" tabindex="-1">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white justify-content-center">
                    <h5 class="modal-title fw-bold mb-0 text-white">Purchase Order Details</h5>
                    <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="NewModalBody">
                    <!-- Partial view content will load here -->
                </div>
            </div>
        </div>
    </div>




    <script>
        $(function () {
            let approvedTable;

            // Toastr config
            toastr.options = {
                closeButton: true, progressBar: true, newestOnTop: true,
                positionClass: "toast-top-right", preventDuplicates: true,
                timeOut: 3000, extendedTimeOut: 1000,
                showDuration: 300, hideDuration: 300,
                showMethod: "slideDown", hideMethod: "fadeOut"
            };

            function showToast(message, type = 'warning') {
                if (type === 'success') toastr.success(message);
                else if (type === 'error') toastr.error(message);
                else if (type === 'info') toastr.info(message);
                else toastr.warning(message);
            }

            // Export columns skip checkbox + Action
            function exportColumns(idx) { return idx !== 0 && idx !== 7; }

            function loadApprovedPOsVNK() {
                approvedTable = $('#tblApproved').DataTable({
                    dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>>',
                    buttons: [


                        // Print
                        {
                            extend: 'print',
                            title: '',
                            text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                            titleAttr: 'Print',
                            action: function (e, dt, button, config) {
                                if ($('#tblApproved .row-select:checked').length === 0) {
                                    showToast("Please select at least one PO to Print");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                            },
                            exportOptions: {
                                columns: exportColumns,
                                rows: (idx, d, node) => $(node).find('.row-select').prop('checked')
                            },
                            customize: function (win) {
                                const title = 'Purchase Orders';
                                const today = new Date();
                                const formattedDate = today.toLocaleDateString('en-GB');

                                // prepend title and generated date
                                $(win.document.body).prepend(`
                        <div style="text-align:center; margin-bottom:10px;">
                            <h2 style="margin:0;">${title}</h2>
                            <div style="font-size:12px;">Generated on: ${formattedDate}</div>
                        </div>
                    `);

                                // Inject custom print styling
                                $(win.document.body).append(`
                        <style>
                            thead th {
                                background-color: black !important;
                                color: white !important;
                                text-align: center !important;
                                -webkit-print-color-adjust: exact !important;
                                print-color-adjust: exact !important;
                            }
                            table {
                                border-collapse: collapse !important;
                                width: 100% !important;
                            }
                            td, th {
                                border: 1px solid #000 !important;
                                padding: 6px !important;
                            }
                        </style>
                    `);

                                // Apply Bootstrap table classes and font size
                                $(win.document.body).find('table')
                                    .addClass('table table-bordered table-striped')
                                    .css('width', '100%')
                                    .css('font-size', '14px');

                                // Re-number SRNO column
                                $(win.document.body).find('table tbody tr').each(function (i) {
                                    $(this).find('td:first').text(i + 1);
                                });
                            }
                        }

                        ,
                        // PDF
                        {
                            extend: 'pdfHtml5', title: 'Purchase Orders',
                            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>', titleAttr: 'Export PDF',
                            action: function (e, dt, button, config) {
                                if ($('#tblApproved .row-select:checked').length === 0) { showToast("Please select at least one PO to export PDF"); return; }
                                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                            },
                            exportOptions: {
                                columns: exportColumns,
                                rows: (idx, d, node) => $(node).find('.row-select').prop('checked'),
                                format: { body: (data, row, col) => typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data }
                            },
                            customize: function (doc) {
                                doc.content[0].alignment = 'center'; doc.content[0].fontSize = 14;
                                doc.content.splice(1, 0, { text: 'Export Date: ' + new Date().toLocaleDateString('en-GB'), alignment: 'center', margin: [0, 0, 0, 8], fontSize: 10 });
                                var tableNode = doc.content.find(c => c.table); if (!tableNode) return;
                                doc.styles.tableHeader = { alignment: 'center', fillColor: '#212529', color: '#ffffff', bold: true };
                                tableNode.table.body.forEach((row, i) => { if (i > 0) row[0] = { text: String(i), alignment: 'center' }; });
                                tableNode.layout = { paddingLeft: () => 30, paddingRight: () => 6 };
                            }
                        },

                        //Excel
                        {
                            extend: 'excelHtml5',
                            title: '',
                            filename: 'Approved Purchase Orders',
                            text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                            titleAttr: 'Export Excel',
                            action: function (e, dt, button, config) {
                                if ($('#tblApproved .row-select:checked').length === 0) {
                                    showToast("Please select at least one PO to export Excel");
                                    return;
                                }
                                window.__excelSrCounter = 0;
                                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                            },
                            exportOptions: {
                                columns: exportColumns,
                                rows: (idx, d, node) => $(node).find('.row-select').prop('checked'),
                                format: {
                                    body: function (data, rowIdx, colIdx, node) {
                                        if (colIdx === 1) return ++window.__excelSrCounter;
                                        return typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data;
                                    }
                                }
                            },
                            customize: function (xlsx) {
                                var sheet = xlsx.xl.worksheets['sheet1.xml'];
                                const today = new Date();
                                const dateStr = today.toLocaleDateString('en-GB');

                                $(sheet).find('row').each(function () {
                                    var r = parseInt($(this).attr('r'));
                                    $(this).attr('r', r + 2);
                                    $(this).find('c').each(function () {
                                        var cellRef = $(this).attr('r');
                                        var col = cellRef.replace(/\d+/g, '');
                                        var row = parseInt(cellRef.replace(/\D/g, '')) + 2;
                                        $(this).attr('r', col + row);
                                    });
                                });

                                var titleRow = `<row r="1">
                        <c t="inlineStr" r="A1">
                            <is><t>Approved Purchase Orders</t></is>
                        </c>
                    </row>`;

                                var dateRow = `<row r="2">
                        <c t="inlineStr" r="A2">
                            <is><t>Export Date: ${dateStr}</t></is>
                        </c>
                    </row>`;

                                sheet.childNodes[0].childNodes[1].innerHTML = titleRow + dateRow + sheet.childNodes[0].childNodes[1].innerHTML;
                            }
                        }

                        ,

                        // CSV
                        {
                            extend: 'csvHtml5',
                            text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                            titleAttr: 'Export CSV',
                            title: '',
                            filename: function () { return 'PurchaseOrders_' + new Date().toISOString().slice(0, 10).replace(/-/g, ""); },
                            action: function (e, dt, button, config) {
                                if ($('#tblApproved .row-select:checked').length === 0) { showToast("Please select at least one row to export CSV"); return; }
                                window.__srnoCounter = 0;
                                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false);
                            },
                            exportOptions: {
                                rows: function (idx, data, node) { return $(node).find('.row-select').prop('checked'); },
                                columns: exportColumns,
                                format: {
                                    body: function (data, row, column, node) {
                                        data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;
                                        if (column === 1) return ++window.__srnoCounter;
                                        return data;
                                    }
                                }
                            },
                            customize: function (csv) {
                                const today = new Date();
                                const dateStr = today.toLocaleDateString('en-GB');
                                const header = `"Purchase Orders"\n"Export Date: ${dateStr}"\n`;
                                return header + csv;
                            }
                        }

                    ],
                    initComplete: function () {
                        $('#tblApproved_filter input').addClass("form-control").attr("placeholder", "Search...").css("height", "40px");
                    },
                    processing: true, serverSide: false,
                    ajax: { url: '/Purchase/GetApprovedPOsVNK', dataSrc: '' },
                    columns: [
                        { data: null, orderable: false, className: 'text-center', render: (d, t, r) => `<input type="checkbox" class="row-select" value="${r.POCode}"/>` },
                        { data: null, orderable: false, className: 'text-center', render: (d, t, r, meta) => meta.row + 1 },
                        { data: 'POCode', className: 'text-center' },
                        {
                            data: 'AddedDateVK',
                            defaultContent: '',
                            className: 'text-center',
                            render: d => d ? moment(d).format('DD/MM/YYYY') : ''
                        },
                        {
                            data: 'ApprovedRejectedDateVK',
                            defaultContent: '',
                            className: 'text-center',
                            render: d => d ? moment(d).format('DD/MM/YYYY') : ''
                        },
                        { data: 'CreatedBy', defaultContent: '', className: 'text-center' },
                        { data: 'StatusName', className: 'text-center', render: d => `<span class="badge badge-status ${d === 'Active' ? 'bg-success' : d === 'Inactive' ? 'bg-danger' : 'bg-success'}">${d || 'Unknown'}</span>` },
                        {
                            data: 'POCode', orderable: false, className: 'text-center', render: d => ` <button id="btnview" class="btn btn-sm btn-square btn-view btn-primary" data-pocode="${d}" type="button" title="View">
                    <i class="bi bi-eye-fill"></i>
                </button>

`
                        }
                    ]
                });
            }

            // Load approved datatable when tab shown (only once)
            $('#approved-tab').on('shown.bs.tab', function () {
                if (!$.fn.DataTable.isDataTable('#tblApproved')) loadApprovedPOsVNK();
            });

            // Select All for Approved
            $(document).on("change", "#selectAll", function () {
                $(".row-select").prop("checked", this.checked);
            });
            $(document).on("change", ".row-select", function () {
                $("#selectAll").prop("checked", $(".row-select:checked").length === $(".row-select").length);
            });


            $(document).off('click', '#tblApproved .btn-view').on('click', '#tblApproved .btn-view', function () {
                //alert("clicked")
                $("#NewModalBody").empty();
                $("#poModalBody").empty();
                const POCode = $(this).data('pocode');
                $("#NewModalBody").html("<div class='text-center p-3 small'>Loading...</div>");
                $.get("/Purchase/ViewPurchaseOrderVNK", { POCode }, function (html) {
                    $("#NewModalBody").html(html);
                    $("#NewModal").modal('show');
                });
            });






            // Date filter for approved
            $(document).on('focus', '#Purchasedatepicker', function () {
                if (!$(this).data('daterangepicker')) {
                    $(this).daterangepicker({
                        autoUpdateInput: false, opens: "center", drops: "down", alwaysShowCalendars: true,
                        locale: { cancelLabel: 'Clear' },
                        ranges: {
                            'Today': [moment(), moment()],
                            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                            'This Month': [moment().startOf('month'), moment().endOf('month')],
                            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                        }
                    }, function (start, end) {
                        $('#Purchasedatepicker').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
                        $.fn.dataTable.ext.search.push(function (settings, data) {
                            if (settings.nTable.id !== 'tblApproved') return true;
                            const addedDate = moment(data[3], 'DD/MM/YYYY');
                            return addedDate.isBetween(start, end, undefined, '[]');
                        });
                        if (approvedTable) approvedTable.draw();
                        $.fn.dataTable.ext.search.pop();
                    });

                    $('#Purchasedatepicker').on('cancel.daterangepicker', function () {
                        $(this).val(''); if (approvedTable) approvedTable.draw();
                    });
                }
            });

            // --- PENDING: Load partial and initialize its DataTable AFTER load ---
            function initializePendingPOs() {

                if ($.fn.DataTable.isDataTable('#tblPending')) {
                    $('#tblPending').DataTable().destroy();
                    $('#tblPending tbody').empty();
                }

                const pendingTable = $('#tblPending').DataTable({
                    dom: '<"d-flex justify-content-between mb-2 flex-wrap align-items-center"<"dt-buttons"B><"dt-search"f>>rt<"d-flex justify-content-between align-items-center mt-2"ip>', buttons: [

                        // Print
                        {
                            extend: 'print',
                            title: '',
                            text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                            titleAttr: 'Print',
                            action: function (e, dt, button, config) {
                                if ($('#tblPending .row-select:checked').length === 0) {
                                    showToast("Please select at least one PO to Print");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                            },
                            exportOptions: {
                                columns: exportColumns,
                                rows: (idx, d, node) => $(node).find('.row-select').prop('checked')
                            },
                            customize: function (win) {
                                const title = 'Purchase Orders';
                                const today = new Date();
                                const formattedDate = today.toLocaleDateString('en-GB');

                                $(win.document.body).prepend(`
    <div style="text-align:center; margin-bottom:10px;">
        <h2 style="margin:0;">${title}</h2>
        <div style="font-size:12px;">Generated on: ${formattedDate}</div>
    </div>
`);

                                $(win.document.body).append(`
    <style>
        thead th {
            background-color: black !important;
            color: white !important;
            text-align: center !important;
            -webkit-print-color-adjust: exact !important;
            print-color-adjust: exact !important;
        }
        table {
            border-collapse: collapse !important;
            width: 100% !important;
        }
        td, th {
            border: 1px solid #000 !important;
            padding: 6px !important;
        }
    </style>
`);

                                $(win.document.body).find('table')
                                    .addClass('table table-bordered table-striped')
                                    .css('width', '100%')
                                    .css('font-size', '14px');

                                $(win.document.body).find('table tbody tr').each(function (i) {
                                    $(this).find('td:first').text(i + 1);
                                });
                            }
                        },
                        // PDF, Excel, CSV (unchanged)
                        {
                            extend: 'pdfHtml5', title: 'Purchase Orders',
                            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>', titleAttr: 'Export PDF',
                            action: function (e, dt, button, config) {
                                if ($('#tblPending .row-select:checked').length === 0) { showToast("Please select at least one PO to export PDF"); return; }
                                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                            },
                            exportOptions: {
                                columns: exportColumns,
                                rows: (idx, d, node) => $(node).find('.row-select').prop('checked'),
                                format: { body: (data, row, col) => typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data }
                            },
                            customize: function (doc) {
                                doc.content[0].alignment = 'center'; doc.content[0].fontSize = 14;
                                doc.content.splice(1, 0, { text: 'Export Date: ' + new Date().toLocaleDateString('en-GB'), alignment: 'center', margin: [0, 0, 0, 8], fontSize: 10 });
                                var tableNode = doc.content.find(c => c.table); if (!tableNode) return;
                                doc.styles.tableHeader = { alignment: 'center', fillColor: '#212529', color: '#ffffff', bold: true };
                                tableNode.table.body.forEach((row, i) => { if (i > 0) row[0] = { text: String(i), alignment: 'center' }; });
                                tableNode.layout = { paddingLeft: () => 30, paddingRight: () => 6 };
                            }
                        },
                        {
                            extend: 'excelHtml5',
                            title: '',
                            filename: 'pending Purchase Orders',
                            text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                            titleAttr: 'Export Excel',
                            action: function (e, dt, button, config) {
                                if ($('#tblPending .row-select:checked').length === 0) {
                                    showToast("Please select at least one PO to export Excel");
                                    return;
                                }
                                window.__excelSrCounter = 0;
                                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                            },
                            exportOptions: {
                                columns: exportColumns,
                                rows: (idx, d, node) => $(node).find('.row-select').prop('checked'),
                                format: {
                                    body: function (data, rowIdx, colIdx, node) {
                                        if (colIdx === 1) return ++window.__excelSrCounter;
                                        return typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data;
                                    }
                                }
                            }
                        },
                        {
                            extend: 'csvHtml5',
                            text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                            titleAttr: 'Export CSV',
                            title: '',
                            filename: function () { return 'PurchaseOrders_' + new Date().toISOString().slice(0, 10).replace(/-/g, ""); },
                            action: function (e, dt, button, config) {
                                if ($('#tblPending .row-select:checked').length === 0) { showToast("Please select at least one row to export CSV"); return; }
                                window.__srnoCounter = 0;
                                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false);
                            },
                            exportOptions: {
                                rows: function (idx, data, node) { return $(node).find('.row-select').prop('checked'); },
                                columns: exportColumns,
                                format: {
                                    body: function (data, row, column, node) {
                                        data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;
                                        if (column === 1) return ++window.__srnoCounter;
                                        return data;
                                    }
                                }
                            }
                        }

                    ], initComplete: function () {
                        $('#tblPending_filter input').addClass("form-control").attr("placeholder", "Search...").css("height", "40px");
                        if ($('#pendingDateFilterContainer').length === 0) {
                            $('<div id="pendingDateFilterContainer" class="mb-2"></div>').prependTo($('#tblPending_wrapper .dt-left').length ? '#tblPending_wrapper .dt-left' : '#tblPending_wrapper');
                            $('#pendingDateFilterContainer').html(`
                                    <div class="input-group" style="height: 40px; max-width: 280px;">
                                        <span class="input-group-text bg-primary text-white"><i class="bi bi-calendar-date"></i></span>
                                        <input type="text" id="PendingDatepicker" class="form-control" placeholder="Select date range" readonly />
                                    </div>
                                `);
                        }
                    },
                    ajax: { url: '/Purchase/GetPendingPOsNAM', dataSrc: '' },
                    columns: [
                        { data: null, orderable: false, className: 'text-center', render: (d, t, r) => `<input type="checkbox" class="row-select" value="${r.POCode}"/>` },
                        { data: null, orderable: false, className: 'text-center', render: (d, t, r, meta) => meta.row + 1 },
                        { data: 'POCode' },
                        {
                            data: 'PODateVK', defaultContent: '', className: 'text-center',
                            render: d => d ? moment(d).format('DD/MM/YYYY') : ''
                        },
                        { data: 'POCost', defaultContent: '' },
                        { data: 'CreatedBy', defaultContent: '' },
                        { data: 'StatusName', render: d => `<span class="badge badge-pending">${d || 'Pending'}</span>` },
                        {
                            data: 'POCode', orderable: false, className: 'text-center', render: d => `
                                    <button class="btn btn-sm btn-success btn-approve" data-pocode="${d}">Approve</button>
                                    <button class="btn btn-sm btn-view" data-pocode="${d}" title="View"><i class="bi bi-eye-fill"></i></button>`
                        }
                    ]
                });

                // delegated handlers for elements inside pending table
                $(document).off('change', '#selectAllPending').on('change', '#selectAllPending', function () {
                    $('#tblPending .row-select').prop('checked', this.checked);
                });

                // view details (delegate)
                $(document).off('click', '#tblPending .btn-view').on('click', '#tblPending .btn-view', function () {
                    //alert("clicked")
                    $("#NewModalBody").empty();
                    $("#POModalBody").empty();
                    const poCode = $(this).data('pocode');
                    $("#poModalBody").html("<div class='text-center p-3 small'>Loading...</div>");
                    $.get("/Purchase/ViewPendingPoDetailsNAM", { poCode }, function (html) {
                        $("#poModalBody").html(html);
                        $("#poModal").modal('show');
                    });
                });





                // approve
                $(document).off('click', '#tblPending .btn-approve').on('click', '#tblPending .btn-approve', function () {
                    const poCode = $(this).data('pocode');
                    Swal.fire({
                        title: 'Are you sure?',
                        text: "Do you want to approve PO " + poCode + "?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, approve it!',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.get('/Purchase/ApprovePONAM', { poCode: poCode }, function (res) {
                                if (res.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'PO ' + poCode + ' is approved successfully',
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                    $('#poModal').modal('hide');
                                    $('#tblPending').DataTable().ajax.reload();
                                } else {
                                    Swal.fire('Error!', 'Failed to approve PO.', 'error');
                                }
                            });
                        }
                    });
                });
                // Pending: date filter initialization (delegated to focus event)
                $(document).off('focus', '#PendingDatepicker').on('focus', '#PendingDatepicker', function () {
                    const $this = $(this);
                    if (!$this.data('daterangepicker')) {
                        $this.daterangepicker({
                            autoUpdateInput: false,
                            opens: "center",
                            drops: "down",
                            alwaysShowCalendars: true,
                            locale: { cancelLabel: 'Clear' },
                            ranges: {
                                'Today': [moment(), moment()],
                                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                                'This Month': [moment().startOf('month'), moment().endOf('month')],
                                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                            }
                        }, function (start, end) {
                            $this.val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));
                            $.fn.dataTable.ext.search.push(function (settings, data) {
                                if (settings.nTable.id !== 'tblPending') return true;
                                const poDate = moment(data[3], 'YYYY-MM-DD');
                                return poDate.isBetween(start, end, undefined, '[]');
                            });
                            $('#tblPending').DataTable().draw();
                            $.fn.dataTable.ext.search.pop();
                        });

                        $this.on('cancel.daterangepicker', function () { $this.val(''); $('#tblPending').DataTable().draw(); });
                    }
                });
            }

            // First load pending partial, then initialize
            function loadPendingPartialAndInit() {
                $("#pendingContainer").load('/Purchase/PendingPOsPartialNAM', function (response, status, xhr) {
                    if (status === "success") {
                        initializePendingPOs();
                    } else {
                        console.error("Failed to load pending partial:", status);
                        $("#pendingContainer").html("<div class='alert alert-danger'>Failed to load pending records.</div>");
                    }
                });
            }



            // initial load on page load
            loadPendingPartialAndInit();

            // Force refresh of pending table after load
            $(document).ready(function () {
                setTimeout(function () {
                    if ($.fn.DataTable.isDataTable('#tblPending')) {
                        $('#tblPending').DataTable().ajax.reload();
                    }
                }, 500);
            });


        });
    </script>
</body>



</html>