@{
    ViewBag.Title = "SelectedQuotationListShowOK";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Show Selected Quotation For PO Creation</title>
    <style>
        /* Keep readonly fields visible (not greyed) */
        input[readonly],
        textarea[readonly] {
            background-color: #fff !important;
            opacity: 1 !important;
            cursor: default;
        }
       
        .btn-sm {
            border-radius: 6px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        .table td .btn {
            min-width: 80px; /* ensures both buttons have equal width */
        }
        .daterangepicker-container {
            border: 1px solid #ccc;
            padding: 6px 10px;
            border-radius: 6px;
            cursor: pointer;
            display: inline-block;
            min-width: 200px;
            background: #fff;
        }

        #exportContainer .dt-buttons {
            display: flex;
            justify-content: end; /* center align */
            gap: 8px;
/*            margin-left:-10px;*/
        }
        .table-container {
            overflow-x: auto; /* horizontal scroll if needed */
            width: 100%; /* fit parent container */
        }

        table.dataTable {
            width: 100% !important;
            table-layout: auto; /* auto column adjustment */
            border-radius: 6px;
            overflow: hidden; /* rounded corners work */
        }

            /* Header styling */
            table.dataTable thead th {
                white-space: nowrap; /* keep header in one line */
                text-align: center; /* center text */
                vertical-align: middle;
                font-weight: 600;
                padding: 12px 10px;
            }

        /* Select All checkbox alignment */
        #tblSelectedQuotationlst thead th:first-child,
        #tblPOHistory thead th:first-child {
            text-align: left;
            vertical-align: middle;
        }

            #tblSelectedQuotationlst thead th:first-child input,
            #tblPOHistory thead th:first-child input {
                margin-right: 6px;
            }
        #searchContainer {
            margin-top: 70px!important;
        }
        .dt-length select label{
            display:none;
        }
        .dt-paging nav {
            float: right !important;
        }
        div .dt-length{
            display:none;
        }
        .expbtndate {
            margin-left: -10px;
        }
    </style>
</head>
<body>
        <!-- Toast container somewhere fixed, e.g. top right -->
        <div id="toastContainer"
             class="toast-container position-fixed top-0 end-0 p-3"
             style="z-index: 2000;">
        </div>
        <div class="container-fluid">
            <div class="card shadow-lg mb-4 ps-3 pe-3">
                <h3 class="text-primary d-flex justify-content-center text-center mt-2">
                    Selected Quotation List
                </h3>

                <div class="d-flex justify-content-between align-items-start mb-5 flex-wrap ps-3 pe-3">
                    <!-- Left side: Date Picker (top) + Export Buttons (bottom) -->
                    <div class="d-flex flex-column gap-3 expbtndate">
                        <!-- Date Range Picker -->
                        <div class="input-group shadow-sm rounded" style="min-width: 250px; height: 53px;">
                            <span class="input-group-text bg-primary text-white border-0">
                                <i class="bi bi-calendar-date"></i>
                            </span>
                            <input type="text" id="Selectedquotationdate"
                                   class="form-control border-0 shadow-none"
                                   placeholder="Select date range" readonly style="height: 100%;" />
                        </div>

                        <!-- Export Buttons -->
                        <div id="exportContainer" class="d-flex align-items-center gap-2"></div>
                    </div>

                    <!-- Right side: Search Box -->
                    <div id="searchContainer"></div>
                </div>

                <!-- Quotation Table -->
                <div class="table-container mt-0">
                    <table class="table table-striped table-bordered text-center align-middle" id="tblSelectedQuotationlst">
                        <thead class="table-dark text-center align-middle">
                            <tr>
                                <th>
                                    <div class="d-flex align-items-center justify-content-center">
                                        <input type="checkbox" id="selectAllQuotation" class="me-1">
                                        @*<label for="selectAllQuotation" class="m-0">Select All</label>*@
                                    </div>
                                </th>
                                <th>SRNO</th>
                                <th>Quotation ID</th>
                                <th>Quotation Date</th>
                                <th>Vendor Name</th>
                                <th class="d-none">Company Name</th>
                                <th>Total Amount</th>
                                <th class="d-none">RFQ Code</th>
                                <th class="d-none">Vendor Code</th>
                                <th class="d-none">Required Date</th>
                                <th class="d-none">Delivery Date</th>
                                <th class="d-none">Shipping Charges</th>
                                <th class="d-none">Priority</th>
                                <th class="d-none">GST</th>
                                <th class="d-none">SubAmount</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            @*Show Quotation Details Model*@
            <div class="modal fade" id="largeModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-xl modal-dialog-scrollable">
                    <div class="modal-content">
                        @*Header*@
                        <div class="modal-header bg-primary text-white">
                            <h5 class="modal-title ms-auto text-white d-flex justify-content-center align-content-center text-center">Approved Supplier Quotation Details</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                        </div>
                        @*Body*@
                        <div class="modal-body">
                            <form class="row g-3">
                                @*Quotation ID & Date*@
                                <div class="col-md-6">
                                    <div class="input-group input-group-merge mb-3">
                                        <span class="input-group-text"><i class="ri-hashtag"></i></span>
                                        <div class="form-floating form-floating-outline flex-grow-1">
                                            <input type="text" id="quotationIdLarge" class="form-control" readonly>
                                            <label for="quotationIdLarge">Quotation ID</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="input-group input-group-merge mb-3">
                                        <span class="input-group-text"><i class="ri-calendar-line"></i></span>
                                        <div class="form-floating form-floating-outline flex-grow-1">
                                            <input type="text" id="quotationDateLarge" class="form-control" readonly>
                                            <label for="quotationDateLarge">Quotation Date</label>
                                        </div>
                                    </div>
                                </div>
                                @*Vendor Name & RFQ Code*@
                                <div class="col-md-6">
                                    <div class="input-group input-group-merge mb-3">
                                        <span class="input-group-text"><i class="ri-user-3-line"></i></span>
                                        <div class="form-floating form-floating-outline flex-grow-1">
                                            <input type="text" id="vendorNameLarge" class="form-control" readonly>
                                            <label for="vendorNameLarge">Vendor Name</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="input-group input-group-merge mb-3">
                                        <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                                        <div class="form-floating form-floating-outline flex-grow-1">
                                            <input type="text" id="rfqCodeLarge" class="form-control" readonly>
                                            <label for="rfqCodeLarge">RFQ Code</label>
                                        </div>
                                    </div>
                                </div>
                                @*Company Name & Vendor Code*@
                                <div class="col-md-6">
                                    <div class="input-group input-group-merge mb-3">
                                        <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                                        <div class="form-floating form-floating-outline flex-grow-1">
                                            <input type="text" id="companyName" class="form-control" readonly>
                                            <label for="companyName">Company Name</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="input-group input-group-merge mb-3">
                                        <span class="input-group-text"><i class="ri-code-s-slash-line"></i></span>
                                        <div class="form-floating form-floating-outline flex-grow-1">
                                            <input type="text" id="vendorCodeLarge" class="form-control" readonly>
                                            <label for="vendorCodeLarge">Vendor Code</label>
                                        </div>
                                    </div>
                                </div>
                                @*Required Date & Delivery Date*@
                                <div class="col-md-6">
                                    <div class="input-group input-group-merge mb-3">
                                        <span class="input-group-text"><i class="ri-calendar-check-line"></i></span>
                                        <div class="form-floating form-floating-outline flex-grow-1">
                                            <input type="text" id="requireddate" class="form-control" readonly>
                                            <label for="requireddate">Required Date</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="input-group input-group-merge mb-3">
                                        <span class="input-group-text"><i class="ri-truck-line"></i></span>
                                        <div class="form-floating form-floating-outline flex-grow-1">
                                            <input type="text" id="vendordeliverydate" class="form-control" readonly>
                                            <label for="vendordeliverydate">Vendor Delivery Date</label>
                                        </div>
                                    </div>
                                </div>
                                @*Priority*@
                                <div class="col-md-6">
                                    <div class="input-group input-group-merge mb-3">
                                        <span class="input-group-text"><i class="ri-star-line"></i></span>
                                        <div class="form-floating form-floating-outline flex-grow-1">
                                            <input type="text" id="priority" class="form-control" readonly>
                                            <label for="priority">Priority</label>
                                        </div>
                                    </div>
                                </div>
                            </form>
                            @*Quotation Items Table*@
                            <div class="table-responsive mt-4">
                                <table class="table table-striped table-bordered text-center align-middle" id="tblQuotationItems">
                                    <thead class="table-dark text-center align-middle">
                                        <tr>
                                            <th>SRNO</th>
                                            <th class="d-none">RegisterQuotationCode</th>
                                            <th>Item Code</th>
                                            <th>Item Name</th>
                                            <th>Description</th>
                                            <th>Quantity</th>
                                            <th>UOM</th>
                                            <th>CostPerUnit</th>
                                            <th>Discount</th>
                                            <th>GST</th>
                                            <th>Amount</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                    <tfoot>
                                        <tr>
                                            <td colspan="9" class="text-end fw-bold">Sub Total</td>
                                            <td colspan="2" class="text-center" id="subAmount"></td>
                                        </tr>
                                        <tr>
                                            <td colspan="9" class="text-end fw-bold">Transportation Charges</td>
                                            <td colspan="2" class="text-center" id="shippingLarge"></td>
                                        </tr>
                                        <tr class="table-secondary">
                                            <td colspan="9" class="text-end fw-bold">TotalAmount</td>
                                            <td colspan="2" class="text-center" id="TotalAmount" name="TotalAmount"></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                        @*Footer*@
                        <div class="modal-footer justify-content-end">
                            <button type="button" class="btn btn-sm btn-success d-inline-flex align-items-center text-nowrap" onclick="OpenPOView()"> <i class="bi bi-plus-circle me-1"></i> Create PO</button>
                            @*<button type="button" class="btn btn-danger" data-bs-dismiss="modal"><i class="ri-arrow-go-back-line me-1"></i> Back</button>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>

    @*modal end*@
    <script>
    $(document).ready(function () {
        var QuotationTable;
        let tblQuotationItems;

        // Clear processing state for all DataTable buttons
        window.__dt_clearAllProcessing = function () {
            try {
                // Try to clear via DataTables API
                var tables = $.fn.dataTable.tables();
                for (var i = 0; i < tables.length; i++) {
                    try {
                        var api = $(tables[i]).DataTable();
                        if (!api || !api.buttons) continue;
                        var btnCount = (api.buttons().nodes && api.buttons().nodes().length) || 0;
                        for (var j = 0; j < btnCount; j++) {
                            try { api.button(j).processing(false); } catch (e) { }
                        }
                    } catch (e) { }
                }
            } catch (e) { }

            // Fallback DOM cleanup
            try {
                $('.dt-button').removeClass('dt-button-processing');
                $('.dt-button').prop('disabled', false);
            } catch (e) { }
        };

        // Listen for print-done message from print window
        window.addEventListener('message', function (ev) {
            if (ev && ev.data === 'dt_print_done') {
                window.__dt_clearAllProcessing();
            }
        });

        // Store original button actions if not already stored
        if (!$.fn.dataTable.ext.buttons.pdfHtml5.__originalAction) {
            $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction =
                $.fn.dataTable.ext.buttons.pdfHtml5.action;
        }
        if (!$.fn.dataTable.ext.buttons.print.__originalAction) {
            $.fn.dataTable.ext.buttons.print.__originalAction =
                $.fn.dataTable.ext.buttons.print.action;
        }
        if (!$.fn.dataTable.ext.buttons.excelHtml5.__originalAction) {
            $.fn.dataTable.ext.buttons.excelHtml5.__originalAction =
                $.fn.dataTable.ext.buttons.excelHtml5.action;
        }
        if (!$.fn.dataTable.ext.buttons.csvHtml5.__originalAction) {
            $.fn.dataTable.ext.buttons.csvHtml5.__originalAction =
                $.fn.dataTable.ext.buttons.csvHtml5.action;
        }

        // Reusable PDF/Print customization function
        function customizeDoc(doc) {
            // Title Styling
            doc.styles.title = {
                color: '#000000',
                fontSize: 16,
                bold: true,
                alignment: 'center'
            };

            // Generated on date
            doc.content.splice(1, 0, {
                text: 'Generated on: ' + new Date().toISOString().split('T')[0],
                fontSize: 10,
                italics: true,
                alignment: 'center',
                margin: [0, 0, 0, 12]
            });

            // Table Header Styling
            doc.styles.tableHeader = {
                fillColor: '#000000',
                color: 'white',
                bold: true,
                fontSize: 11,
                alignment: 'center'
            };

            // Table Border + Padding
            var objLayout = {};
            objLayout['hLineWidth'] = function () { return .5; };
            objLayout['vLineWidth'] = function () { return .5; };
            objLayout['hLineColor'] = function () { return '#aaa'; };
            objLayout['vLineColor'] = function () { return '#aaa'; };
            objLayout['paddingLeft'] = function () { return 6; };
            objLayout['paddingRight'] = function () { return 6; };

            // Get the table
            var tableNode = doc.content[doc.content.length - 1];
            tableNode.layout = objLayout;

            // Set fixed widths for all columns
            var colCount = tableNode.table.body[0].length;
            tableNode.table.widths = Array(colCount).fill('*');

            // Wrap in margin to simulate center alignment
            tableNode.alignment = 'center';
            tableNode.margin = [0, 0, 0, 0];
        }

        // Toast notification configuration
        toastr.options = {
            closeButton: true,
            progressBar: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            preventDuplicates: true,
            timeOut: 3000,
            extendedTimeOut: 1000,
            showDuration: 300,
            hideDuration: 300,
            showMethod: "slideDown",
            hideMethod: "fadeOut"
        };

        // Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.", "Warning");
        }

        // Initialize Quotation DataTable
        QuotationTable = $('#tblSelectedQuotationlst').DataTable({
            ajax: {
                url: '@Url.Action("ReciveQuotationListOK", "Purchase")',
                type: "GET",
                dataSrc: function (json) {
                    console.log("Selected Quotation For PO JSON:", json);
                    return json.data;
                },
                error: function (xhr, error, thrown) {
                    console.error("Vendor AJAX Error:", error, thrown, xhr.responseText);
                    alert("Failed to load quotations. Check console for details.");
                }
            },
            columns: [
                {
                    data: null,
                    orderable: false,
                    className: 'select-checkbox',
                    render: function (data, type, row) {
                        return `<input type="checkbox" class="row-select" value="${row.QuotationID}" />`;
                    }
                },
                { data: "SRNO", title: "Sr.No" },
                { data: "QuotationID", title: "Quotation ID" },
                {
                    data: "QuotationDateString", title: "Quotation Date",
                    "render": function (data) {
                        if (!data) return "";

                        // .NET JSON format: /Date(1736985600000)/
                        var match = /Date\((\d+)\)/.exec(data);
                        if (match) {
                            var dt = new Date(parseInt(match[1], 10));
                            return dt.toLocaleDateString("en-GB"); // dd/mm/yyyy
                        }

                        // Agar normal ISO string hai to
                        var dt2 = new Date(data);
                        if (!isNaN(dt2.getTime())) {
                            return dt2.toLocaleDateString("en-GB");
                        }

                        return data; // fallback
                    }
                },
                { data: "VendorName", title: "Vendor Name" },
                { data: "CompanyName", title: "Company Name", "visible": false },
                {
                    data: "TotalAmount",
                    title: "Total Amount",
                    render: function (data, type, row) {
                        if (type === 'display' || type === 'filter') {
                            // Add ₹ symbol for display
                            return '₹' + parseFloat(data).toFixed(2);
                        }
                        // For ordering and other operations, return the raw numeric value
                        return data;
                    }
                },
                { data: "RFQCode", "visible": false },
                { data: "VendorCode", "visible": false },
                { data: "RequiredDateString", "visible": false },
                { data: "VendorDeliveryDateString", "visible": false },
                { data: "ShippingCharges", "visible": false },
                { data: "Priority", "visible": false },
                { data: "GST", "visible": false },
                { data: "SubAmount", "visible": false },
                {
                    data: "QuotationID",
                    orderable: false,
                    render: function (data, type, row) {
                        return `
                            <div class="d-flex gap-2">
                                <button
                                    onclick="OpenPOView('${data}')"
                                    class="btn btn-sm btn-success d-inline-flex align-items-center text-nowrap"
                                    title="Create PO"
                                    data-bs-toggle="tooltip"
                                    data-bs-placement="top">
                                    <i class="bi bi-plus-circle me-1"></i>
                                </button>
                                <button
                                    class="btn btn-sm btn-info btn-view"
                                    data-row='${JSON.stringify(row)}'
                                    title="View"
                                    data-bs-toggle="tooltip"
                                    data-bs-placement="top">
                                    <i class="bi bi-eye me-1"></i>
                                </button>
                            </div>`;
                    }
                }
            ],
            drawCallback: function () {
                // Initialize tooltips for all dynamically created elements after every table draw
                const tooltipTriggerList = [].slice.call(
                    document.querySelectorAll('[data-bs-toggle="tooltip"]')
                );
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl, {
                        customClass: 'tooltip-dark'
                    });
                });
            },
            paging: true,
            searching: true,
            lengthChange: false,
            pageLength: 10,
            ordering: false,
            select: {
                style: 'multi',
                selector: 'td:first-child input[type="checkbox"]'
            },
            dom: 'Bfrtip',
            buttons: [
                // Print button
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    titleAttr: 'Print',
                    title: 'Selected Quotation List',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6],
                        rows: function (idx, data, node) {
                            return $(QuotationTable.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, QuotationTable);
                                return data;
                            }
                        }
                    },
                    customize: function (win) {
                        var $body = $(win.document.body);

                        // Inject custom CSS for print
                        $body.append(`
                            <style>
                                thead th {
                                    background-color: black !important;
                                    color: white !important;
                                    text-align: center !important;
                                    -webkit-print-color-adjust: exact !important;
                                    print-color-adjust: exact !important;
                                }
                                table {
                                    border-collapse: collapse !important;
                                    width: 100% !important;
                                }
                                td, th {
                                    border: 1px solid #000 !important;
                                    padding: 6px !important;
                                }
                            </style>
                        `);

                        // Center title
                        $body.find('h1').css('text-align', 'center');

                        // Insert generated date
                        $body.find('h1').after(
                            '<div style="text-align:center;font-style:italic;font-size:10pt;margin-bottom:12px;">Generated on: '
                            + new Date().toISOString().split('T')[0] + '</div>'
                        );

                        // Add bootstrap table styles
                        $body.find('table')
                            .addClass('table table-bordered table-striped')
                            .css('width', '100%');

                        // Font size
                        $body.css('font-size', '12pt');
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        // Show spinner
                        try { btnApi.processing(true); } catch (err) { }

                        // Call original print action
                        try {
                            $.fn.dataTable.ext.buttons.print.__originalAction.call(this, e, dt, button, config);
                        } catch (err) {
                            // Ensure spinner not left running
                            setTimeout(function () { try { btnApi.processing(false); } catch (e) { } }, 300);
                            throw err;
                        }

                        // Final fallback: if print window never reports, clear after 2s
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 2000);
                    }
                },
                // PDF Export button
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf-fill text-danger fs-5"></i>',
                    titleAttr: 'PDF',
                    title: 'Selected Quotation List',
                    orientation: 'landscape',
                    pageSize: 'A4',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6],
                        rows: function (idx, data, node) {
                            return $(QuotationTable.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, QuotationTable);
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            btnApi.processing(false);
                            return;
                        }

                        btnApi.processing(true);

                        // If pdfMake exists, wrap its download so we can stop spinner when done
                        if (window.pdfMake && pdfMake.createPdf && !pdfMake._patchedForDT) {
                            (function () {
                                var origCreate = pdfMake.createPdf;
                                pdfMake.createPdf = function (docDefinition) {
                                    var pdfDoc = origCreate.call(pdfMake, docDefinition);
                                    var origDownload = pdfDoc.download;
                                    pdfDoc.download = function (filename, cb) {
                                        origDownload.call(pdfDoc, filename, function () {
                                            try { btnApi.processing(false); } catch (err) { }
                                            if (typeof cb === 'function') cb();
                                        });
                                    };
                                    return pdfDoc;
                                };
                                pdfMake._patchedForDT = true; // only patch once
                            })();
                        }

                        // Call original action
                        $.fn.dataTable.ext.buttons.pdfHtml5.__originalAction.call(this, e, dt, button, config);

                        // Final fallback: clear after timeout just in case
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 1500);
                    },
                    customize: customizeDoc
                },
                // Excel Export button
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel-fill text-success fs-5"></i>',
                    titleAttr: 'Excel',
                    title: 'Selected Quotation List',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6],
                        rows: function (idx, data, node) {
                            return $(QuotationTable.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, QuotationTable);
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        try { btnApi.processing(true); } catch (err) { }

                        // Call original excelHtml5 action
                        $.fn.dataTable.ext.buttons.excelHtml5.__originalAction.call(this, e, dt, button, config);

                        // Fallback clear spinner after 1.5s
                        setTimeout(function () { try { btnApi.processing(false); } catch (err) { } }, 300);
                    }
                },
                // CSV Export button
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    titleAttr: 'CSV',
                    title: 'Selected Quotation List',
                    exportOptions: {
                        columns: [1, 2, 3, 4, 5, 6],
                        rows: function (idx, data, node) {
                            return $(QuotationTable.row(idx).node()).find('input.row-select').prop('checked');
                        },
                        format: {
                            body: function (data, rowIdx, colIdx, node) {
                                if (colIdx === 1) return getExportSrNo(rowIdx, QuotationTable);
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        var selected = dt.rows().nodes().to$().find('input.row-select:checked').length;
                        var btnApi = dt.button(button);

                        if (selected === 0) {
                            showExportToast();
                            try { btnApi.processing(false); } catch (err) { }
                            return;
                        }

                        try { btnApi.processing(false); } catch (err) { }

                        $.fn.dataTable.ext.buttons.csvHtml5.__originalAction.call(this, e, dt, button, config);

                        // Stop spinner almost immediately (no real callback exists)
                        setTimeout(function () {
                            try { btnApi.processing(false); } catch (err) { }
                        }, 300);
                    }
                }
            ]
        }); // End DataTable Ajax Call

        initTooltips();

        // Move export buttons into export container (LEFT)
        QuotationTable.buttons().container().appendTo('#exportContainer');

        // Move default DataTables search input to the right container
        $('.dt-search label').appendTo('#searchContainer');
        $('.dt-search input[type="search"]').appendTo('#searchContainer');

        // Toast notification function
        function showToast(message, type = 'danger') {
            const toastHTML = `
                <div class="toast align-items-center text-white bg-${type} border-0 mb-2" role="alert">
                  <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                  </div>
                </div>`;
            const $toast = $(toastHTML);
            $('#toastContainer').append($toast);
            new bootstrap.Toast($toast[0], { delay: 3000 }).show();
            $toast.on('hidden.bs.toast', function () { $(this).remove(); });
        }

        // Select All for quotation table
        $("#selectAllQuotation").on("change", function () {
            let isChecked = $(this).is(":checked");
            $("#tblSelectedQuotationlst tbody input[type='checkbox']").prop("checked", isChecked);
        });

        // Auto-uncheck when any single checkbox unchecked
        $("#tblSelectedQuotationlst").on("change", "tbody input[type='checkbox']", function () {
            if (!$(this).is(":checked")) {
                $("#selectAllQuotation").prop("checked", false);
            }
        });

        // Search functionality
        $('#vendorSearch').on('keyup', function () {
            QuotationTable.search(this.value).draw();
        }); // This closing bracket was missing

        // Initialize DatePicker
        $('#Selectedquotationdate').daterangepicker({
            autoUpdateInput: false,
            opens: 'center',
            drops: 'down',
            locale: {
                cancelLabel: 'Clear',
                format: 'DD/MM/YYYY' // set display format
            },
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        }, function (start, end) {
            startDate = start;
            endDate = end;
            // Set value in dd/mm/yyyy format
            $('#Selectedquotationdate').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));

            // Apply client-side filter (if using column with dates in dd/mm/yyyy)
            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                var quotationDate = moment(data[2], 'DD/MM/YYYY'); // change 2 to your date column index
                if (!startDate || !endDate) return true;
                return quotationDate.isBetween(startDate, endDate, undefined, '[]'); // inclusive
            });

            QuotationTable.draw();
            $.fn.dataTable.ext.search.pop();
        });

        // Clear date picker
        $('#Selectedquotationdate').on('cancel.daterangepicker', function () {
            startDate = null;
            endDate = null;
            $(this).val('');
            QuotationTable.draw();
        });

        // View quotation details
        $(document).on("click", ".btn-view", function () {
            const rowData = $(this).data('row');
            console.log("Function Active");

            // If it's a JSON string, parse it
            const row = typeof rowData === "string" ? JSON.parse(rowData) : rowData;

            console.log("View button clicked, row:", row);

            let subamount = 0;
            console.log("Quotation row:", row);

            // Populate modal fields
            $("#quotationIdLarge").val(row.QuotationID);
            $("#vendorNameLarge").val(row.VendorName);
            $("#vendorCodeLarge").val(row.VendorCode);
            $("#rfqCodeLarge").val(row.RFQCode);
            $("#companyName").val(row.CompanyName);
            $("#vendordeliverydate").val(row.VendorDeliveryDateString);
            $("#priority").val(row.Priority);
            $("#shippingLarge").text('₹' + row.ShippingCharges);
            $("#TotalAmount").text('₹' + row.TotalAmount);
            $("#subAmount").text('₹' + row.SubAmount);
            console.log("SubAmount= ", row.SubAmount);

            // Convert RequiredDateString to dd/mm/yyyy
            if (row.RequiredDateString) {
                $("#requireddate").val(moment(row.RequiredDateString, "YYYY-MM-DD").format("DD/MM/YYYY"));
            }

            // Convert QuotationDateString to dd/mm/yyyy
            if (row.QuotationDateString) {
                $("#quotationDateLarge").val(moment(row.QuotationDateString, "YYYY-MM-DD").format("DD/MM/YYYY"));
            }
            if (row.VendorDeliveryDateString) {
                $("#vendordeliverydate").val(moment(row.VendorDeliveryDateString, ["YYYY-MM-DD", "YYYY-MM-DDTHH:mm:ss"]).format("DD/MM/YYYY"));
            }

            // Fetch quotation items
            $.get('@Url.Action("FetchSelectedQuotationItemsOK", "Purchase")', { RQCode: row.QuotationID })
                .done(function (response) {
                    console.log("Full Response:", response);
                    console.log("Items Array:", response.items);

                    // Destroy previous DataTable instance if exists
                    if ($.fn.DataTable.isDataTable("#tblQuotationItems")) {
                        $('#tblQuotationItems').DataTable().clear().destroy();
                    }

                    // Initialize DataTable with new data
                    $('#tblQuotationItems').DataTable({
                        data: response.items,
                        columns: [
                            { data: "SRNO", defaultContent: "" },
                            { data: "RegisterQuotationCode", visible: false, defaultContent: "" },
                            { data: "ItemCode", defaultContent: "" },
                            { data: "ItemName", defaultContent: "" },
                            {
                                data: "Description",
                                defaultContent: "",
                                render: function (data) {
                                    const safeData = (data || "").replace(/"/g, '&quot;');
                                    return `<span data-bs-toggle="tooltip" title="${safeData}">${data}</span>`;
                                }
                            },
                            { data: "Quantity", defaultContent: "" },
                            { data: "UOM", defaultContent: "" },
                            {
                                data: "CostPerUnit",
                                defaultContent: "",
                                render: function (data, type, row) {
                                    if (type === 'display' || type === 'filter') {
                                        return '₹' + parseFloat(data || 0).toFixed(2);
                                    }
                                    return data;
                                }
                            },
                            { data: "Discount", defaultContent: "" },
                            { data: "GST", defaultContent: "" },
                            {
                                data: "Amount",
                                defaultContent: "",
                                render: function (data, type, row) {
                                    if (type === 'display' || type === 'filter') {
                                        return '₹' + parseFloat(data || 0).toFixed(2);
                                    }
                                    return data;
                                }
                            }
                        ],
                        paging: true,
                        searching: true,
                        ordering: false,
                        drawCallback: function () {
                            $('#tblQuotationItems [data-bs-toggle="tooltip"]').each(function () {
                                const t = bootstrap.Tooltip.getInstance(this);
                                if (t) t.dispose();
                                new bootstrap.Tooltip(this, {
                                    customClass: 'tooltip-dark',
                                    trigger: 'hover focus'
                                });
                            });
                        }
                    });

                    // Show modal after table is ready
                    let modal = new bootstrap.Modal(document.getElementById('largeModal'));
                    modal.show();
                })
                .fail(function (xhr, status, error) {
                    console.error("Error fetching items:", error);
                });
        });
    }); // End of $(document).ready()

    // Tooltip click handler
    $(document).on('click', '[data-bs-toggle="tooltip"]', function () {
        let tooltip = bootstrap.Tooltip.getInstance(this);
        if (tooltip) tooltip.hide();
    });

    // Initialize Bootstrap tooltips
    function initTooltips() {
        const tooltipTriggerList = [].slice.call(
            document.querySelectorAll('[data-bs-toggle="tooltip"]')
        );
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl, {
                customClass: 'tooltip-dark',
                trigger: 'hover'
            });
        });
    }

    // Create Purchase Order function
    function CreatePurchaseOrder(data) {
        console.log("PO Row Data : ", data);
    }

    // Open Purchase Order View
    function OpenPOView(quotationID = null) {
        let finalID;

        if (quotationID) {
            finalID = quotationID;
        } else {
            finalID = $('#quotationIdLarge').val();
        }

        if (!finalID) {
            alert("Quotation ID not found!");
            return;
        }

        // Redirect to controller with QuotationID
        window.location.href = `/Purchase/CreatePOOK?quotationID=${finalID}`;
    }

    // Helper function to recalc SrNo for export across all pages
    function getExportSrNo(rowIdx, tbl) {
        // Get all rows nodes
        let allRows = tbl.rows({ order: 'applied', search: 'applied' }).nodes().toArray();
        // Filter only the checked rows
        let checkedRows = allRows.filter(row => $(row).find('input.row-select').prop('checked'));
        // Find the position of this row in the checkedRows array
        let sr = checkedRows.findIndex(row => tbl.row(row).index() === rowIdx) + 1;
        return sr; // consecutive Sr.No
    }
    </script>
</body>
</html>
