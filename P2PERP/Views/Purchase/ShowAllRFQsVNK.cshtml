@{
    ViewBag.Title = "ShowAllRFQsVNK";
}

<html>
<head>
    <style>
        .card-header-small {
            padding: 0.25rem 1rem;
            font-size: 1.8rem;
            font-weight: 700;
        }

        body.modal-open .main-content::after {
            content: '';
            position: fixed;
            inset: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1040;
            pointer-events: none;
        }

        .modal {
            z-index: 1060 !important;
        }

        .modal-dialog {
            margin-top: 80px;
        }

        .modal-wide .modal-dialog {
            max-width: 1200px;
            margin-top: 80px;
        }



        .modal-backdrop {
            display: none;
        }

        body.modal-open .main-content {
            position: relative;
        }


        #tblRFQ thead th, #tblRFQ tbody td {
            text-align: center !important;
            vertical-align: middle;
        }

        #tblRFQ tbody td {
            font-size: 14px;
        }

        .dt-toolbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 10px;
        }

        .dt-left {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
        }

        .dataTables_paginate {
            float: right !important;
        }

        .dt-buttons .btn {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 38px;
            height: 38px;
            border-radius: 50%;
            padding: 0;
        }

        .btn-icon-square {
            width: 36px;
            height: 36px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
        }

        .btn-view {
            color: white;
            margin-left: 6px;
        }

            .btn-view:hover {
                background-color: darkviolet;
                border-color: darkviolet;
                color: white;
            }

        .modal-dialog {
            margin-top: 140px;
        }
    </style>

</head>
<body>
    <div class="main-content">
        <div class="container mt-4">
            <div class="card shadow-sm rounded">

                <div class="text-center mb-3 mt-2">
                    <h3 class="text-primary fw-bold">
                        Register Quotations
                    </h3>
                </div>

                @*date picker*@

                <div class="mb-3 ms-3 d-flex align-items-center gap-2">
                    <div class="input-group" style="max-width: 280px;">
                        <span class="input-group-text bg-primary text-white">
                            <i class="bi bi-calendar-date"></i>
                        </span>
                        <input type="text" id="RFQDatepicker" class="form-control" placeholder="Select date range" readonly />
                    </div>
                </div>



                <div class="card-body">
                    <table class="table table-striped table-hover table-bordered align-middle" id="tblRFQ">
                        <thead class="table-dark">
                            <tr class="text-center">
                                <th><input type="checkbox" id="selectAll" /></th>
                                <th>Sr No</th>
                                <th>RFQ Code</th>
                                <th>Added Date</th>
                                <th>Added By</th>
                                <th>Description</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody class="text-center"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="rfqModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white justify-content-center">
                    <h5 class="modal-title fw-bold text-white mb-4">Quotation List</h5>
                    <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="rfqModalContent"></div>
            </div>
        </div>
    </div>



    <script>
        $(document).ready(function () {
            // Initialize tooltips
            $('[data-bs-toggle="tooltip"]').tooltip();


            function formatDateOnly(dateValue) {
                if (!dateValue) return "";

                // Try parsing with moment if available
                if (moment(dateValue, ["YYYY-MM-DD", "YYYY/MM/DD", "DD-MM-YYYY", "DD/MM/YYYY"], true).isValid()) {
                    return moment(dateValue).format("DD/MM/YYYY");
                }

                // Fallback: handle manually if not detected by moment
                let datePart = dateValue.split(' ')[0].replace(/-/g, '/'); // normalize - and /
                let parts = datePart.split('/');
                if (parts.length === 3) {
                    // Check if first part is year
                    if (parts[0].length === 4) {
                        return `${parts[2].padStart(2, '0')}/${parts[1].padStart(2, '0')}/${parts[0]}`;
                    } else {
                        return `${parts[0].padStart(2, '0')}/${parts[1].padStart(2, '0')}/${parts[2]}`;
                    }
                }

                return dateValue; // if nothing works
            }


            // Date filter for RFQs
            $(document).on('focus', '#RFQDatepicker', function () {
                if (!$(this).data('daterangepicker')) {
                    $(this).daterangepicker({
                        autoUpdateInput: false,
                        opens: "center",
                        drops: "down",
                        alwaysShowCalendars: false,
                        locale: { cancelLabel: 'Clear' },
                        ranges: {
                            'Today': [moment(), moment()],
                            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                            'Last 1 Month': [moment().subtract(1, 'month'), moment()],
                            'Last 3 Months': [moment().subtract(3, 'month'), moment()],
                            'Last 1 Year': [moment().subtract(1, 'year'), moment()]
                        }
                    }, function (start, end) {
                        $('#RFQDatepicker').val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));

                        // Add filter to DataTable
                        $.fn.dataTable.ext.search.push(function (settings, data) {
                            if (settings.nTable.id !== 'tblRFQ') return true;
                            const addedDate = moment(data[3], 'DD/MM/YYYY'); // column 3 = Added Date
                            return addedDate.isBetween(start, end, undefined, '[]');
                        });
                        if (rfqTable) rfqTable.draw();
                        $.fn.dataTable.ext.search.pop();
                    });

                    $('#RFQDatepicker').on('cancel.daterangepicker', function () {
                        $(this).val('');
                        if (rfqTable) rfqTable.draw();
                    });
                }
            });



            //  Toastr
            toastr.options = {
                closeButton: true, progressBar: true, newestOnTop: true,
                positionClass: "toast-top-right", preventDuplicates: true,
                timeOut: 3000, extendedTimeOut: 1000,
                showDuration: 300, hideDuration: 300,
                showMethod: "slideDown", hideMethod: "fadeOut"
            };

            function showToast(message, type = 'warning') {
                if (type === 'success') toastr.success(message);
                else if (type === 'error') toastr.error(message);
                else if (type === 'info') toastr.info(message);
                else toastr.warning(message);
            }

            function exportColumns(idx) { return idx !== 0 && idx !== 6; }

            //search
            let rfqTable = $('#tblRFQ').DataTable({
                dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>',
                buttons: [

                    // Print
                    {
                        extend: 'print',
                        title: '',
                        text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                        titleAttr: 'Print',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showToast("Please select at least one RFQ to Print");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: exportColumns,
                            rows: (idx, d, node) => $(node).find('.row-select').prop('checked')
                        },
                        customize: function (win) {
                            const today = new Date();
                            const formattedDate = today.toLocaleDateString('en-GB');

                            $(win.document.body).prepend(`
                        <div style="text-align:center; font-size:18px; font-weight:bold; margin-bottom:5px;">Register Quotations</div>
                        <div style="text-align:center; font-size:12px; margin-bottom:10px;">Exported Date: ${formattedDate}</div>
                    `);

                            $(win.document.body).append(`
                        <style>
                            thead th {
                                background-color: black !important;
                                color: white !important;
                                text-align: center !important;
                                -webkit-print-color-adjust: exact !important;
                                print-color-adjust: exact !important;
                            }
                            table {
                                border-collapse: collapse !important;
                                width: 100% !important;
                            }
                            td, th {
                                border: 1px solid #000 !important;
                                padding: 6px !important;
                            }
                        </style>
                    `);

                            $(win.document.body).find('table')
                                .addClass('table table-bordered table-striped')
                                .css('font-size', '14px');

                            $(win.document.body).find('table tbody tr').each(function (i) {
                                $(this).find('td:first').text(i + 1);
                            });
                        }
                    }
                    ,
                    {
                        //pdf
                        extend: 'pdfHtml5', title: 'Register Quotations',
                        text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>', titleAttr: 'Export PDF',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) { showToast("Please select at least one RFQ to export PDF"); return; }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: exportColumns,
                            rows: (idx, d, node) => $(node).find('.row-select').prop('checked'),
                            format: { body: (data, row, col) => typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data }
                        },
                        customize: function (doc) {
                            doc.content[0].alignment = 'center'; doc.content[0].fontSize = 14;
                            doc.content.splice(1, 0, { text: 'Exported Date: ' + new Date().toLocaleDateString('en-GB'), alignment: 'center', margin: [0, 0, 0, 8], fontSize: 10 });
                            var tableNode = doc.content.find(c => c.table); if (!tableNode) return;
                            doc.styles.tableHeader = { alignment: 'center', fillColor: '#212529', color: '#ffffff', bold: true };
                            tableNode.table.body.forEach((row, i) => { if (i > 0) row[0] = { text: String(i), alignment: 'center' }; });
                            tableNode.layout = { paddingLeft: () => 30, paddingRight: () => 6 };
                        }
                    },

                    // Excel
                    {
                        extend: 'excelHtml5',
                        title: '',
                        filename: 'Registered Quotations',
                        text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                        titleAttr: 'Export Excel',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showToast("Please select at least one RFQ to export Excel");
                                return;
                            }
                            window.__excelSrCounter = 0;
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: exportColumns,
                            rows: (idx, d, node) => $(node).find('.row-select').prop('checked'),
                            format: {
                                body: function (data, row, col, node) {
                                    if (col === 1) return ++window.__excelSrCounter;
                                    return typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data;
                                }
                            }
                        },
                        customize: function (xlsx) {
                            var sheet = xlsx.xl.worksheets['sheet1.xml'];
                            const today = new Date();
                            const dateStr = today.toLocaleDateString('en-GB');

                            $(sheet).find('row').each(function () {
                                var r = parseInt($(this).attr('r'));
                                $(this).attr('r', r + 2);
                                $(this).find('c').each(function () {
                                    var cellRef = $(this).attr('r');
                                    var col = cellRef.replace(/\d+/g, '');
                                    var row = parseInt(cellRef.replace(/\D/g, '')) + 2;
                                    $(this).attr('r', col + row);
                                });
                            });

                            var titleRow = `<row r="1">
                        <c t="inlineStr" r="A1" s="2">
                            <is><t>Registered Quotations</t></is>
                        </c>
                    </row>`;

                            var dateRow = `<row r="2">
                        <c t="inlineStr" r="A2" s="2">
                            <is><t>Export Date: ${dateStr}</t></is>
                        </c>
                    </row>`;

                            sheet.childNodes[0].childNodes[1].innerHTML = titleRow + dateRow + sheet.childNodes[0].childNodes[1].innerHTML;
                        }
                    },

                    // CSV
                    {
                        extend: 'csvHtml5',
                        text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                        titleAttr: 'Export to CSV',
                        action: function (e, dt, button, config) {
                            if ($('#tblRFQ .row-select:checked').length === 0) {
                                showToast("Please select at least one row to export!", "warning");
                                return;
                            }
                            window.__srnoCounter = 0;
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                            dt.processing(false);
                        },
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            columns: function (idx) {
                                return idx !== 0 && idx !== 6;
                            },
                            format: {
                                body: function (data, row, column, node) {
                                    data = typeof data === 'string' ? data.replace(/<[^>]*>/g, '').trim() : data;

                                    if (column === 1) {
                                        if (!window.__srnoCounter) window.__srnoCounter = 0;
                                        return ++window.__srnoCounter;
                                    }

                                    if (column === 3) {
                                        if (moment(data, 'DD-MM-YYYY', true).isValid()) return moment(data, 'DD-MM-YYYY').format('DD-MM-YYYY');
                                        if (moment(data).isValid()) return moment(data).format('DD-MM-YYYY');
                                        return data;
                                    }

                                    return data;
                                }
                            }
                        },
                        title: '',
                        filename: function () {
                            return 'RFQ_List_' + new Date().toISOString().slice(0, 10).replace(/-/g, "");
                        },
                        customize: function (csv) {
                            const today = new Date();
                            const dateStr = today.toLocaleDateString('en-GB');
                            const header = `"All RFQs"\n"Export Date: ${dateStr}"\n`;
                            return header + csv;
                        }
                    }


                ],
                initComplete: function () {
                    $('#tblRFQ_filter input').addClass("form-control").attr("placeholder", "Search...").css("height", "40px");
                },
                processing: true,
                ordering: false,
                ajax: { url: '/Purchase/AllRFQVNK', type: 'GET', dataSrc: d => d },
                columns: [
                    { data: null, orderable: false, className: "text-center", render: (d, t, r) => `<input type="checkbox" class="row-select" value="${r.RFQCode}" />` },
                    { data: null, className: "text-center", orderable: false, render: (d, t, r, meta) => meta.row + 1 },
                    { data: 'RFQCode' },
                    { data: 'AddedDateVK', render: (d) => formatDateOnly(d) },
                    { data: 'FullName' },
                    { data: 'Description', render: (d) => `<span data-bs-toggle="tooltip" title="${d}">${d}</span>` },
                    {
                        data: null, orderable: false,
                        render: function (row) {
                            console.log(row)
                            let registerBtn = '';
                            let viewBtn=''
                            if (row.HasUnregisteredVendors && Number(row.HasUnregisteredVendors) === 1) {
                                registerBtn = `<a class="btn btn-sm btn-success ms-1"
                            href="/Purchase/RegisterQuotationVNK?rfqCode=${encodeURIComponent(row.RFQCode)}&prCode=${encodeURIComponent(row.PRCode)}"
                            title="Register Quotation" data-bs-toggle="tooltip">
                            <i class="bi bi-file-earmark-plus-fill fs-5"></i>
                        </a>`;
                            }
                            if (row.AnyVendor && Number(row.AnyVendor) === 1) {
                                 viewBtn = `<a href="javascript:void(0)"
                        class="btn btn-sm btn-view  btn-icon-square btn-primary btn-view-quotation"
                        data-rfq="${row.RFQCode}" data-pr="${row.PRCode}" data-unreg="${row.HasUnregisteredVendors}"
                        data-bs-toggle="tooltip" title="View Quotation">
                        <i class="bi bi-eye-fill"></i>
                    </a>`};

                            return `<div class="d-flex justify-content-center align-items-center">${viewBtn}${registerBtn}</div>`;
                        }
                    }
                ]
            });

            rfqTable.on('draw', function () { $('[data-bs-toggle="tooltip"]').tooltip(); });

            $(document).on("change", "#selectAll", function () { $(".row-select").prop("checked", this.checked); });

            // View Quotation in Modal
            $(document).on("click", ".btn-view-quotation", function () {
                let rfqCode = $(this).data("rfq");
                let prCode = $(this).data("pr");
                $("#rfqModalContent").html("<div class='text-center p-3 small'>Loading...</div>");
                $.get("/Purchase/ViewQuotationVNK", { rfqCode, prCode }, function (html) {
                    $("#rfqModalContent").html(html);
                    $("#rfqModal").modal("show");
                });
            });
        });

        // Keep blur and modal-open when closing nested modals
        $(document).on('hidden.bs.modal', '.modal', function () {
            if ($('.modal.show').length) {
                $('body').addClass('modal-open');
            }
        });

        // Dynamic stacking for multiple modals
        $('.modal').on('show.bs.modal', function (e) {
            var zIndex = 1050 + ($('.modal:visible').length * 10);
            $(this).css('z-index', zIndex);
            setTimeout(function () {
                $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
            }, 0);
        });



    </script>


</body>
</html>