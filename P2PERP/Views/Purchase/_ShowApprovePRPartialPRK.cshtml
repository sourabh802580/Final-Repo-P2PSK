@{
    Layout = null; // No layout for partial view
}

<!-- Date Filter + Table Container -->
<div class="p-3 bg-white rounded shadow-sm">
    <!-- Date Range Picker -->
    <div class="mb-3">
        <div class="input-group" style="max-width: 280px;">
            <span class="input-group-text bg-primary text-white">
                <i class="bi bi-calendar-date"></i>
            </span>
            <input type="text" id="prDateFilter" class="form-control" placeholder="Select date range" readonly />
        </div>
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table id="approvedPrTable" class="table table-bordered table-hover align-middle shadow-sm">
            <thead class="table-dark text-center">
                <tr>
                    <th><input type="checkbox" id="selectAll" data-bs-toggle="tooltip" title="Select All" /></th>
                    <th>Sr No</th>
                    <th>PR Code</th>
                    <th>Added Date</th>
                    <th>Approved Date</th>
                    <th>Priority</th>
                </tr>
            </thead>
            <tbody id="tbodyPartial" class="text-center">
                <tr>
                    <td colspan="6" class="text-muted py-3">Loading...</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<!-- Styles -->
<style>
    #approvedPrTable thead th,
    #approvedPrTable tbody td {
        text-align: center;
        vertical-align: middle;
    }

    .dt-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
    }
</style>

<!-- JavaScript -->
<script>
    $(document).ready(function () {
        const tableId = "#approvedPrTable";

        // ✅ Toast setup
        function showToast(message, type = "info") {
            toastr.options = {
                closeButton: true,
                progressBar: true,
                positionClass: "toast-top-right",
                timeOut: "3000"
            };
            toastr[type](message);
        }

        let table;

        // ✅ Fetch data
        $.ajax({
            url: '/Purchase/ShowApprovPRK',
            type: 'GET',
            success: function (data) {
                const $tbody = $("#tbodyPartial");
                $tbody.empty();

                if (!data || data.length === 0) {
                    $tbody.append('<tr><td colspan="6" class="text-center text-muted">No records found</td></tr>');
                    return;
                }

                data.forEach(function (i, index) {
                    const addedDate = i.AddedDate ? moment(i.AddedDate).format('DD/MM/YYYY') : '';
                    const approvedDate = i.ApprovedRejectedDate ? moment(i.ApprovedRejectedDate).format('DD/MM/YYYY') : '';
                    const priorityBadge = i.Priority
                        ? `<span class="${i.Priority.toLowerCase() === 'cold' ? 'badge bg-success' :
                            i.Priority.toLowerCase() === 'warm' ? 'badge bg-warning' :
                                i.Priority.toLowerCase() === 'hot' ? 'badge bg-danger' :
                                    'badge bg-secondary'
                        }">${i.Priority}</span>`
                        : '';

                    $tbody.append(`
                        <tr>
                            <td><input type="checkbox" class="row-select" value="${i.PRCode}" /></td>
                            <td>${index + 1}</td>
                            <td>${i.PRCode}</td>
                            <td>${addedDate}</td>
                            <td>${approvedDate}</td>
                            <td>${priorityBadge}</td>
                        </tr>
                    `);
                });

                // ✅ Initialize DataTable
                if ($.fn.DataTable.isDataTable(tableId)) $(tableId).DataTable().destroy();

                table = $(tableId).DataTable({
                    dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center mt-2"ip>',
                    ordering: false,
                    responsive: true,
                    pageLength: 10,
                    buttons: [
                        
                           {
                            extend: 'print',
                            text: '<i class="bi bi-printer-fill text-dark fs-5" data-bs-toggle="tooltip" title="Print Selected Rows"></i>',
                            titleAttr: 'Print',
                            title: 'Approved Purchase Requisition',

                            action: function (e, dt, button, config) {
                                if ($('.row-select:checked').length === 0) {
                                    showToast("Please select at least one row to Print", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                            },

                            exportOptions: {
                                columns: ':not(:first-child)', // exclude checkbox column
                                rows: function (idx, data, node) {
                                    return $(node).find('.row-select').prop('checked');
                                }
                            },

                            customize: function (win) {
                                // ✅ Format date as DD/MM/YYYY
                                const today = new Date();
                                const generatedDate = today.toLocaleDateString('en-GB');

                                // ❌ Remove default DataTables title
                                $(win.document.body).find('h1').remove();

                                // ✅ Add custom header
                                $(win.document.body).prepend(`
            <div style="text-align:center; margin-bottom:10px;">
                <h2 style="margin:0;">Approved Purchase Requisition</h2>
                <div style="font-size:12px;">Generated on: ${generatedDate}</div>
            </div>
        `);

                                // ✅ Style the table
                                const $table = $(win.document.body).find('table');
                                $table.addClass('table table-bordered table-striped').css({
                                    'font-size': '14px',
                                    'width': '100%',
                                    'border-collapse': 'collapse',
                                    'margin-top': '20px'
                                });

                                // ✅ Style header
                                $table.find('thead th').css({
                                    'background-color': '#000000',
                                    'color': '#ffffff',
                                    'text-align': 'center'
                                });

                                // ✅ Center align body cells
                                $table.find('tbody td').css('text-align', 'center');

                                // ✅ Add correct serial numbers
                                $table.find('tbody tr').each(function (i) {
                                    $(this).find('td:first').text(i + 1);
                                });
                            }
                        },

                        //PDF Start

                        {
                            extend: 'pdfHtml5',
                            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5" data-bs-toggle="tooltip" title="Export to PDF"></i>',
                            titleAttr: 'Export PDF',
                            title: 'Approved Purchase Requisition',

                            action: function (e, dt, button, config) {
                                if ($('.row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export PDF", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                            },

                            exportOptions: {
                                columns: ':not(:first-child)', // ✅ exclude checkbox column
                                rows: function (idx, data, node) {
                                    return $(node).find('.row-select').prop('checked');
                                },
                                format: {
                                    body: function (data, rowIdx, colIdx) {
                                        // ✅ Convert dates to DD/MM/YYYY
                                        //if (colIdx === 3 || colIdx === 4) return moment(data).format('DD/MM/YYYY');
                                        // ✅ Add serial numbers in first column
                                        if (colIdx === 0) return rowIdx + 1;
                                        // ✅ Strip HTML tags
                                        if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                        return data;
                                    }
                                }
                            },

                            customize: function (doc) {
                                try {
                                    // ✅ Title formatting
                                    doc.content[0].alignment = 'center';
                                    doc.content[0].fontSize = 14;

                                    // ✅ Add export date below title
                                    const exportDate = new Date().toLocaleDateString('en-GB');
                                    doc.content.splice(1, 0, {
                                        text: 'Export Date: ' + exportDate,
                                        alignment: 'center',
                                        margin: [0, 0, 0, 8],
                                        fontSize: 10
                                    });

                                    // ✅ Find table node
                                    const tableNode = doc.content.find(c => c.table);
                                    if (!tableNode) return;

                                    // ✅ Table styles
                                    doc.styles = doc.styles || {};
                                    doc.styles.tableHeader = {
                                        alignment: 'center',
                                        fillColor: '#212529', // dark header background
                                        color: '#ffffff',     // white text
                                        bold: true
                                    };
                                    doc.styles.tableBodyEven = { alignment: 'center' };
                                    doc.styles.tableBodyOdd = { alignment: 'center' };

                                    // ✅ Table layout adjustments
                                    tableNode.layout = {
                                        hLineWidth: () => 0.5,
                                        vLineWidth: () => 0.5,
                                        hLineColor: () => '#dddddd',
                                        vLineColor: () => '#dddddd',
                                        paddingLeft: () => 30,
                                        paddingRight: () => 30,
                                        paddingTop: () => 4,
                                        paddingBottom: () => 4
                                    };

                                    // ✅ Add serial numbers manually
                                    tableNode.table.body.forEach((row, i) => {
                                        if (i > 0) row[0] = { text: String(i), alignment: 'center' };
                                    });

                                } catch (err) {
                                    console.error('PDF customize error:', err);
                                }
                            }
                        },


                        //Excel Start
                        {
                            extend: 'excelHtml5',
                            text: '<i class="bi bi-file-earmark-excel text-success fs-5" data-bs-toggle="tooltip" title="Export to Excel"></i>',
                            titleAttr: 'Export Excel',
                            title: 'Approved Purchase Requisition',

                            action: function (e, dt, button, config) {
                                // ✅ Validate row selection before export
                                if ($('.row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export Excel", "warning");
                                    return;
                                }

                                // ✅ Initialize serial counter for export
                                window.__excelSrCounter = 0;

                                // ✅ Proceed with DataTable’s default Excel export action
                                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                            },

                            exportOptions: {
                                columns: ':not(:first-child)', // Exclude checkbox column
                                rows: function (idx, data, node) {
                                    return $(node).find('.row-select').prop('checked');
                                },
                                format: {
                                    body: function (data, rowIdx, colIdx) {
                                        // ✅ Add serial number in first visible column
                                        if (colIdx === 1) return ++window.__excelSrCounter;

                                        // ✅ Format date columns (adjust indices as needed)
                                        //if (colIdx === 3 || colIdx === 4) {
                                        //    const formatted = moment(data, ["YYYY-MM-DD", "DD/MM/YYYY"]).format("DD/MM/YYYY");
                                        //    return formatted === "Invalid date" ? data : formatted;
                                        //}

                                        // ✅ Clean HTML tags from text
                                        if (typeof data === "string") {
                                            return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                        }

                                        return data;
                                    }
                                }
                            }

                           
                        },

                        {
                            extend: 'csvHtml5',
                            title: 'Approved_Purchase_Requisition',
                            text: '<i class="bi bi-filetype-csv text-primary fs-5" data-bs-toggle="tooltip" title="Export to CSV"></i>',
                            titleAttr: 'Export CSV',

                            action: function (e, dt, button, config) {
                                // ✅ Validate that at least one row is selected
                                if ($('.row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export CSV", "warning");
                                    return;
                                }

                                // ✅ Proceed with DataTables built-in CSV export
                                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                            },

                            exportOptions: {
                                columns: ':not(:first-child)', // Exclude checkbox column
                                rows: function (idx, data, node) {
                                    return $(node).find('.row-select').prop('checked');
                                },
                                format: {
                                    body: function (data, rowIdx, colIdx) {
                                        // ✅ Add serial number in first column
                                        if (colIdx === 0) return rowIdx + 1;

                                        // ✅ Format date columns (adjust index if needed)
                                        //if (colIdx === 3 || colIdx === 4) {
                                        //    const formatted = moment(data, ["YYYY-MM-DD", "DD/MM/YYYY"]).format("DD/MM/YYYY");
                                        //    return formatted === "Invalid date" ? data : formatted;
                                        //}

                                        // ✅ Remove HTML tags and trim spaces
                                        if (typeof data === "string") {
                                            return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                        }

                                        return data;
                                    }
                                }
                            }
                        }

                    ],
                    initComplete: function () {
                        $('#approvedPrTable_filter input')
                            .addClass("form-control")
                            .attr("placeholder", "Search...")
                            .css("height", "40px");
                    }
                });

                // ✅ Checkbox: select all
                $(document).on("change", "#selectAll", function () {
                    $(".row-select").prop("checked", $(this).prop("checked"));
                });
                $(document).on("change", ".row-select", function () {
                    $("#selectAll").prop("checked",
                        $(".row-select:checked").length === $(".row-select").length);
                });

                // ✅ Date Range Picker Filter
                $('#prDateFilter').daterangepicker({
                    autoUpdateInput: false,
                    opens: "center",
                    drops: "down",
                    locale: { cancelLabel: 'Clear', applyLabel: 'Apply' },
                    ranges: {
                        'Today': [moment(), moment()],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                        'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                        'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
                    }
                }, function (start, end) {
                    $('#prDateFilter').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
                    $.fn.dataTable.ext.search.push(function (settings, data) {
                        if (settings.nTable.id !== 'approvedPrTable') return true;
                        const addedDate = moment(data[3], 'DD/MM/YYYY');
                        return addedDate.isBetween(start, end, undefined, '[]');
                    });
                    table.draw();
                    $.fn.dataTable.ext.search.pop();
                });

                $('#prDateFilter').on('cancel.daterangepicker', function () {
                    $(this).val('');
                    table.draw();
                });
            },
            error: function () {
                $("#tbodyPartial").html('<tr><td colspan="6" class="text-danger text-center">Error loading records</td></tr>');
            }
        });
    });
</script>
