@{
    ViewBag.Title = "ShowPendingPR";
}


<div class="main-content d-flex justify-content-center" style="min-height:auto;">
    <div class="shadow-sm rounded bg-white p-3" style="width:1200px;">

        <div class="main-content">
            <!-- Nav Pills -->

            <ul class="nav nav-pills mb-3">
                <li class="nav-item me-2">
                    <a href="/Purchase/ShowPendingPRPRK" class="nav-link active">
                        <i class="bi bi-hourglass-split"></i> Pending Purchase Requisition
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/Purchase/ShowApprovePRPRK" class="nav-link">
                        <i class="bi bi-check2-circle"></i> Approved Purchase Requisition
                    </a>
                </li>
            </ul>
            <!-- Header -->
            <div class="text-center mb-3">
                <h3 class="text-primary fw-bold">Pending Purchase Requisition</h3>
            </div>



            <!-- Date Range Picker -->
            <div class="mb-3">
                <div class="input-group" style="max-width: 280px;">
                    <span class="input-group-text bg-primary text-white">
                        <i class="bi bi-calendar-date"></i>
                    </span>
                    <input type="text" id="PRdatepicker" class="form-control" placeholder="Select date range" readonly />
                </div>
            </div>

            <!-- Table -->
            <div class="table-responsive shadow-sm rounded">
                <table id="pendingPRTable" class="table table-striped table-hover table-bordered align-middle">
                    <thead class="table-dark">
                        <tr class="text-center">
                            <th><input type="checkbox" id="selectAll" /></th>
                            <th>Sr No</th>
                            <th>PR Code</th>
                            <th>Added Date</th>
                            <th>EXPECTED Date</th>
                            <th>Added By</th>
                            @*<th>Status</th>*@
                            <th>Priority</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody class="text-center"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="prModal" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white justify-content-center">
                <h5 class="modal-title fw-bold mb-4 text-white">Pending Purchase Requisition Items</h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="prModalBody"></div>
        </div>
    </div>
</div>

<style>
    .container-fluid {
        max-width: 1200px !important; /* or any fixed width you prefer */
        margin-left: auto;
        margin-right: auto;
    }

    .modal-backdrop {
        display: none;
    }

    Blur only main content when modal opens
    body.modal-open .main-content {
        position: relative;
    }

    body.modal-open .main-content::before {
        content: '';
        position: fixed;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1040;
        pointer-events: none;
    }

    .modal {
        z-index: 1055 !important;
    }

    #pendingPRTable thead th {
        text-align: center !important;
        vertical-align: middle;
    }

    .btnAction {
        width: 35px;
        height: 35px;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        padding: 0;
    }

    .dt-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
    }

    .dt-left {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .dataTables_paginate {
        float: right !important;
    }
</style>

<script>
    // ✅ Global Toastr-based toast wrapper
    function showToast(message, type = 'warning') {
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "3000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };

        switch ((type || "").toLowerCase()) {
            case 'success': toastr.success(message); break;
            case 'danger':
            case 'error': toastr.error(message); break;
            case 'info': toastr.info(message); break;
            default: toastr.warning(message);
        }
    }

    $(function () {
        window.table = null;

        function exportColumns(idx) {
            return idx !== 0 && idx !== 7; // Exclude checkbox (0) and Action (6)
        }

        function loadPendingPR() {
            window.table = $('#pendingPRTable').DataTable({
                dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>',
                ordering: false,
                buttons: [
                    // ✅ Print
                    {
                        extend: 'print',
                        title: 'PR List',
                        text: '<i class="bi bi-printer-fill text-dark fs-5" data-bs-toggle="tooltip" title="Print Selected Rows"></i>',
                        titleAttr: 'Print',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showToast("Please select at least one row to Print", "warning");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: exportColumns,
                            rows: function (idx, data, node) { return $(node).find('.row-select').prop('checked'); }
                        },
                        customize: function (win) {
                            $(win.document.body).find('h1').remove();
                            const today = new Date().toLocaleDateString('en-GB');
                            $(win.document.body).prepend(`
                                <div style="text-align:center; margin-bottom:10px;">
                                    <h2 style="margin:0;">Pending Purchase Requisition</h2>
                                    <div style="font-size:12px;">Generated on: ${today}</div>
                                </div>
                            `);
                            const $table = $(win.document.body).find('table');
                            $table.addClass('table table-bordered table-striped').css({ 'font-size': '14px', 'width': '100%', 'border-collapse': 'collapse', 'margin-top': '20px' });
                            $table.find('thead th').css({ 'background-color': '#000', 'color': '#fff', 'text-align': 'center' });
                            $table.find('tbody td').css('text-align', 'center');
                            $table.find('tbody tr').each(function (i) { $(this).find('td:first').text(i + 1); });
                        }
                    },
                    // ✅ PDF
                    {
                        extend: 'pdfHtml5',
                        title: 'Pending Purchase Requisition',
                        text: '<i class="bi bi-file-earmark-pdf text-danger fs-5" data-bs-toggle="tooltip" title="Export to PDF"></i>',
                        titleAttr: 'Export PDF',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) { showToast("Please select at least one row to export PDF"); return; }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: exportColumns,
                            rows: function (idx, data, node) { return $(node).find('.row-select').prop('checked'); },
                            format: { body: function (data) { return typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data; } }
                        },
                        customize: function (doc) {
                            try {
                                doc.content[0].alignment = 'center'; doc.content[0].fontSize = 14;
                                var exportDate = new Date().toLocaleDateString('en-GB');
                                doc.content.splice(1, 0, { text: 'Export Date: ' + exportDate, alignment: 'center', margin: [0, 0, 0, 8], fontSize: 10 });
                                var tableNode = doc.content.find(c => c.table);
                                if (!tableNode) return;
                                doc.styles = doc.styles || {};
                                doc.styles.tableHeader = { alignment: 'center', fillColor: '#212529', color: '#fff', bold: true };
                                doc.styles.tableBodyEven = { alignment: 'center' };
                                doc.styles.tableBodyOdd = { alignment: 'center' };
                                tableNode.layout = { hLineWidth: () => 0.5, vLineWidth: () => 0.5, hLineColor: () => '#ddd', vLineColor: () => '#ddd', paddingLeft: () => 30, paddingRight: () => 20, paddingTop: () => 4, paddingBottom: () => 4 };
                                tableNode.table.body.forEach((row, i) => { if (i > 0) row[0] = { text: String(i), alignment: 'center' }; });
                            } catch (err) { console.error(err); }
                        }
                    },
                    // ✅ Excel
                    {
                        extend: 'excelHtml5',
                        title: 'Pending Purchase Requisition',
                        text: '<i class="bi bi-file-earmark-excel text-success fs-5" data-bs-toggle="tooltip" title="Export to Excel"></i>',
                        titleAttr: 'Export Excel',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) { showToast("Please select at least one row to export Excel"); return; }
                            window.__excelSrCounter = 0;
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: exportColumns,
                            rows: function (idx, data, node) { return $(node).find('.row-select').prop('checked'); },
                            format: {
                                body: function (data, rowIdx, colIdx) {
                                    if (colIdx === 1) return ++window.__excelSrCounter;
                                    if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                    return data;
                                }
                            }
                        }
                    },
                    // ✅ CSV
                    {
                        extend: 'csvHtml5',
                        title: 'Pending_Purchase_Requisition',
                        text: '<i class="bi bi-filetype-csv text-primary fs-5" data-bs-toggle="tooltip" title="Export to CSV"></i>',
                        titleAttr: 'Export CSV',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) { showToast("Please select at least one row to export CSV"); return; }
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: exportColumns,
                            rows: function (idx, data, node) { return $(node).find('.row-select').prop('checked'); },
                            format: { body: function (data, rowIdx, colIdx) { return colIdx === 0 ? rowIdx + 1 : (typeof data === 'string' ? data.replace(/<\/?[^>]+(>|$)/g, "").trim() : data); } }
                        }
                    }
                ],
                initComplete: function () {
                    $('#pendingPRTable_filter input').addClass("form-control").attr("placeholder", "Search...").css("height", "40px");
                },
                processing: true,
                serverSide: false,
                ajax: { url: '/Purchase/ShowPndPRPRK', dataSrc: '' },
                columns: [
                    { data: null, orderable: false, className: 'text-center', render: (d, t, r) => `<input type="checkbox" class="row-select" value="${r.PRCode}"/>` },
                    { data: null, orderable: false, className: 'text-center', render: (d, t, r, meta) => meta.row + 1 },
                    { data: 'PRCode' },
                    { data: 'AddedDate', render: d => d ? moment(d).format('DD/MM/YYYY') : '' },
                    { data: 'RequiredDate', render: d => d ? moment(d).format('DD/MM/YYYY') : '' },

                    { data: 'FullName', defaultContent: '' },
                    // ✅ Priority with color badge
                    {
                        data: 'Priority', defaultContent: '', render: function (data) {
                            if (!data) return '';
                            let badgeClass = '';
                            switch (data.toLowerCase()) {
                                case 'cold': badgeClass = 'badge bg-success'; break;
                                case 'warm': badgeClass = 'badge bg-warning'; break;
                                case 'hot': badgeClass = 'badge bg-danger'; break;
                                default: badgeClass = 'badge bg-secondary';
                            }
                            return `<span class="${badgeClass}">${data}</span>`;
                        }
                    },
                    { data: 'PRCode', orderable: false, className: 'text-center', render: d => `<button class="btn btn-sm btn-primary btnAction" data-id="${d}" data-bs-toggle="tooltip" title="View Details"><i class="bi bi-eye-fill"></i></button>` }
                ]
            });
        }

        loadPendingPR();

        // ✅ Tooltip
        function initTooltips() { $('[data-bs-toggle="tooltip"]').tooltip(); }
        initTooltips();
        $('#pendingPRTable').on('draw.dt', function () { initTooltips(); });

        // ✅ Select All
        $(document).on("change", "#selectAll", function () { $(".row-select").prop("checked", this.checked); });
        $(document).on("change", ".row-select", function () { $("#selectAll").prop("checked", $(".row-select:checked").length === $(".row-select").length); });

        // ✅ Open modal
        $(document).on("click", ".btnAction", function () {
            let prCode = $(this).data("id");
            $("#prModalBody").html("<div class='text-center p-3'>Loading...</div>");
            $.get("/Purchase/ShowPendingPRItemPRK", { prCode })
                .done(function (html) { $("#prModalBody").html(html); new bootstrap.Modal(document.getElementById("prModal")).show(); })
                .fail(function () { showToast("Error loading PR details", "danger"); });
        });

        // ✅ Date filter
        $(document).on('focus', '#PRdatepicker', function () {
            if (!$(this).data('daterangepicker')) {
                $(this).daterangepicker({
                    autoUpdateInput: false,
                    opens: "center",
                    drops: "down",
                    alwaysShowCalendars: false,
                    locale: { cancelLabel: 'Clear' },
                    ranges: {
                        'Today': [moment(), moment()],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                        'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                        'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
                    }
                }, function (start, end) {
                    $('#PRdatepicker').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
                    $.fn.dataTable.ext.search.push(function (settings, data) {
                        if (settings.nTable.id !== 'pendingPRTable') return true;
                        const addedDate = moment(data[3], 'DD/MM/YYYY');
                        return addedDate.isBetween(start, end, undefined, '[]');
                    });
                    table.draw(); $.fn.dataTable.ext.search.pop();
                });
                $('#PRdatepicker').on('cancel.daterangepicker', function () { $(this).val(''); table.draw(); });
            }
        });

    });
</script>

