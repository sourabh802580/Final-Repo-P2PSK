<div class="d-flex justify-content-between align-items-center mb-3">

    <div class="flex-grow-1 text-center">
        <h4 class="mb-0 h3 text-primary">Section List</h4>
    </div>

    <button class="btn btn-success" id="btnAddSection">
        <i class="bi bi-plus-circle"></i> Add Section
    </button>

</div>


<!-- Responsive wrapper -->
<div class="table-responsive">
    <table id="sectionTable" class="table table-bordered table-hover align-middle w-100">
        <thead class="table-dark text-center">
            <tr>
                <th width="50"><input type="checkbox" id="selectAllSection"></th>
                <th width="80">Sr No</th>
                <th>Section ID</th>
                <th>Section Code</th>
                <th>Section Name</th>
                <th>Warehouse Code</th>
                <th>Warehouse Name</th>
                <th>Description</th>
                <th width="150">Action</th>
            </tr>
        </thead>
        <tbody class="text-center"></tbody>
    </table>
</div>

<!-- Add Section Modal -->
<div class="modal fade" id="addSectionModal" tabindex="-1" aria-labelledby="addSectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="modal-title text-white w-100 h3 mb-3 text-center">Add New Section</h5>
                <button type="button" class="btn-close btn-close-white h3 mb-3" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addSectionForm">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <input type="text" id="SectionCodeSk" name="SectionCode" class="form-control" required readonly>
                                    <label for="SectionCodeSk">Section Code</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <input type="text" name="SectionName" class="form-control" required>
                                    <label for="SectionName">Section Name  <span class="text-danger">*</span></label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <select id="WarehouseCodes" name="WarehouseCode" class="form-select" required>
                                        <option value="">-- Select Warehouse --</option>
                                    </select>
                                    <label for="WarehouseCodes">Warehouse <span class="text-danger">*</span></label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <textarea name="Description" class="form-control" style="height: 80px;"></textarea>
                                    <label for="Description">Description</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end gap-2 mt-4">
                        @*<button type="button" class="btn btn-outline-danger bg-danger text-white px-4" data-bs-dismiss="modal">
                            <i class="bi bi-x-circle me-2"></i>Close
                        </button>*@
                        <button type="submit" class="btn btn-success px-4">
                            <i class="bi bi-check-circle me-2 text-white"></i>Save
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Section Modal -->
<div class="modal fade" id="editSectionModal" tabindex="-1" aria-labelledby="editSectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="modal-title text-white h3 w-100 mb-3 text-center">Edit Section</h5>
                <button type="button" class="btn-close btn-close-white mb-3" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editSectionForm">
                    <input type="hidden" name="SectionId" id="EditSectionId" />
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <input type="text" id="EditSectionCode" name="SectionCode" class="form-control" readonly>
                                    <label for="EditSectionCode">Section Code</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <input type="text" id="EditSectionName" name="SectionName" class="form-control" required>
                                    <label for="EditSectionName">Section Name <span class="text-danger">*</span></label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                                <div class="form-floating form-floating-outline" readonly>
                                    <select id="EditWarehouseCode" name="WarehouseCode" class="form-select" required ></select>
                                    <label for="EditWarehouseCode">Warehouse <span class="text-danger">*</span></label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group input-group-merge mb-3">
                                <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                                <div class="form-floating form-floating-outline">
                                    <textarea id="EditDescription" name="Description" class="form-control" style="height: 80px;"></textarea>
                                    <label for="EditDescription">Description</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end gap-2 mt-4">
                        @*<button type="button" class="btn btn-outline-danger bg-danger px-4" data-bs-dismiss="modal">
                            <i class="bi bi-x-circle me-2 text-white">Close</i>
                        </button>*@
                        <button type="submit" class="btn btn-primary px-4">
                            <i class="bi bi-check-circle me-2 text-white"></i>Update
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- View Section Modal -->
<div class="modal fade" id="viewSectionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="d-flex justify-content-center h3 mb-3 text-center ms-auto text-white">
                    Section Details
                </h5>
                <button type="button" class="btn-close  h3 mb-3 btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form class="row g-3">
                    <!-- Section Code -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="ViewSectionCode" readonly>
                                <label for="ViewSectionCode">Section Code</label>
                            </div>
                        </div>
                    </div>

                    <!-- Section Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="ViewSectionName" readonly>
                                <label for="ViewSectionName">Section Name</label>
                            </div>
                        </div>
                    </div>

                    <!-- Warehouse -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="ViewWarehouseName" readonly>
                                <label for="ViewWarehouseName">Warehouse</label>
                            </div>
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="ViewDescription" rows="3" readonly></textarea>
                                <label for="ViewDescription">Description</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    toastr.options = {
        closeButton: true,
        progressBar: true,
        newestOnTop: true,
        positionClass: "toast-top-right",
        preventDuplicates: true,
        timeOut: 3000
    };

    $(document).ready(function () {

        let selectedSectionIds = new Set();


        function initTooltips() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    trigger: 'hover'
                });
            });
        }

        // Initialize DataTable
        var table = $("#sectionTable").DataTable({
            dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
            buttons: [
                // Print Button - Fixed
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5" data-bs-toggle="tooltip" title="Print"></i>',
                    title: '',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            return selectedSectionIds.has(data.SectionId);
                        }
                    },
                    customize: function (win) {
                        // Serial number counter for selected rows only
                        let serialNumber = 1;

                        // Update serial numbers in the table
                        $(win.document.body).find('table tbody tr').each(function () {
                            $(this).find('td:first').text(serialNumber++);
                        });

                        $(win.document.body).prepend(
                            '<h2 style="text-align: center; margin-bottom: 10px;">Section List</h2>' +
                            '<p style="text-align: center; margin-bottom: 20px; color: #666;">Generated on: ' + new Date().toLocaleDateString("en-GB") + '</p>' +
                            '<hr style="margin-bottom: 20px;">'
                        );

                        $(win.document.body).find('table')
                            .css('border', '1px solid black')
                            .css('border-collapse', 'collapse')
                            .css('width', '100%')
                            .find('th, td')
                            .css('border', '1px solid black')
                            .css('padding', '8px')
                            .css('text-align', 'center');

                        $(win.document.body).find('th')
                            .css('background-color', 'black')
                            .css('color', 'white')
                            .css('font-weight', 'bold');
                    },
                    action: function (e, dt, button, config) {
                        if (selectedSectionIds.size === 0) {
                            toastr.warning("Please select at least one section before printing.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    }
                },
                // PDF Button - Alternative Solution (Manual Data Handling)
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5" data-bs-toggle="tooltip" title="Export PDF"></i>',
                    title: '',
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            // Strict check for selected rows
                            let isSelected = selectedSectionIds.has(parseInt(data.SectionId));
                            console.log('Row check - ID:', data.SectionId, 'Selected:', isSelected);
                            return isSelected;
                        }
                    },
                    customize: function (doc) {
                        // Completely rebuild the PDF content manually
                        doc.content = [];

                        // Title
                        doc.content.push({
                            text: 'SECTION LIST',
                            style: 'header',
                            alignment: 'center',
                            margin: [0, 0, 0, 10]
                        });

                        // Date
                        doc.content.push({
                            text: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                            style: 'subheader',
                            alignment: 'center',
                            margin: [0, 0, 0, 20]
                        });

                        // Get selected data manually
                        let selectedRows = [];
                        table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                            let rowData = this.data();
                            if (selectedSectionIds.has(rowData.SectionId)) {
                                selectedRows.push(rowData);
                            }
                        });

                        console.log('Manual selected rows:', selectedRows);

                        // Create table data
                        let tableData = [
                            [
                                { text: 'SR NO', style: 'tableHeader' },
                                { text: 'SECTION CODE', style: 'tableHeader' },
                                { text: 'SECTION NAME', style: 'tableHeader' },
                                { text: 'WAREHOUSE NAME', style: 'tableHeader' },
                                { text: 'DESCRIPTION', style: 'tableHeader' }
                            ]
                        ];

                        // Add selected data rows
                        selectedRows.forEach((row, index) => {
                            tableData.push([
                                { text: (index + 1).toString(), style: 'tableBody' },
                                { text: row.SectionCode || '', style: 'tableBody' },
                                { text: row.SectionName || '', style: 'tableBody' },
                                { text: row.WarehouseName || '', style: 'tableBody' },
                                { text: row.Description || '', style: 'tableBody' }
                            ]);
                        });

                        // Add table to document
                        doc.content.push({
                            table: {
                                widths: ['10%', '20%', '25%', '25%', '20%'],
                                body: tableData
                            },
                            layout: {
                                hLineWidth: function (i, node) { return 1; },
                                vLineWidth: function (i, node) { return 1; },
                                hLineColor: function (i, node) { return '#000000'; },
                                vLineColor: function (i, node) { return '#000000'; },
                                paddingTop: function (i, node) { return 5; },
                                paddingBottom: function (i, node) { return 5; }
                            }
                        });

                        // Define styles
                        doc.styles = {
                            header: {
                                fontSize: 18,
                                bold: true,
                                alignment: 'center'
                            },
                            subheader: {
                                fontSize: 10,
                                color: '#666666',
                                alignment: 'center'
                            },
                            tableHeader: {
                                bold: true,
                                fontSize: 10,
                                color: 'white',
                                fillColor: '#000000',
                                alignment: 'center'
                            },
                            tableBody: {
                                fontSize: 9,
                                alignment: 'center'
                            }
                        };

                        doc.defaultStyle = {
                            fontSize: 9,
                            alignment: 'center'
                        };
                    }
                },

                // Excel Button - Fixed
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5" data-bs-toggle="tooltip" title="Export Excel"></i>',
                    title: 'Section List',
                    message: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            return selectedSectionIds.has(data.SectionId);
                        }
                    },
                    customize: function (xlsx) {
                        // Add serial numbers dynamically in Excel
                        var sheet = xlsx.xl.worksheets['sheet1.xml'];
                        var rows = $('row', sheet);
                        let serialNumber = 1;

                        // Skip header row (index 0) and update serial numbers
                        for (var i = 1; i < rows.length; i++) {
                            var row = rows[i];
                            var firstCell = $('c:first', row);
                            if (firstCell.length) {
                                $('is t', firstCell).text(serialNumber++);
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedSectionIds.size === 0) {
                            toastr.warning("Please select at least one section before exporting Excel.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                },

                // CSV Button - Fixed
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5" data-bs-toggle="tooltip" title="Export CSV"></i>',
                    title: 'Section List',
                    message: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                    exportOptions: {
                        columns: ':visible:not(:first-child):not(:last-child)',
                        rows: function (idx, data, node) {
                            return selectedSectionIds.has(data.SectionId);
                        }
                    },
                    action: function (e, dt, button, config) {
                        if (selectedSectionIds.size === 0) {
                            toastr.warning("Please select at least one section before exporting CSV.", "No Selection");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    }
                }
            ],
            "processing": true,
            "serverSide": false,
            "ajax": {
                "url": "@Url.Action("GetSectionsSK", "Inventory")",
                "type": "GET",
                "datatype": "json"
            },
            "columns": [
                {
                    "data": null,
                    "render": function (data, type, row) {
                        return `<input type="checkbox" class="section-checkbox" value="${row.SectionId}">`;
                    },
                    "orderable": false,
                    "searchable": false
                },
                {
                    "data": null,
                    "render": function (data, type, row, meta) {

                        if (type === 'display' || type === 'export') {
                            return meta.row + 1;
                        }
                        return data;
                    }
                },
                { "data": "SectionId", visible: false },
                { "data": "SectionCode" },
                { "data": "SectionName" },
                { "data": "WarehouseCode", visible: false },
                { "data": "WarehouseName" },
                {
                    "data": "Description",
                    "render": function (data, type, row) {
                        if (!data) return "";

                        if (type === "display") {

                            if (data.length > 30) {
                                return `<span class="description-tooltip" data-bs-toggle="tooltip" data-bs-placement="top" title="${data.replace(/"/g, '&quot;')}">${data.substr(0, 30)}...</span>`;
                            } else {

                                return `<span class="description-tooltip" data-bs-toggle="tooltip" data-bs-placement="top" title="${data.replace(/"/g, '&quot;')}">${data}</span>`;
                            }
                        }
                        return data;
                    }
                },
                {
                    "data": null,
                    "render": function (data, type, row) {
                        return `
                        <div class="d-flex justify-content-center gap-1">
                            <button class="btn btn-sm btn-primary view-btn" data-id="${row.SectionId}" data-bs-toggle="tooltip" title="View Section">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-warning edit-btn" data-id="${row.SectionId}" data-bs-toggle="tooltip" title="Edit Section">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button class="btn btn-sm btn-danger delete-btn" data-id="${row.SectionId}" data-bs-toggle="tooltip" title="Delete Section">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        `;
                    },
                    "orderable": false,
                    "searchable": false
                }
            ],
            columnDefs: [
                { orderable: false, targets: "_all" },
                { className: "text-center", targets: "_all" },
            ],
            "drawCallback": function (settings) {

                setTimeout(function() {
                    initTooltips();
                }, 100);
            },
            "initComplete": function (settings, json) {

                setTimeout(function() {
                    initTooltips();
                }, 100);
            }
        });

        // --- Checkbox Selection Tracking ---
        $("#sectionTable").on("change", ".section-checkbox", function () {
            let id = $(this).val();
            if ($(this).prop("checked")) {
                selectedSectionIds.add(parseInt(id));
            } else {
                selectedSectionIds.delete(parseInt(id));
            }


            let total = $(".section-checkbox").length;
            let checked = $(".section-checkbox:checked").length;

            if (total > 0 && total === checked) {
                $("#selectAllSection").prop("checked", true);
            } else {
                $("#selectAllSection").prop("checked", false);
            }
        });

        // --- Select All functionality ---
        $("#selectAllSection").on("change", function () {
            let isChecked = $(this).prop("checked");
            $(".section-checkbox").prop("checked", isChecked).trigger("change");
        });

        // --- Add Section ---
        $("#btnAddSection").on("click", function () {
            loadWarehouses();
            $("#addSectionModal").modal("show");
            // Get next Section code
            $.get("/Inventory/GetNextSectionCodeAsyncSK", function (res) {
                if (res.success && res.code) {
                    $("#SectionCodeSk").val(res.code);
                } else {
                    Swal.fire("Error", res.message || "Next Section Code not found!", "error");
                }
            });
        });

        // --- Save Section ---
        $("#addSectionForm").on("submit", function (e) {
            e.preventDefault();

            let formData = $(this).serialize();

            $.post("/Inventory/AddSection", formData, function (res) {
                if (res.success) {
                    $("#addSectionModal").modal("hide");
                    $("#addSectionForm")[0].reset();
                    $('#sectionTable').DataTable().ajax.reload(null, false);
                    Swal.fire({
                        title: "Success",
                        text: res.message,
                        icon: "success",
                        showConfirmButton: false,
                        timer: 2000
                    });
                } else {
                    Swal.fire({
                        title: "Error",
                        text: res.message,
                        icon: "error",
                        confirmButtonText: "OK"
                    });
                }
            }).fail(function () {
                Swal.fire({
                    title: "Error",
                    text: "Error saving section!",
                    icon: "error",
                    confirmButtonText: "OK"
                });
            });
        });

        // --- Edit Section ---
        $("#sectionTable").on("click", ".edit-btn", function () {
            var id = $(this).data("id");

            $.get("/Inventory/GetSectionByIdSK", { id: id }, function (res) {
                if (res.success) {
                    $("#EditSectionId").val(res.data.SectionId);
                    $("#EditSectionCode").val(res.data.SectionCode);
                    $("#EditSectionName").val(res.data.SectionName);
                    $("#EditDescription").val(res.data.Description);


                    loadWarehousesForEdit(res.data.WarehouseCode);

                    $("#editSectionModal").modal("show");
                } else {
                    Swal.fire("Error", res.message, "error");
                }
            }).fail(function () {
                Swal.fire("Error", "Error loading section details.", "error");
            });
        });

        // --- Update Section Submit ---
        $("#editSectionForm").on("submit", function (e) {
            e.preventDefault();

            let formData = $(this).serialize();

            $.post("/Inventory/UpdateSectionSK", formData, function (res) {
                if (res.success) {
                    $("#editSectionModal").modal("hide");
                    $('#sectionTable').DataTable().ajax.reload(null, false);

                    Swal.fire({
                        title: "Updated!",
                        text: res.message,
                        icon: "success",
                        timer: 2000, // 2 seconds
                        showConfirmButton: false
                    });
                } else {
                    Swal.fire("Error", res.message, "error");
                }
            }).fail(function () {
                Swal.fire("Error", "Error updating section!", "error");
            });
        });

        // --- View Section ---
        $("#sectionTable").on("click", ".view-btn", function () {
            var id = $(this).data("id");

            $.get("/Inventory/GetSectionByIdSK", { id: id }, function (res) {
                if (res.success) {
                    $("#ViewSectionCode").val(res.data.SectionCode);
                    $("#ViewSectionName").val(res.data.SectionName);
                    $("#ViewDescription").val(res.data.Description);
                    $("#ViewWarehouseName").val(res.data.WarehouseName);

                    $("#viewSectionModal").modal("show");
                } else {
                    Swal.fire("Error", res.message, "error");
                }
            }).fail(function () {
                Swal.fire("Error", "Error loading section details.", "error");
            });
        });

        // ✅ Load warehouses for Edit
        function loadWarehousesForEdit(selectedCode) {
            $.get("/Inventory/GetWarehousesListSK", function (data) {
                var ddl = $("#EditWarehouseCode");
                ddl.empty().append('<option value="">-- Select Warehouse --</option>');
                $.each(data, function (i, item) {
                    ddl.append(`<option value="${item.WarehouseCode}">${item.WarehouseName}</option>`);
                });
                ddl.val(selectedCode).trigger("change");
            }).fail(function () {
                Swal.fire("Error", "Error loading warehouses.", "error");
            });
        }

        // ✅ Load Warehouses
        function loadWarehouses(selectedCode = "") {
            $.get("/Inventory/GetWarehousesListSK", function (data) {
                var ddl = $("#WarehouseCodes");
                ddl.empty().append('<option value="">-- Select Warehouse --</option>');
                $.each(data, function (i, item) {
                    ddl.append(`<option value="${item.WarehouseCode}">${item.WarehouseName}</option>`);
                });
                if (selectedCode) ddl.val(selectedCode).trigger('change');
            }).fail(function () {
                Swal.fire("Error", "Error loading warehouses.", "error");
            });
        }

        // --- Delete Section ---
        // --- Delete Section ---
        $("#sectionTable").on("click", ".delete-btn", function () {
            var sectionId = $(this).data("id");

            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: "/Inventory/DeleteSectionSK",
                        type: "POST",
                        data: { sectionId: sectionId },
                        success: function (res) {
                            if (res.success) {
                                table.ajax.reload();

                                Swal.fire({
                                    title: "Deleted!",
                                    text: res.message,
                                    icon: "success",
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                            } else {
                                Swal.fire({
                                    title: "Error",
                                    text: res.message,
                                    icon: "error",
                                    timer: 2500,
                                    showConfirmButton: false
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                title: "Error",
                                text: "Error deleting section",
                                icon: "error",
                                timer: 2500,
                                showConfirmButton: false
                            });
                        }
                    });
                }
            });
        });

        // Description column pe hover karne par tooltip show karein
        $(document).on('mouseenter', '.description-tooltip', function() {

        });

        // Initial tooltip initialization
        setTimeout(function() {
            initTooltips();
        }, 500);
    });
</script>