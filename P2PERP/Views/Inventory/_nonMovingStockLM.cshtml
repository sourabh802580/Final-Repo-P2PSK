<style>
    .circular-glass-btn {
        width: 43px;
        height: 38px;
        border-radius: 5px;
        background: rgba(59, 217, 56);
        backdrop-filter: blur(4px);
        border: 1px solid rgba(0, 100, 0, 0.8);
        color: #fff;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 1.1rem;
        padding: 0;
    }

        .circular-glass-btn:hover {
            background: rgba(0, 180, 0, 0.8);
            color: #ffffff;
        }

    #nonMovingStockTable thead th {
        text-align: center;
        vertical-align: middle;
    }

    #nonMovingStockTable td {
        text-align: center;
        vertical-align: middle;
    }

    div.dt-buttons {
        margin-top: 3px;
        margin-bottom: 5px;
    }
</style>


<div class="container mt-4 card shadow-sm">
    <h3 class="text-primary text-center fw-bolder mt-3">Non Moving Stock</h3>
    <table id="nonMovingStockTable" class="table table-bordered table-striped wrap">
        <thead class="table-dark text-center">
            <tr>
                <th><input type="checkbox" id="selectAllNonMoving"></th>
                <th>Sr.No</th>
                <th>Item Code</th>
                <th>Item Name</th>
                <th>Quantity</th>
                <th>Added Date</th>
                <th>Expiry Date</th>
                <th>Bin Name</th>
                <th>Action</th>
            </tr>
        </thead>
    </table>

</div>
<script>
// --- Toastr Global Options ---
toastr.options = {
    closeButton: true,
    progressBar: true,
    preventDuplicates: true,
    newestOnTop: true,
    positionClass: "toast-top-right",
    timeOut: "3000" // 3 seconds
};

// --- Globals ---
    // Create a Set to store selected ItemCodes
    let selectedNonMovingIds = new Set();

// --- Initialize DataTable ---
var nonMovingTable = $('#nonMovingStockTable').DataTable({
    ajax: {
        url: '@Url.Action("NonMovingStockJsonLM","Inventory")',
        type: "GET",
        datatype: "json"
    },
    columns: [
        {
            data: null,
            orderable: false,
            className: "text-center",
            render: function (data, type, row, meta) {
                return `<input type="checkbox" class="row-checkbox-nonmoving" data-id="${row.ItemCode}">`;
            }
        },
        {
            data: null,
            orderable: false,
            className: "text-center",
            render: function (data, type, row, meta) {
                return meta.row + 1;
            }
        },
        { data: "ItemCode", orderable: false, className: "text-center" },
        { data: "ItemName", orderable: false, className: "text-center" },
        { data: "CurrentQty", orderable: false, className: "text-center" },
        {
            data: "AddedDate",
            orderable: false,
            className: "text-center",
            render: function (data) {
                if (!data) return "";

                // .NET JSON format: /Date(1736985600000)/
                var match = /Date\((\d+)\)/.exec(data);
                if (match) {
                    var dt = new Date(parseInt(match[1], 10));
                    return dt.toLocaleDateString("en-GB"); // dd/mm/yyyy
                }

                // ISO string fallback
                var dt2 = new Date(data);
                if (!isNaN(dt2.getTime())) {
                    return dt2.toLocaleDateString("en-GB");
                }

                return data;
            }
        },
        {
            data: "ExpiryDate",
            orderable: false,
            className: "text-center",
            render: function (data) {
                if (!data) return "";

                var match = /Date\((\d+)\)/.exec(data);
                if (match) {
                    var dt = new Date(parseInt(match[1], 10));
                    return dt.toLocaleDateString("en-GB");
                }

                var dt2 = new Date(data);
                if (!isNaN(dt2.getTime())) {
                    return dt2.toLocaleDateString("en-GB");
                }

                return data;
            }
        },
        {
            data: null,
            orderable: false,
            className: "text-center",
            render: function (data, type, row) {
                return `<span data-bincode="${row.BinCode}">${row.BinName}</span>`;
            }
        },
        {
            data: null,
            orderable: false,
            className: "text-center",
            render: function (data, type, row) {
                return `
                <button class="btn btn-sm transfer-btn circular-glass-btn bg-danger" data-id="${row.ItemCode}">
                    <i class="bi bi-box-arrow-in-right"
                       title="Transfer Dead Stock"
                       data-bs-toggle="tooltip"
                       data-bs-placement="top"></i>
                </button>`;
            }
        }
    ],

    dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center mt-2"ip>',
    buttons: [
        // --- Print ---
        {
            extend: 'print',
            text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
            title: `Non-Moving Stock - ${moment().format("YYYY-MM-DD")}`,
            exportOptions: {
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: function (idx, data, node) {
                    return selectedNonMovingIds.has(data.ItemCode);
                },
                format: {
                    body: function (data, row, column, node) {
                        if (column === 7) return nonMovingTable.row(row).data().BinName;
                        if (column === 1) {
                            return nonMovingTable.rows({ filter: 'applied' }).indexes()
                                .filter(i => selectedNonMovingIds.has(nonMovingTable.row(i).data().ItemCode))
                                .indexOf(row) + 1;
                        }
                        return data;
                    }
                }
            },
            action: function (e, dt, button, config) {
                if (selectedNonMovingIds.size === 0) {
                    toastr.warning("Please select at least one item before printing.");
                    return;
                }
                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
            },
            customize: function (win) {
                $(win.document.body).find('table')
                    .css('border', '1px solid black')
                    .css('border-collapse', 'collapse')
                    .find('th, td')
                    .css('border', '1px solid black')
                    .css('padding', '5px');
                $(win.document.body).find('th')
                    .css('background-color', 'black')
                    .css('color', 'white');
            }
        },

        // --- PDF ---
        {
            extend: 'pdfHtml5',
            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
            title: `Non-Moving Stock - ${moment().format("YYYY-MM-DD")}`,
            exportOptions: {
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: function (idx, data, node) {
                    return selectedNonMovingIds.has(data.ItemCode);
                },
                format: {
                    body: function (data, row, column, node) {
                        if (column === 7) return nonMovingTable.row(row).data().BinName;
                        if (column === 1) {
                            return nonMovingTable.rows({ filter: 'applied' }).indexes()
                                .filter(i => selectedNonMovingIds.has(nonMovingTable.row(i).data().ItemCode))
                                .indexOf(row) + 1;
                        }
                        return data;
                    }
                }
            },
            action: function (e, dt, button, config) {
                if (selectedNonMovingIds.size === 0) {
                    toastr.warning("Please select at least one item before exporting.");
                    return;
                }
                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
            },
            customize: function (doc) {
                // --- Table header style ---
                doc.styles.tableHeader.fillColor = 'black';
                doc.styles.tableHeader.color = 'white';
                doc.styles.tableHeader.alignment = 'center';
                doc.styles.tableHeader.bold = true;

                // --- Table layout (borders, padding) ---
                var objLayout = {};
                objLayout['hLineWidth'] = function (i) { return 0.5; };
                objLayout['vLineWidth'] = function (i) { return 0.5; };
                objLayout['hLineColor'] = function (i) { return '#000000'; };
                objLayout['vLineColor'] = function (i) { return '#000000'; };
                objLayout['paddingLeft'] = function (i) { return 5; };
                objLayout['paddingRight'] = function (i) { return 5; };
                doc.content[1].layout = objLayout;

                // ✅ Add "Generated Date" just below the title
                var generatedDate = moment().format("YYYY-MM-DD");
                doc.content.splice(1, 0, {
                    text: `Generated Date: ${generatedDate}`,
                    alignment: 'center',
                    margin: [0, 0, 0, 10],
                    fontSize: 10,
                    italics: true
                });

                // ✅ Center align the table in PDF
                // make all columns auto-width to help centering
                doc.content[2].table.widths = Array(
                    doc.content[2].table.body[0].length
                ).fill('*');

                // align table center
                doc.content[2].alignment = 'center';

                // add little margin from top
                doc.content[2].margin = [0, 10, 0, 0];
            }
        },

        // --- Excel ---
        {
            extend: 'excelHtml5',
            text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
            title: `Non-Moving Stock - ${moment().format("YYYY-MM-DD")}`,
            exportOptions: {
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: function (idx, data, node) {
                    return selectedNonMovingIds.has(data.ItemCode);
                },
                format: {
                    body: function (data, row, column, node) {
                        if (column === 7) return nonMovingTable.row(row).data().BinName;
                        if (column === 1) {
                            return nonMovingTable.rows({ filter: 'applied' }).indexes()
                                .filter(i => selectedNonMovingIds.has(nonMovingTable.row(i).data().ItemCode))
                                .indexOf(row) + 1;
                        }
                        return data;
                    }
                }
            },
            action: function (e, dt, button, config) {
                if (selectedNonMovingIds.size === 0) {
                    toastr.warning("Please select at least one item before exporting Excel.");
                    return;
                }
                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
            }
        },

        // --- CSV ---
        {
            extend: 'csvHtml5',
            text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
            title: `Non-Moving Stock - ${moment().format("YYYY-MM-DD")}`,
            exportOptions: {
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: function (idx, data, node) {
                    return selectedNonMovingIds.has(data.ItemCode);
                },
                format: {
                    body: function (data, row, column, node) {
                        if (column === 7) return nonMovingTable.row(row).data().BinName;
                        if (column === 1) {
                            return nonMovingTable.rows({ filter: 'applied' }).indexes()
                                .filter(i => selectedNonMovingIds.has(nonMovingTable.row(i).data().ItemCode))
                                .indexOf(row) + 1;
                        }
                        return data;
                    }
                }
            },
            action: function (e, dt, button, config) {
                if (selectedNonMovingIds.size === 0) {
                    toastr.warning("Please select at least one item before exporting CSV.");
                    return;
                }
                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
            }
        }
    ]
});

    // --- Row checkbox logic ---
    $('#nonMovingStockTable tbody').on('change', '.row-checkbox-nonmoving', function () {
        const id = $(this).data('id');
        if ($(this).is(':checked')) selectedNonMovingIds.add(id);
        else selectedNonMovingIds.delete(id);

        const allChecked = $('.row-checkbox-nonmoving').length === $('.row-checkbox-nonmoving:checked').length;
        $('#selectAllNonMoving').prop('checked', allChecked);
    });

    // --- Select All checkbox logic ---
    $('#selectAllNonMoving').on('change', function () {
        const isChecked = $(this).is(':checked');
        $('.row-checkbox-nonmoving').prop('checked', isChecked).trigger('change');
    });


    // ======================
    // Non-Moving Stock Date Range Filter (Integrated)
    // ======================
    $("#nonMovingStockTable_wrapper").prepend(`
  <div class="input-group mb-2 mt-5" style="max-width: 280px;">
    <span class="input-group-text bg-primary text-white">
      <i class="bi bi-calendar-date"></i>
    </span>
    <input type="text" id="returnGoodsRange" class="form-control" placeholder="Select date range" readonly />
  </div>
`);

    $('#returnGoodsRange').daterangepicker({
        autoUpdateInput: false,
        locale: { cancelLabel: 'Clear' },
        ranges: {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        }
    });

    $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
        if (settings.nTable.id !== "nonMovingStockTable") return true;

        var dateRange = $('#returnGoodsRange').val();
        if (!dateRange) return true;

        var minMax = dateRange.split(' to ');
        var min = moment(minMax[0], 'YYYY-MM-DD');
        var max = moment(minMax[1], 'YYYY-MM-DD');

        var date = moment(data[5], 'YYYY-MM-DD'); // AddedDate column index = 5
        return date.isBetween(min, max, 'day', '[]');
    });

    $('#returnGoodsRange').on('apply.daterangepicker', function (ev, picker) {
        $(this).val(picker.startDate.format('YYYY-MM-DD') + ' to ' + picker.endDate.format('YYYY-MM-DD'));
        nonMovingTable.draw();
    });

    $('#returnGoodsRange').on('cancel.daterangepicker', function () {
        $(this).val('');
        nonMovingTable.draw();
    });


// --- Transfer Button Click with Bin Dropdown ---
$('#nonMovingStockTable').on('click', '.transfer-btn', function () {
    var row = $(this).closest('tr');
    var itemCode = $(this).data('id');

    var binSpan = row.find('td:eq(7) span');
    var binNames = binSpan.text().split(',').map(b => b.trim());
    var binCodes = binSpan.data('bincode').split(',').map(b => b.trim());

    if (!binNames.length || !binCodes.length) {
        toastr.error("No bin found for this item.", "Error");
        return;
    }

    var inputOptions = {};
    for (var i = 0; i < binCodes.length; i++) {
        inputOptions[binCodes[i]] = binNames[i];
    }

    Swal.fire({
        title: 'Select Bin',
        input: 'select',
        inputOptions: inputOptions,
        showCancelButton: true,
        confirmButtonText: 'OK',
        cancelButtonText: 'Cancel',
        cancelButtonColor: '#d33' // 🔴 red / danger color
    }).then((binResult) => {
        if (!binResult.isConfirmed) return;
        var selectedBinCode = binResult.value;
   

        Swal.fire({
            title: 'Transfer Dead Stock Quantity',
            input: 'number',
            inputAttributes: { min: 1 },
            showCancelButton: true,
            confirmButtonText: 'Transfer',
            cancelButtonText: 'Cancel',
            cancelButtonColor: '#d33', // 🔴 red / danger color
            showLoaderOnConfirm: true,
        preConfirm: (qty) => {
            if (!qty || qty <= 0) {
                Swal.getInput().classList.add('is-invalid');
                Swal.showValidationMessage("Please enter a valid quantity");
                return false;
            }
            return $.ajax({
                url: '@Url.Action("TransferNonMovingToMovingByBinLM","Inventory")',
                type: 'POST',
                data: { itemCode: itemCode, transferQty: qty, binCode: selectedBinCode },
                dataType: 'json'
            }).then(response => {
                if (!response.success) {
                    Swal.showValidationMessage(response.message || "Transfer failed");
                }
                return response;
            }).catch(error => {
                Swal.showValidationMessage(`Request failed: ${error.responseText || error.statusText}`);
            });
        },
        didOpen: () => { Swal.getInput().focus(); }
    }).then((result) => {
        if (result.isConfirmed && result.value) {

            // Success message
            if (result.value.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Item transferred successfully!',
                    showConfirmButton: false,
                    timer: 1500  // auto-close after 1.5 seconds
                });
            }
            // Failure message
            else {
                Swal.fire({
                    icon: 'error',
                    title: result.value.message || 'Transfer failed',
                    showConfirmButton: false,
                    timer: 1500  // auto-close after 1.5 seconds
                });
            }

            // Reload DataTables without resetting pagination
            nonMovingTable.ajax.reload(null, false);
            currentStockTable.ajax.reload(null, false);
        }
    });
});






    // Initialize Bootstrap tooltips
    $('body').tooltip({
        selector: '[title]', // Jo element ke paas title attribute hai unpe tooltip lagega
        trigger: 'hover',    // hover par tooltip dikhega
        placement: 'top'     // upar tooltip dikhe
    });


    $(document).ready(function () {
        // --- Initialize Bootstrap tooltips for static elements ---
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // --- Re-initialize tooltips after every DataTable draw (dynamic rows) ---
        nonMovingTable.on('draw', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    });

});
</script>











