<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="flex-grow-1 text-center">
        <h4 class="mb-0 h3 text-primary">Bin List</h4>
    </div>
    <button class="btn btn-success" id="btnAddbin">
        <i class="bi bi-plus-circle"></i> Add Bin
    </button>
</div>

<!-- Responsive wrapper -->
<div class="table-responsive">
    <table id="binTable" class="table table-bordered table-hover align-middle w-100">
        <thead class="table-dark text-center">
            <tr>
                <th><input type="checkbox" id="selectAllBin"></th>
                <th>Sr No</th>
                <th>Bin Id</th>
                <th>Bin Code</th>
                <th>Row Code</th>
                <th>Row Name</th>
                <th>Bin Name</th>
                <th>Item Name</th>
                <th>Max Quantity</th>
                <th>Current Items</th>
                <th>Added Date</th>
                <th>Added By</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<!-- Add Bin Modal -->
<div class="modal fade" id="addBinModal" tabindex="-1" aria-labelledby="addBinModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="modal-title text-white h3 mb-3 w-100 text-center" id="addBinModalLabel">Add New Bin</h5>
                <button type="button" class="btn-close  h3 mb-3 btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form id="addBinForm" class="row g-3">
                    <!-- Bin Code -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="addBinCode" name="BinCode" required readonly>
                                <label for="addBinCode">Bin Code</label>
                            </div>
                        </div>
                    </div>

                    <!-- Bin Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-archive-drawer-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="addBinName" name="BinName" required>
                                <label for="addBinName">Bin Name <span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>

                    <!-- Item Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-box-3-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="addItemCode" name="ItemCode" required>
                                    <option value="">-- Select Items --</option>
                                </select>
                                <label for="addItemCode">Item Name <span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>

                    <!-- Max Quantity -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-numbers-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="number" class="form-control" id="addMaxQuantity" name="MaxQuantity" min="1">
                                <label for="addMaxQuantity">Max Quantity <span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>

                    <!-- Warehouse -->
                    <div class="col-md-3">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="addWarehouse" name="WarehouseId" required>
                                    <option value="">-- Select Warehouse --</option>
                                </select>
                                <label for="addWarehouse">Warehouse <span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>

                    <!-- Section -->
                    <div class="col-md-3">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="addSection" name="SectionId" required>
                                    <option value="">-- Select Section --</option>
                                </select>
                                <label for="addSection">Section <span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>

                    <!-- Rack -->
                    <div class="col-md-3">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-stack-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="addRack" name="RackId" required>
                                    <option value="">-- Select Rack --</option>
                                </select>
                                <label for="addRack">Rack <span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>

                    <!-- Row -->
                    <div class="col-md-3">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-table-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="addRow" name="RowId" required>
                                    <option value="">-- Select Row --</option>
                                </select>
                                <label for="addRow">Row <span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="addDescription" name="Description" rows="3"></textarea>
                                <label for="addDescription">Description</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                @*<button type="button" class="btn btn-outline-danger bg-danger text-white px-4" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-2"></i>Close
                </button>*@
                <button type="submit" form="addBinForm" class="btn btn-success px-4">
                    <i class="bi bi-check-circle me-2 text-white"></i>Save
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Bin Modal -->
<div class="modal fade" id="editBinModal" tabindex="-1" aria-labelledby="editBinModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="modal-title text-white h3 mb-3 w-100 text-center" id="editBinModalLabel">Update Bin</h5>
                <button type="button" class="btn-close  h3 mb-3 btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form id="editBinForm" class="row g-3">
                    <input type="hidden" id="editBinId" name="BinId" />

                    <!-- Bin Code -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="editBinCode" name="BinCode" required readonly>
                                <label for="editBinCode">Bin Code</label>
                            </div>
                        </div>
                    </div>

                    <!-- Bin Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-archive-drawer-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="editBinName" name="BinName" required>
                                <label for="editBinName">Bin Name <span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>

                    <!-- Item Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-box-3-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <select class="form-select" id="editItemCode" name="ItemCode" required>
                                    <option value="">-- Select Item --</option>
                                </select>
                                <label for="editItemCode">Item Name <span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>

                    <!-- Max Quantity -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-numbers-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="number" class="form-control" id="editMaxQuantity" name="MaxQuantity" min="1">
                                <label for="editMaxQuantity">Max Quantity <span class="text-danger">*</span></label>
                            </div>
                        </div>
                    </div>

                    <!-- Warehouse (Readonly) -->
                    <div class="col-md-3">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="editWarehouseNameForBin" readonly>
                                <input type="hidden" id="editWarehouseCode" name="WarehouseId">
                                <label for="editWarehouseName">Warehouse</label>
                            </div>
                        </div>
                    </div>

                    <!-- Section (Readonly) -->
                    <div class="col-md-3">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="editSectionNameForBin" readonly>
                                <input type="hidden" id="editSectionCode" name="SectionId">
                                <label for="editSectionName">Section</label>
                            </div>
                        </div>
                    </div>

                    <!-- Rack (Readonly) -->
                    <div class="col-md-3">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-stack-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="editRackNameForBin" readonly>
                                <input type="hidden" id="editRackCode" name="RackId">
                                <label for="editRackName">Rack</label>
                            </div>
                        </div>
                    </div>

                    <!-- Row (Readonly) -->
                    <div class="col-md-3">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-table-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="editRowNameForBin" readonly>
                                <input type="hidden" id="editRowCode" name="RowId">
                                <label for="editRowName">Row</label>
                            </div>
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="editDescriptionForBin" name="Description" rows="3"></textarea>
                                <label for="editDescription">Description</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                @*<button type="button" class="btn btn-outline-danger bg-danger text-white px-4" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-2"></i>Close
                </button>*@
                <button type="submit" form="editBinForm" class="btn btn-primary px-4">
                    <i class="bi bi-check-circle me-2 text-white"></i>Update
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Bin Modal -->
<div class="modal fade" id="viewBinModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white position-relative">
                <h5 class="d-flex justify-content-center h3 mb-3 text-center ms-auto text-white">
                    Bin Details
                </h5>
                <button type="button" class="btn-close h3 mb-3 btn-close-white" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body">
                <form class="row g-3">
                    <!-- Bin Code -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-barcode-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vBinCode" readonly>
                                <label for="vBinCode">Bin Code</label>
                            </div>
                        </div>
                    </div>

                    <!-- Bin Name -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-archive-drawer-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vBinName" readonly>
                                <label for="vBinName">Bin Name</label>
                            </div>
                        </div>
                    </div>

                    <!-- Warehouse -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-building-4-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vWarehouse" readonly>
                                <label for="vWarehouse">Warehouse</label>
                            </div>
                        </div>
                    </div>

                    <!-- Section -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-layout-masonry-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vSection" readonly>
                                <label for="vSection">Section</label>
                            </div>
                        </div>
                    </div>

                    <!-- Rack -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-shelf-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vRack" readonly>
                                <label for="vRack">Rack</label>
                            </div>
                        </div>
                    </div>

                    <!-- Row -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-list-check-2"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vRow" readonly>
                                <label for="vRow">Row</label>
                            </div>
                        </div>
                    </div>

                    <!-- Item -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-box-3-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vItem" readonly>
                                <label for="vItem">Item</label>
                            </div>
                        </div>
                    </div>

                    <!-- Max Quantity -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-number-9"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vMaxQuantity" readonly>
                                <label for="vMaxQuantity">Max Quantity</label>
                            </div>
                        </div>
                    </div>

                    <!-- Current Items -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-inbox-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vCurrentItems" readonly>
                                <label for="vCurrentItems">Current Items</label>
                            </div>
                        </div>
                    </div>

                    <!-- Description -->
                    <div class="col-12">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-file-text-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <textarea class="form-control" id="vBDescription" rows="2" readonly></textarea>
                                <label for="vBDescription">Description</label>
                            </div>
                        </div>
                    </div>

                    <!-- Added Date -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-calendar-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="vBAddedDate" readonly>
                                <label for="vBAddedDate">Added Date</label>
                            </div>
                        </div>
                    </div>

                    <!-- Added By -->
                    <div class="col-md-6">
                        <div class="input-group input-group-merge mb-3">
                            <span class="input-group-text"><i class="ri-user-3-line"></i></span>
                            <div class="form-floating form-floating-outline">
                                <input type="text" class="form-control" id="demo" readonly>
                                <label for="demo">Added By</label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        // Initialize DataTable
        var table = $('#binTable').DataTable({
            "processing": true,
            paging: true,
            "serverSide": false,
            "ajax": {
                "url": "/Inventory/BinsSKK",
                "type": "GET",
                "datatype": "json"
            },
            dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',

            buttons: [
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    title: '',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.selectRow').is(':checked');
                        },
                        columns: ':visible:not(:first-child):not(:last-child)'
                    },
                    action: function (e, dt, button, config) {
                        if ($('.selectRow:checked').length === 0) {
                            toastr.warning("Please select at least one row!");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                    customize: function (win) {
                        let serialNumber = 1;
                        $(win.document.body).find('table tbody tr').each(function() {
                            $(this).find('td:eq(0)').text(serialNumber++);
                        });

                        $(win.document.body).prepend(
                            '<h2 style="text-align: center; margin-bottom: 10px;">Bin List</h2>' +
                            '<p style="text-align: center; margin-bottom: 20px; color: #666;">Generated on: ' + new Date().toLocaleDateString("en-GB") + '</p>' +
                            '<hr style="margin-bottom: 20px;">'
                        );

                        $(win.document.body).find('table')
                            .css('border', '1px solid black')
                            .css('border-collapse', 'collapse')
                            .find('th, td')
                            .css('border', '1px solid black')
                            .css('padding', '5px');

                        $(win.document.body).find('th')
                            .css('background-color', 'black')
                            .css('color', 'white');
                    }
                },
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    title: '',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.selectRow').is(':checked');
                        },
                        columns: ':visible:not(:first-child):not(:last-child)'
                    },
                    action: function (e, dt, button, config) {
                        if ($('.selectRow:checked').length === 0) {
                            toastr.warning("Please select at least one row!");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    customize: function (doc) {
                        let selectedData = [];
                        $('#binTable').DataTable().rows().every(function() {
                            let rowData = this.data();
                            if ($(this.node()).find('input.selectRow').is(':checked')) {
                                selectedData.push(rowData);
                            }
                        });

                        doc.content = [];

                        doc.content.push(
                            {
                                text: 'Bin List',
                                alignment: 'center',
                                fontSize: 16,
                                bold: true,
                                margin: [0, 0, 0, 10]
                            },
                            {
                                text: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                                alignment: 'center',
                                fontSize: 10,
                                color: '#666',
                                margin: [0, 0, 0, 15]
                            }
                        );

                        let tableBody = [];

                        tableBody.push([
                            { text: 'Sr No', style: 'tableHeader', alignment: 'center' },
                            { text: 'Bin Code', style: 'tableHeader', alignment: 'center' },
                            { text: 'Row Code', style: 'tableHeader', alignment: 'center' },
                            { text: 'Row Name', style: 'tableHeader', alignment: 'center' },
                            { text: 'Bin Name', style: 'tableHeader', alignment: 'center' },
                            { text: 'Item Name', style: 'tableHeader', alignment: 'center' },
                            { text: 'Max Quantity', style: 'tableHeader', alignment: 'center' },
                            { text: 'Current Items', style: 'tableHeader', alignment: 'center' },
                            { text: 'Added Date', style: 'tableHeader', alignment: 'center' },
                            { text: 'Added By', style: 'tableHeader', alignment: 'center' }
                        ]);

                        selectedData.forEach(function(row, index) {
                            let addedDate = "";
                            if (row.AddedDate) {
                                let match = /Date\((\d+)\)/.exec(row.AddedDate);
                                if (match) {
                                    let dt = new Date(parseInt(match[1], 10));
                                    addedDate = dt.toLocaleDateString("en-GB");
                                } else {
                                    let dt2 = new Date(row.AddedDate);
                                    if (!isNaN(dt2.getTime())) {
                                        addedDate = dt2.toLocaleDateString("en-GB");
                                    }
                                }
                            }

                            tableBody.push([
                                { text: (index + 1).toString(), alignment: 'center', fontSize: 9 },
                                { text: row.BinCode || '-', alignment: 'center', fontSize: 9 },
                                { text: row.RowCode || '-', alignment: 'center', fontSize: 9 },
                                { text: row.RowName || '-', alignment: 'center', fontSize: 9 },
                                { text: row.BinName || '-', alignment: 'center', fontSize: 9 },
                                { text: row.ItemName || '-', alignment: 'center', fontSize: 9 },
                                { text: row.MaxQuantity || '-', alignment: 'center', fontSize: 9 },
                                { text: row.CurrentItems || '-', alignment: 'center', fontSize: 9 },
                                { text: addedDate || '-', alignment: 'center', fontSize: 9 },
                                { text: row.AddedBy || '-', alignment: 'center', fontSize: 9 }
                            ]);
                        });

                        doc.content.push({
                            table: {
                                headerRows: 1,
                                widths: ['8%', '12%', '12%', '12%', '12%', '12%', '10%', '10%', '10%', '10%'],
                                body: tableBody
                            },
                            layout: {
                                hLineWidth: function(i, node) { return 0.5; },
                                vLineWidth: function(i, node) { return 0.5; },
                                hLineColor: function(i, node) { return '#000000'; },
                                vLineColor: function(i, node) { return '#000000'; },
                                paddingLeft: function(i, node) { return 5; },
                                paddingRight: function(i, node) { return 5; }
                            }
                        });

                        doc.styles = {
                            tableHeader: {
                                bold: true,
                                fontSize: 10,
                                color: 'white',
                                fillColor: '#000000',
                                alignment: 'center'
                            }
                        };

                        doc.defaultStyle = {
                            fontSize: 9,
                            alignment: 'center'
                        };
                    }
                },
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    title: 'Bin List',
                    message: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.selectRow').is(':checked');
                        },
                        columns: ':visible:not(:first-child):not(:last-child)'
                    },
                    action: function (e, dt, button, config) {
                        if ($('.selectRow:checked').length === 0) {
                            toastr.warning("Please select at least one row!");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                },
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    title: 'Bin List',
                    message: 'Generated on: ' + new Date().toLocaleDateString("en-GB"),
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('input.selectRow').is(':checked');
                        },
                        columns: ':visible:not(:first-child):not(:last-child)'
                    },
                    action: function (e, dt, button, config) {
                        if ($('.selectRow:checked').length === 0) {
                            toastr.warning("Please select at least one row!");
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    }
                }
            ],

            "columns": [
                {
                    "data": "BinId",
                    "render": function (data) {
                        return '<input type="checkbox" class="selectRow" value="' + data + '">';
                    },
                    "orderable": false
                },
                {
                    "data": null,
                    "render": function (data, type, row, meta) {
                        return meta.row + 1;
                    },
                    "orderable": false
                },
                { "data": "BinId", visible: false },
                { "data": "BinCode" },
                { "data": "RowCode" },
                { "data": "RowName" },
                { "data": "BinName" },
                { "data": "ItemName" },
                { "data": "MaxQuantity" },
                { "data": "CurrentItems" },
                {
                    "data": "AddedDate",
                    "render": function (data) {
                        if (!data) return "";
                        var match = /Date\((\d+)\)/.exec(data);
                        if (match) {
                            var dt = new Date(parseInt(match[1], 10));
                            return dt.toLocaleDateString("en-GB");
                        }
                        var dt2 = new Date(data);
                        if (!isNaN(dt2.getTime())) {
                            return dt2.toLocaleDateString("en-GB");
                        }
                        return data;
                    }
                },
                { "data": "AddedBy" },
                {
                    "data": "BinId",
                    "render": function (data) {
                        return `
                       <div class="d-flex justify-content-center gap-1">
        <button class="btn btn-sm btn-primary view-bin" data-id="${data}"
            data-bs-toggle="tooltip" data-bs-placement="top" title="View Bin Details">
            <i class="bi bi-eye me-1"></i>
        </button>

        <button class="btn btn-sm btn-warning edit-bin" data-id="${data}"
            data-bs-toggle="tooltip" data-bs-placement="top" title="Edit Bin">
            <i class="bi bi-pencil-square"></i>
        </button>

        <button class="btn btn-sm btn-danger delete-bin" data-id="${data}"
            data-bs-toggle="tooltip" data-bs-placement="top" title="Delete Bin">
            <i class="bi bi-trash"></i>
        </button>
    </div>
                        `;
                    },
                    "orderable": false
                }
            ],
            columnDefs: [
                { orderable: false, targets: "_all" },
                { className: "text-center", targets: "_all" }
            ],
        });

        // Date Range Picker
        $("#binTable_wrapper").prepend(`
  <div class="input-group mb-2 mt-3" style="max-width: 280px;">
    <span class="input-group-text bg-primary text-white">
      <i class="bi bi-calendar-date"></i>
    </span>
    <input type="text" id="binDateRange" class="form-control" placeholder="Select date range" readonly />
  </div>
`);

        $('#binDateRange').daterangepicker({
            autoUpdateInput: false,
            locale: { cancelLabel: 'Clear' },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]

            }
        });

        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            if (settings.nTable.id !== "binTable") return true;

            var dateRange = $('#binDateRange').val();
            if (!dateRange) return true;

            var minMax = dateRange.split(' to ');
            var min = moment(minMax[0], 'YYYY-MM-DD');
            var max = moment(minMax[1], 'YYYY-MM-DD');

            var date = moment(data[10], 'DD/MM/YYYY');
            return date.isBetween(min, max, 'day', '[]');
        });

        $('#binDateRange').on('apply.daterangepicker', function (ev, picker) {
            $(this).val(picker.startDate.format('YYYY-MM-DD') + ' to ' + picker.endDate.format('YYYY-MM-DD'));
            $('#binTable').DataTable().draw();
        });

        $('#binDateRange').on('cancel.daterangepicker', function () {
            $(this).val('');
            $('#binTable').DataTable().draw();
        });

        // Select All
        $('#selectAllBin').on('click', function () {
            var isChecked = $(this).prop('checked');
            var table = $('#binTable').DataTable();
            $(table.rows({ page: 'current' }).nodes()).find('.selectRow').prop('checked', isChecked);
        });

        $('#binTable').on('change', '.selectRow', function () {
            var table = $('#binTable').DataTable();
            var total = table.rows({ page: 'current' }).nodes().to$().find('.selectRow').length;
            var checked = table.rows({ page: 'current' }).nodes().to$().find('.selectRow:checked').length;
            $('#selectAllBin').prop('checked', total === checked);
        });

        // Add Bin button
        $('#btnAddbin').on('click', function () {
            loadAddWarehouses();
            loadAddItems();
            $.get("/Inventory/GetNextBinCodeSKK", function (res) {
                if (res && res.BnextCode) {
                    $('#addBinCode').val(res.BnextCode);
                } else {
                    Swal.fire("Error", "Next bin code not found", "error");
                }
            });
            $("#addBinModal").modal("show");
        });

        // ✅ Load Items for Add Modal
        function loadAddItems() {
            $.ajax({
                url: '@Url.Action("GetItemsSKK", "Inventory")',
                type: 'GET',
                success: function (data) {
                    let $ddl = $("#addItemCode");
                    $ddl.empty().append('<option value="">-- Select Items --</option>');
                    $.each(data, function (i, item) {
                        $ddl.append('<option value="' + item.ItemCode + '">' + item.ItemName + '</option>');
                    });
                }
            });
        }

        // ✅ Load Warehouses for Add Modal
        function loadAddWarehouses() {
            $.ajax({
                url: '@Url.Action("GetWarehousesListSK", "Inventory")',
                type: 'GET',
                success: function (data) {
                    let $ddl = $("#addWarehouse");
                    $ddl.empty().append('<option value="">-- Select Warehouse --</option>');
                    $.each(data, function (i, item) {
                        $ddl.append('<option value="' + item.WarehouseCode + '">' + item.WarehouseName + '</option>');
                    });
                }
            });
        }

        // ✅ Load Sections based on Warehouse for Add Modal
        $("#addWarehouse").change(function () {
            let warehouseId = $(this).val();
            if (warehouseId) {
                $.ajax({
                    url: '@Url.Action("GetSectionsSKK", "Inventory")',
                    type: 'GET',
                    data: { warehouseCode: warehouseId },
                    success: function (data) {
                        let $ddl = $("#addSection");
                        $ddl.empty().append('<option value="">-- Select Section --</option>');
                        $.each(data, function (i, item) {
                            $ddl.append('<option value="' + item.SectionCode + '">' + item.SectionName + '</option>');
                        });
                        $("#addRack").empty().append('<option value="">-- Select Rack --</option>');
                    }
                });
            } else {
                $("#addSection").empty().append('<option value="">-- Select Section --</option>');
                $("#addRack").empty().append('<option value="">-- Select Rack --</option>');
            }
        });

        // ✅ Load Racks based on Section for Add Modal
        $("#addSection").change(function () {
            let sectionId = $(this).val();
            if (sectionId) {
                $.ajax({
                    url: '@Url.Action("GetRackss", "Inventory")',
                    type: 'GET',
                    data: { sectionCode: sectionId },
                    success: function (data) {
                        let $ddl = $("#addRack");
                        $ddl.empty().append('<option value="">-- Select Rack --</option>');
                        $.each(data, function (i, item) {
                            $ddl.append('<option value="' + item.RackCodes + '">' + item.RackNames + '</option>');
                        });
                    }
                });
            } else {
                $("#addRack").empty().append('<option value="">-- Select Rack --</option>');
            }
        });

        // ✅ Load Rows based on Rack for Add Modal
        $("#addRack").change(function () {
            let rackId = $(this).val();
            if (rackId) {
                $.ajax({
                    url: '@Url.Action("GetRowsSBK", "Inventory")',
                    type: 'GET',
                    data: { rowCode: rackId },
                    success: function (data) {
                        let $ddl = $("#addRow");
                        $ddl.empty().append('<option value="">-- Select Row --</option>');
                        $.each(data, function (i, item) {
                            $ddl.append('<option value="' + item.RowCode + '">' + item.RowName + '</option>');
                        });
                    }
                });
            } else {
                $("#addRow").empty().append('<option value="">-- Select Row --</option>');
            }
        });

        // ✅ Add Bin Form Submit
        $("#addBinForm").on("submit", function (e) {
            e.preventDefault();

            var formData = {
                BinCode: $("#addBinCode").val(),
                BinName: $("#addBinName").val(),
                ItemCode: $("#addItemCode").val(),
                MaxQuantity: $("#addMaxQuantity").val(),
                WarehouseId: $("#addWarehouse").val(),
                SectionId: $("#addSection").val(),
                RackId: $("#addRack").val(),
                RowCode: $("#addRow").val(),
                Description: $("#addDescription").val()
            };

            $.ajax({
                url: '@Url.Action("SaveBinSKK", "Inventory")',
                type: "POST",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(formData),
                success: function (res) {
                    if (res.success) {
                        Swal.fire({
                            title: "Success",
                            text: res.message,
                            icon: "success",
                            timer: 2000,
                            showConfirmButton: false
                        });
                        $("#addBinModal").modal("hide");
                        $('#binTable').DataTable().ajax.reload();
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: res.message,
                            icon: "error",
                            timer: 2500,
                            showConfirmButton: false
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: "Error",
                        text: "Something went wrong while saving bin.",
                        icon: "error",
                        timer: 2500,
                        showConfirmButton: false
                    });
                }
            });
        });

        // Edit button click
        $('#binTable').on('click', '.edit-bin', function () {
            var id = $(this).data("id");

            $.get("/Inventory/GetBinByIdSBK", { binId: id }, function (res) {
                if (res) {
                    console.log("Edit Bin Data:", res); // Debug log

                    // Populate edit modal fields
                    $("#editBinId").val(res.BinId || '');
                    $("#editBinCode").val(res.BinCode || '');
                    $("#editBinName").val(res.BinName || '');
                    $("#editMaxQuantity").val(res.MaxQuantity || '');
                    $("#editDescriptionForBin").val(res.Description || '');

                    // Set readonly warehouse, section, rack, and row fields
                    $("#editWarehouseNameForBin").val(res.WarehouseName || '');
                    $("#editWarehouseCode").val(res.WarehouseCode || '');
                    $("#editSectionNameForBin").val(res.SectionName || '');
                    $("#editSectionCode").val(res.SectionCode || '');
                    $("#editRackNameForBin").val(res.RackName || '');
                    $("#editRackCode").val(res.RackCode || '');
                    $("#editRowNameForBin").val(res.RowName || '');
                    $("#editRowCode").val(res.RowCode || '');

                    // Load items for edit modal
                    loadEditItems(res.ItemCode);

                    $("#editBinModal").modal("show");
                } else {
                    Swal.fire({
                        title: "Error",
                        text: "Unable to fetch bin details",
                        icon: "error",
                        timer: 2500,
                        showConfirmButton: false
                    });
                }
            });
        });

        // ✅ Load Items for Edit Modal
        function loadEditItems(selectedItem) {
            $.get("/Inventory/GetItemsSKK", function (data) {
                let $ddl = $("#editItemCode");
                $ddl.empty().append('<option value="">-- Select Item --</option>');
                $.each(data, function (i, item) {
                    $ddl.append('<option value="' + item.ItemCode + '">' + item.ItemName + '</option>');
                });
                $ddl.val(selectedItem);
            });
        }

        // ✅ Edit Bin Form Submit
        $("#editBinForm").on("submit", function (e) {
            e.preventDefault();

            var formData = {
                BinId: $("#editBinId").val(),
                BinCode: $("#editBinCode").val(),
                BinName: $("#editBinName").val(),
                ItemCode: $("#editItemCode").val(),
                MaxQuantity: $("#editMaxQuantity").val(),
                WarehouseId: $("#editWarehouseCode").val(),
                SectionId: $("#editSectionCode").val(),
                RackId: $("#editRackCode").val(),
                RowCode: $("#editRowCode").val(),
                Description: $("#editDescription").val()
            };

            console.log("Update Bin Data:", formData); // Debug log

            $.ajax({
                url: "/Inventory/SaveBinSKK",
                type: "POST",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(formData),
                success: function (res) {
                    if (res.success) {
                        Swal.fire({
                            title: "Updated!",
                            text: res.message,
                            icon: "success",
                            timer: 2000,
                            showConfirmButton: false
                        });
                        $("#editBinModal").modal("hide");
                        $('#binTable').DataTable().ajax.reload();
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: res.message,
                            icon: "error",
                            timer: 2500,
                            showConfirmButton: false
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error updating bin:", error);
                    Swal.fire({
                        title: "Error",
                        text: "Something went wrong while updating bin: " + error,
                        icon: "error",
                        timer: 2500,
                        showConfirmButton: false
                    });
                }
            });
        });

        // View button click
        $('#binTable').on('click', '.view-bin', function () {
            var id = $(this).data("id");

            $.get("/Inventory/GetBinByIdSBK", { binId: id }, function (res) {
                if (res) {
                    $("#vBinCode").val(res.BinCode || '');
                    $("#vBinName").val(res.BinName || '');
                    $("#vRow").val(res.RowName || '');
                    $("#vRack").val(res.RackName || '');
                    $("#vSection").val(res.SectionName || '');
                    $("#vWarehouse").val(res.WarehouseName || '');
                    $("#vItem").val(res.ItemName || '');
                    $("#vMaxQuantity").val(res.MaxQuantity || '');
                    $("#demo").val(res.AddedBy || '');
                    $("#vCurrentItems").val(res.CurrentItems || '');
                    $("#vBDescription").val(res.Description || "-");

                    let rawDate = res.AddedDate;
                    let formattedDate = "N/A";
                    if (rawDate) {
                        let timestamp = parseInt(rawDate.replace(/[^0-9]/g, ''));
                        if (!isNaN(timestamp)) {
                            let date = new Date(timestamp);
                            formattedDate = date.toLocaleDateString("en-GB");
                        } else {
                            let date = new Date(rawDate);
                            if (!isNaN(date.getTime())) {
                                formattedDate = date.toLocaleDateString("en-GB");
                            }
                        }
                    }
                    $("#vBAddedDate").val(formattedDate);

                    $("#viewBinModal").modal("show");
                } else {
                    Swal.fire("Error", "Bin details not found", "error");
                }
            });
        });

        // Delete button click
        $('#binTable').on('click', '.delete-bin', function () {
            var id = $(this).data("id");

            Swal.fire({
                title: "Are you sure?",
                text: "This Bin will be permanently deleted!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: "/Inventory/DeleteBinSBK",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ binId: id }),
                        success: function (res) {
                            if (res.success) {
                                $('#binTable').DataTable().ajax.reload();

                                Swal.fire({
                                    title: "Deleted!",
                                    text: res.message,
                                    icon: "success",
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                            } else {
                                Swal.fire({
                                    title: "Error",
                                    text: res.message,
                                    icon: "error",
                                    timer: 2500,
                                    showConfirmButton: false
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                title: "Error",
                                text: "Something went wrong while deleting Bin.",
                                icon: "error",
                                timer: 2500,
                                showConfirmButton: false
                            });
                        }
                    });
                }
            });
        });

        // Initialize Bootstrap tooltips
        function initTooltips() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        // Initialize after DataTable draw
        $('#binTable').on('draw.dt', function () {
            initTooltips();
        });

        // Initial load
        initTooltips();
    });
</script>