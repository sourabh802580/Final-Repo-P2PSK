


@{
    ViewBag.Title = "ShowStocklevelMHB";
}


<div class="main-content ">
    <!-- Your entire Stock Level UI here (filter, table, modal trigger buttons) -->

    <div class="container mt-4">


        <!-- 📋 DataTable -->
        <div class="table-responsive shadow-lg rounded container-fluid">
            <h2 class="text-center text-primary fw-bold mb-4"> Stock Analysis & Raise Order  For Item Stock Refill   </h2>
            <table id="myTable" class="table table-hover table-striped align-middle table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th><input type="checkbox" id="selectAll" /></th>
                        <th>Sr No</th>
                        <th>Item Name</th>
                        <th>Item Code</th>
                        <th>Reorder Qty</th>
                        <th>Min Qty</th>
                        <th>Max Qty</th>
                        <th>Current Items</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="tbody"></tbody>
            </table>
        </div>
    </div>
</div>
<!-- 📦 Raise Order Modal -->
<div class="modal fade" id="raiseOrderModal" tabindex="-1" aria-labelledby="raiseOrderLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <!-- 🟢 Modal Header -->
            <div class="modal-header bg-primary ">
                <h5 class="modal-title text-white w-100 text-center mb-3" id="raiseOrderLabel">
                    Raise Order
                </h5>
                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3 mb-3" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- 🟢 Modal Body -->
            <div class="modal-body" id="modalContent">
                <!-- Content will be loaded via AJAX -->
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status"></div>
                    <p>Loading form...</p>
                </div>
            </div>
        </div>
    </div>
</div>




<!-- ✅ Styling -->
<style>
    body {
        background-color: #f8f9fa;
    }

    .modal-header {
        justify-content: center; /* Center contents */
        position: relative;
    }

        .modal-header .btn-close {
            position: absolute;
            right: 1rem;
        }



    .btnAction {
        background: linear-gradient(45deg, #007bff, #00c6ff);
        border: none;
        padding: 6px 14px;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        transition: 0.3s;
    }

        .btnAction:hover {
            transform: scale(1.05);
        }

    .status-badge {
        padding: 6px 10px;
        /*        border-radius: 20px;*/
        font-size: 0.85rem;
        font-weight: 600;
    }

    .status-low {
        background-color: #ffc107;
        color: #212529;
    }

    .status-ok {
        background-color: #28a745;
        color: white;
    }

    .status-high {
        background-color: #dc3545;
        color: white;
    }

    .status-raised {
        background-color: #6f42c1;
        color: white;
    }


    .modal-backdrop {
        display: none;
    }
    /* Blur only main content when modal opens */
    body.modal-open .main-content {
        position: relative;
    }

        body.modal-open .main-content::before {
            content: '';
            position: fixed;
            inset: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1040; /* behind modal */
            pointer-events: none; /* clicks pass to modal */
        }

    /* Ensure modal is above overlay */
    .modal {
        z-index: 1055 !important;
    }


    .btnAction:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    #myTable th, #myTable td {
        vertical-align: middle !important;
        text-align: center;
    }
</style>
<script>
    let stockData = [];

    $(document).ready(function () {
        // ✅ Load stock data
        $.ajax({
            url: '/Inventory/StockMHB',
            type: 'GET',
            success: function (data) {
                stockData = data;
                renderTable(stockData);
            },
            error: function () {
                showToast("Error loading stock data", "danger");
            }
        });



        // ✅ Render Table
        function renderTable(data) {
            const tbody = $("#tbody");
            tbody.empty();

            if (!data || data.length === 0) {
                tbody.append(`<tr><td colspan="9" class="text-center">No records found</td></tr>`);
                return;
            }



            $.each(data, function (i, item) {
                let statusClass = "status-ok";
                if (item.StockStatus === "Minimum Stock") statusClass = "status-low";
                else if (item.StockStatus === "Reorder Level") statusClass = "status-high";
                else if (item.StockStatus === "Order Raised") statusClass = "status-raised";

                tbody.append(`
                    <tr>
                        <td><input type="checkbox" class="row-select" value="${item.ItemCode}"/></td>
                        <td></td>
                        <td>${item.ItemName}</td>
                        <td>${item.ItemCode}</td>
                        <td>${item.ReorderQuantity}</td>
                        <td>${item.minQuantity}</td>
                        <td>${item.MaxQuantity}</td>
                        <td>${item.CurrentItems}</td>
                        <td><span class="status-badge ${statusClass}">${item.StockStatus}</span></td>
                        <td>
                           <button class="btnAction d-flex align-items-center justify-content-center gap-2"
                                    data-id="${item.ItemCode}"
                                    ${item.StockStatus === "Order Raised" ? "disabled" : ""}
                                      ${item.StockStatus === "Available" ? "disabled" : ""}
                                       data-bs-toggle="tooltip"
                                    title="${item.StockStatus === 'Order Raised'
                        ? 'Order already raised'
                        : item.StockStatus === 'Available'
                            ? 'Stock already available'
                            : 'Raise order'}">
                                <i class="bi bi-cart-plus"></i>
                            </button>

                        </td>
                    </tr>


                `);
            });

            if ($.fn.DataTable.isDataTable('#myTable')) {
                $('#myTable').DataTable().destroy();
            }
            $('#myTable').DataTable({
                dom: '<"dt-toolbar d-flex justify-content-between align-items-center mb-3"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>',
                ordering:false,
                buttons: [
                    // ✅ Print
                    {
                        extend: 'print',
                        title: 'Stock Level',
                        text: '<i class="bi bi-printer-fill text-dark fs-5" data-bs-toggle="tooltip" title="Print Selected Rows"></i>',
                        titleAttr: 'Print',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast("Please select at least one row to Print");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: [1, 2, 3, 4, 5, 6, 7, 8],
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            }
                        },
                    
                        customize: function (win) {
                            $(win.document.body).find('h1').remove();
                            const today = new Date().toLocaleDateString('en-GB');
                            $(win.document.body).prepend(`
                                  <div style="text-align:center; margin-bottom:10px;">
                                      <h2 style="margin:0;">Stock Level</h2>
                                      <div style="font-size:12px;">Generated on: ${today}</div>
                                  </div>
                              `);
                            const $table = $(win.document.body).find('table');
                            $table.addClass('table table-bordered table-striped').css({ 'font-size': '14px', 'width': '100%', 'border-collapse': 'collapse', 'margin-top': '20px' });
                            $table.find('thead th').css({ 'background-color': '#00000', 'color': '#fff', 'text-align': 'center' });
                            $table.find('tbody td').css('text-align', 'center');
                            $table.find('tbody tr').each(function (i) { $(this).find('td:first').text(i + 1); });
                        }
                    },
                    // ✅ PDF
                    {
                        extend: 'pdfHtml5',
                        title: 'Stock Level',
                        text: '<i class="bi bi-file-earmark-pdf text-danger fs-5" data-bs-toggle="tooltip" title="Export to PDF"></i>',
                        titleAttr: 'Export PDF',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast("Please select at least one row to export PDF");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: [1, 2, 3, 4, 5, 6, 7, 8],
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            format: {
                                body: function (data, rowIdx, colIdx) {
                                    if (colIdx === 1) return rowIdx + 1;
                                    if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                    return data;
                                }
                            }
                        },
                        customize: function (doc) {
                            try {
                                doc.content[0].alignment = 'center';
                                doc.content[0].fontSize = 14;
                                var exportDate = new Date().toLocaleDateString('en-GB');
                                doc.content.splice(1, 0, {
                                    text: 'Export Date: ' + exportDate,
                                    alignment: 'center',
                                    margin: [0, 0, 0, 8],
                                    fontSize: 10
                                });
                                var tableNode = doc.content.find(c => c.table);
                                if (!tableNode) return;
                                doc.styles = doc.styles || {};
                                doc.styles.tableHeader = { alignment: 'center', fillColor: '#212529', color: '#ffffff', bold: true };
                                doc.styles.tableBodyEven = { alignment: 'center' };
                                doc.styles.tableBodyOdd = { alignment: 'center' };
                                tableNode.layout = {
                                    hLineWidth: () => .5, vLineWidth: () => .5,
                                    hLineColor: () => '#dddddd', vLineColor: () => '#dddddd',
                                    paddingLeft: () => 30, paddingRight: () => 6,
                                    paddingTop: () => 4, paddingBottom: () => 4
                                };
                                tableNode.table.body.forEach((row, i) => {
                                    if (i > 0) row[0] = { text: String(i), alignment: 'center' };
                                });
                            } catch (err) { console.error('PDF customize error:', err); }
                        }
                    },
                    // ✅ Excel
                    {
                        extend: 'excelHtml5',
                        title: 'Stock Level',
                        text: '<i class="bi bi-file-earmark-excel text-success fs-5" data-bs-toggle="tooltip" title="Export to Excel"></i>',
                        titleAttr: 'Export Excel',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast("Please select at least one row to export Excel");
                                return;
                            }
                            window.__excelSrCounter = 0;
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: [1, 2, 3, 4, 5, 6, 7, 8],
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            format: {
                                body: function (data, rowIdx, colIdx, node) {
                                    if (colIdx === 1) {
                                        return ++window.__excelSrCounter;
                                    }
                                    if (typeof data === 'string') {
                                        return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                    }
                                    return data;
                                }
                            }
                        }
                    },
                    // ✅ CSV
                    {
                        extend: 'csvHtml5',
                        title: 'Stock_Level',
                        text: '<i class="bi bi-filetype-csv text-primary fs-5" data-bs-toggle="tooltip" title="Export to CSV"></i>',
                        titleAttr: 'Export CSV',
                        action: function (e, dt, button, config) {
                            if ($('.row-select:checked').length === 0) {
                                showExportToast("Please select at least one row to export CSV");
                                return;
                            }
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: [1, 2, 3, 4, 5, 6, 7, 8],
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            format: {
                                body: function (data, rowIdx, colIdx) {
                                    if (colIdx === 1) return rowIdx + 1;
                                    if (typeof data === 'string') return data.replace(/<\/?[^>]+(>|$)/g, "").trim();
                                    return data;
                                }
                            }
                        }
                    }
                ],
                columnDefs: [
                    { targets: 1, render: function (data, type, row, meta) { return meta.row + 1; } },
                    { orderable: false, targets: [0, 9] }
                ]




            });

            // ✅ Initialize tooltips for dynamically added buttons
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });




        }


        // ✅ Select All functionality
        $(document).on("change", "#selectAll", function () {
            $(".row-select").prop("checked", this.checked);
        });

        $(document).on("change", ".row-select", function () {
            $("#selectAll").prop("checked", $(".row-select:checked").length === $(".row-select").length);
        });

        // ✅ Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            preventDuplicates: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            timeOut: "3000" // 3 seconds
        };

        // ✅ Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.", "Warning");
        }




        // ✅ Raise Order button click
        $(document).on("click", ".btnAction", function () {
            const itemId = $(this).data("id");

            $('#raiseOrderModal').modal('show');
            $('#modalContent').html(`<div class="text-center"><div class="spinner-border text-primary" role="status"></div><p>Loading form...</p></div>`);

            $.ajax({
                url: '/Inventory/stockformMHB',
                type: 'GET',
                data: { itemId: itemId },
                success: function (response) {
                    $('#modalContent').html(response);
                },
                error: function () {
                    $('#modalContent').html('<div class="alert alert-danger">Failed to load the form.</div>');
                }
            });
        });



    });
    $(document).on("submit", "#raiseOrderForm", function (e) {
        e.preventDefault();

        let form = this;

        Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to submit this PR request?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#198754',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, Submit',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Submitting...',
                    text: 'Please wait while we process your request',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    didOpen: () => Swal.showLoading()
                });

                $.ajax({
                    url: $(form).attr("action"),
                    type: "POST",
                    data: $(form).serialize(),
                    success: function () {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'PR has been submitted successfully.',
                            timer: 1500,
                            showConfirmButton: false
                        }).then(() => {
                            // ✅ Refresh entire page after SweetAlert closes
                            location.reload();
                        });
                    },
                    error: function () {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops!',
                            text: 'Something went wrong. Please try again.'
                        });
                    }
                });
            }
        });
    });
</script>


