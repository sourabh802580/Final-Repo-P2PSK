@{
    ViewBag.Title = "GRN Summary Report";
}

<div class="modal fade" id="grnItemsModal" tabindex="-1" aria-labelledby="grnItemsModalLabel" data-bs-backdrop="true" data-bs-keyboard="false" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content rounded-4 shadow-lg">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title text-white fw-bold text-center w-100 pb-4" id="grnItemsModalLabel">GRN Items List</h5>
                <button type="button" class="btn-close btn-close-white position-absolute top-0 end-0 m-3 fs-4" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <table id="GRNItemsTablePSM" class="table table-striped table-bordered w-100 text-center">
                    <thead class="table-dark text-center">
                        <tr>
                            <th><input type="checkbox" id="selectAllItems" /></th>
                            <th class="text-center">S.No</th>
                            <th  class="text-center">Item Name</th>
                            <th  class="text-center">Cost Per Unit</th>
                            <th  class="text-center">Unit Quantity</th>
                            <th  class="text-center">Discount</th>
                            <th  class="text-center">Tax Rate</th>
                            <th  class="text-center">Final Amount</th>
                            <th  class="text-center">Quality Check</th>
                        </tr>
                    </thead>
                    <tbody  class="text-center"></tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary rounded-3" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="card shadow-lg border-0 rounded-4 p-4">
        <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
            <div class="mb-2 d-flex gap-2 align-items-center">
                <div class="input-group" style="max-width: 340px;">
                    <span class="input-group-text bg-primary text-white">
                        <i class="bi bi-calendar-date"></i>
                    </span>
                    <input type="text" id="ThirdreportrangePSM" class="form-control" readonly placeholder="Select Date" />
                </div>
            </div>

            <div class="flex-grow-1 text-center">
                <h4 class="text-primary fw-bold mb-0">
                    <i class="bi bi-pie-chart-fill me-2"></i> GRN Summary Report
                </h4>
            </div>
            <div style="width:280px;"></div>
        </div>

        <div class="row mb-4">
            <div class="col-md-4 mx-auto">
                <div class="card text-white text-center shadow-lg rounded-4" style="background: linear-gradient(135deg, #4e73df, #1cc88a);">
                    <div class="card-body p-4">
                        <h5 class="fw-bold text-success">Total GRN</h5>
                        <h1 id="totalGRNDisplay" class="display-3 fw-bold my-3">0</h1>
                        <i class="bi bi-box-seam fs-2"></i>
                    </div>
                </div>
            </div>
        </div>

        <h5 class="text-primary fw-bold text-center mb-3">GRN Detailed Records</h5>
        <div class="table-responsive">
            <table id="GRNSummaryPSM" class="table table-striped table-bordered w-100">
                <thead class="table-dark">
                    <tr>
                        <th><input type="checkbox" id="selectAll" /></th>
                        <th class="text-center">S.No</th>
                        <th class="text-center">GRN No</th>
                        <th class="text-center">PO No</th>
                        <th class="text-center">Vendor Name</th>
                        <th class="text-center">Supplier</th>
                        <th class="text-center">GRN Date</th>
                        <th class="text-center">Amount</th>
                        <th class="text-center">Action</th>
                    </tr>
                </thead>
                <tbody class="text-center"></tbody>
            </table>
        </div>
    </div>
</div>

<script>
    let table = null, itemsTable = null;
    let currentFrom = null, currentTo = null;

    toastr.options = { closeButton: true, progressBar: true, newestOnTop: true, positionClass: "toast-top-right", preventDuplicates: true, timeOut: 3000 };

    // ---------------- DATE PICKER ----------------
    $('#ThirdreportrangePSM').daterangepicker({
        autoUpdateInput: false,
        opens: "right",
        drops: "down",
        locale: {
            cancelLabel: 'Clear',
            format: 'DD/MM/YYYY' // Set default display format
        },
        ranges: {
            'Today': [moment(), moment()],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
            'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
            'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
        }
    }, function (start, end) {
        $('#ThirdreportrangePSM').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
        currentFrom = start.format('DD/MM/YYYY');
        currentTo = end.format('DD/MM/YYYY');
        initTable(currentFrom, currentTo);
        loadTotalGRN(currentFrom, currentTo);
    });

    $('#ThirdreportrangePSM').on('cancel.daterangepicker', function () {
        $(this).val('');
        currentFrom = null; currentTo = null;
        initTable();
        loadTotalGRN();
    });

    // ---------------- EXPORT CUSTOMIZATION ----------------
    function buildDatetimeString() {
        var now = new Date();
        return now.getFullYear() + '-' +
            ('0' + (now.getMonth() + 1)).slice(-2) + '-' +
            ('0' + now.getDate()).slice(-2) + ' ' +
            ('0' + now.getHours()).slice(-2) + ':' +
            ('0' + now.getMinutes()).slice(-2) + ':' +
            ('0' + now.getSeconds()).slice(-2);
    }

    function findTableNodeIndex(doc) {
        if (!doc || !doc.content) return -1;
        for (var i = 0; i < doc.content.length; i++) {
            if (doc.content[i] && doc.content[i].table) {
                return i;
            }
        }
        return -1;
    }

    // Generic PDF customization function
    function pdfCustomizeGeneric(doc, title, orientation) {
        orientation = orientation || 'portrait';
        try {
            // set orientation correctly
            doc.pageOrientation = (orientation === 'portrait') ? 'portrait' : 'portrait'; // Set to landscape for wider tables
            doc.pageSize = 'A4';
            doc.pageMargins = [30, 60, 30, 40];

            if (!doc.styles) doc.styles = {};
            doc.styles.tableHeader = doc.styles.tableHeader || {};
            doc.styles.tableHeader.fillColor = doc.styles.tableHeader.fillColor || '#2c3e50';
            doc.styles.tableHeader.color = doc.styles.tableHeader.color || 'white';
            doc.styles.tableHeader.bold = true;

            doc.defaultStyle = doc.defaultStyle || {};
            doc.defaultStyle.fontSize = doc.defaultStyle.fontSize || 10;

            var tableIndex = findTableNodeIndex(doc);
            var datetime = buildDatetimeString();

            var headerBlock = [
                { text: title || '', alignment: 'center', fontSize: 14, bold: true, margin: [0, 0, 0, 6] },
                { text: 'Generated on: ' + datetime, alignment: 'center', bold: false, fontSize: 9, margin: [0, 0, 0, 8] },
                { text: '\n' }
            ];

            if (tableIndex >= 0) {
                // insert header right before the table node
                doc.content.splice(tableIndex, 0, ...headerBlock);
                tableIndex += headerBlock.length;
                var tableObj = doc.content[tableIndex];
                if (tableObj && tableObj.table && tableObj.table.body) {
                    var body = tableObj.table.body;

                    // correct first column to be serial numbers (starting from 1)
                    // Skip the first row (header)
                    for (var r = 1; r < body.length; r++) {
                        body[r][0] = { text: (r).toString(), alignment: 'center' };
                    }

                    // style header row
                    if (body[0]) {
                        for (var c = 0; c < body[0].length; c++) {
                            if (typeof body[0][c] === 'string') {
                                body[0][c] = { text: body[0][c], style: 'tableHeader', bold: true, alignment: 'center' };
                            } else if (body[0][c] && body[0][c].text) {
                                body[0][c].style = body[0][c].style || 'tableHeader';
                                body[0][c].alignment = body[0][c].alignment || 'center';
                                body[0][c].bold = true;
                            }
                        }
                    }

                    var objLayout = {};
                    objLayout['hLineWidth'] = function (i) { return 0.5; };
                    objLayout['vLineWidth'] = function (i) { return 0.5; };
                    objLayout['hLineColor'] = function (i) { return '#aaa'; };
                    objLayout['vLineColor'] = function (i) { return '#aaa'; };
                    objLayout['paddingLeft'] = function (i) { return 6; };
                    objLayout['paddingRight'] = function (i) { return 6; };
                    tableObj.layout = objLayout;
                }
            } else {
                doc.content.splice(0, 0, ...headerBlock);
            }

            doc.footer = function (currentPage, pageCount) {
                return {
                    columns: [
                        { text: 'Generated on: ' + datetime, alignment: 'left', margin: [30, 0, 0, 0] },
                        { text: 'Page ' + currentPage.toString() + ' of ' + pageCount.toString(), alignment: 'right', margin: [0, 0, 30, 0] }
                    ],
                    fontSize: 9
                };
            };
        } catch (e) {
            console.error('pdfCustomizeGeneric error', e);
        }
    }
    // Excel customization function
    function excelCustomize(xlsx, title) {
        try {
            var sheet = xlsx.xl.worksheets['sheet1.xml'];
            if (sheet) {
                // Prepend title row and apply header style (style 2 is often a bold/colored header)
                $('sheetData row:first', sheet).before(`<row r="1"><c t="inlineStr" r="A1" s="2"><is><t>${title}</t></is></c></row>`);
                $('row:nth-child(2) c', sheet).attr('s', '2'); // Apply style to DataTables header row
            }
        } catch (e) {
            console.error('excelCustomize error', e);
        }
    }
    // Print customization function
    function printCustomize(win, title) {
        try {
            $(win.document.body).css('font-size', '12pt').prepend(`<h3 class="text-center mb-3">${title}</h3>`);
            $(win.document.body).find('table').addClass('compact table-bordered').css('font-size', 'inherit');
        } catch (e) {
            console.error('printCustomize error', e);
        }
    }

    // ------------------- EXPORT BUTTON FACTORIES -------------------
    // checkboxSelector => selector for row checkbox inside each row (example: '.rowCheckbox')
    function makeExportButton(type, text, checkboxSelector, title, orientation) {
        title = title || "Report";
        orientation = orientation || "portrait";

        var btn = {
            extend: type,
            text: text,
            action: function (e, dt, button, config) {
                if (checkboxSelector) {
                    const selected = $(checkboxSelector + ":checked");
                    if (selected.length === 0) {
                        toastr.warning("Please select at least one row!", "Warning");
                        return;
                    }
                }
                // Call the original action after validation
                $.fn.dataTable.ext.buttons[type].action.call(this, e, dt, button, config);
            },
            exportOptions: {
                // Exclude the first (checkbox) and last (Action) column
                columns: ':visible:not(:first-child):not(:last-child)',
                rows: function (idx, data, node) {
                    // Only export selected rows if a checkbox selector is provided
                    if (!checkboxSelector) return true;
                    return $(node).find(checkboxSelector).is(':checked');
                },
                format: {
                    body: function (data, row, column, node) {
                        var div = document.createElement("div");
                        div.innerHTML = data;

                        // Handle formatting for currency and badges
                        if (div.querySelector("i.bi-currency-rupee")) {
                            // Extract text, remove the currency symbol which will be re-added in PDF/Excel/CSV
                            return div.textContent.trim().replace('₹', '').trim();
                        }
                        if (div.querySelector("span.badge")) {
                            return div.textContent.trim();
                        }

                        return div.textContent.trim() || data;
                    }
                }
            },
            customize: function (doc) {
                if (type === 'pdfHtml5') {
                    pdfCustomizeGeneric(doc, title, orientation || 'portrait');
                }
            },
            customizeData: function (data) {
                if (type === 'excelHtml5' || type === 'csvHtml5') {
                    excelCustomize(data, title);
                }
            },
            customizePrint: function (win) {
                if (type === 'print') {
                    printCustomize(win, title);
                }
            }
        };

        return btn;
    }

    function makeChildExportButton(type, text, checkboxSelector, title, orientation) {
        var btn = makeExportButton(type, text, checkboxSelector, title, orientation);
        btn.exportOptions.columns = ':visible:not(:first-child):not(:last-child)';
        btn.exportOptions.footer = true;
        return btn;
    }

    // --- MISSING FUNCTION: DEFINED HERE ---
    // Function to generate the standard set of export buttons
    function exportButtons(title, isChildTable = false) {
        if (isChildTable) {
            return [
                makeChildExportButton('print','<i class= "bi bi-printer-fill text-dark fs-5"></i>', '.rowCheckboxItem', title),
                makeChildExportButton('pdfHtml5', '<i class="bi bi-file-earmark-pdf-fill text-danger fs-5"></i>', '.rowCheckboxItem', title, 'portrait'),
                makeChildExportButton('excelHtml5', '<i class="bi bi-file-earmark-excel text-success fs-5"></i>', '.rowCheckboxItem', title),
                makeChildExportButton('csvHtml5', '<i class="bi bi-filetype-csv text-success fs-5"></i>', '.rowCheckboxItem', title)
            ];
        } else {
            return [
                makeChildExportButton('print', '<i class= "bi bi-printer-fill text-dark fs-5" ></i>', '.rowCheckbox', title),
                makeChildExportButton('pdfHtml5', '<i class="bi bi-file-earmark-pdf-fill text-danger fs-5"></i>', '.rowCheckbox', title, 'portrait'),
                makeChildExportButton('excelHtml5', '<i class="bi bi-file-earmark-excel text-success fs-5"></i>', '.rowCheckbox', title),
                makeChildExportButton('csvHtml5', '<i class="bi bi-filetype-csv text-success fs-5"></i>', '.rowCheckbox', title)
            ];
        }
    }

    // ---------------- INIT MAIN TABLE ----------------
    function initTable(fromDate, toDate) {
        if (table) {
            try { table.clear().destroy(); } catch (e) {}
            $('#GRNSummaryPSM tbody').empty();
        }

        table = $('#GRNSummaryPSM').DataTable({
            dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center"i p>',
            responsive: true,
            processing: true,
            ajax: { url: '@Url.Action("AllGRNSummaryListPSM","GRN")', data: { fromDate: fromDate || null, toDate: toDate || null }, dataSrc: "data" },
            columns: [
                { data: null, orderable: false, render: d => '<input type="checkbox" class="rowCheckbox" value="' + (d.GRNCode || '') + '"/>' },
                { data: null, render: (d, type, row, meta) => meta.row + 1 },
                { data: "GRNCode" },
                { data: "POCode" },
                { data: "VendorName" },
                { data: "CompanyName" },
                { data: "AddedDate", render: d => d ? new Date(d).toLocaleDateString("en-GB") : "" },
                { data: "TotalAmount", render: d => d ? '<i class="bi bi-currency-rupee text-secondary"></i> ' + parseFloat(d).toLocaleString("en-IN", { minimumFractionDigits: 2 }) : "-" },
                { data: "GRNCode", orderable: false, render: d => '<button type="button" class="btn-sm btn btn-primary viewItemsBtn" data-grn="' + d + '" title="View GRN"><i class="bi bi-eye"></i></button>' }
            ],
            ordering: false,
            // Pass false for isChildTable
            buttons: exportButtons('GRN Summary Report', false)
        });
    }

    // ---------------- LOAD GRN ITEMS ----------------
    function loadGRNItems(GRNCode) {
        if (itemsTable) {
            try { itemsTable.clear().destroy(); } catch (e) {}
            $('#GRNItemsTablePSM tbody').empty();
        }

        itemsTable = $('#GRNItemsTablePSM').DataTable({
            dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center"i p>',
            responsive: true,
            processing: true,
            ajax: { url: '@Url.Action("GRNItemsPSM","GRN")', type: 'GET', data: { GRNCode: GRNCode }, dataSrc: 'data' },
            columns: [
                { data: null, orderable: false, render: d => '<input type="checkbox" class="rowCheckboxItem" value="' + (d.ItemName || '') + '"/>' },
                { data: null, render: (d, t, r, m) => m.row + 1 },
                { data: "ItemName" },
                { data: "CostPerUnit", render: d => d ? '<i class="bi bi-currency-rupee text-secondary"></i> ' + parseFloat(d).toLocaleString("en-IN", { minimumFractionDigits: 2 }) : "-" },
                { data: "UnitQuantity", render: $.fn.dataTable.render.number(',', '.', 2) },
                { data: "Discount" },
                { data: "TaxRate" },
                { data: "FinalAmount", render: d => d ? '<i class="bi bi-currency-rupee text-secondary"></i> ' + parseFloat(d).toLocaleString("en-IN", { minimumFractionDigits: 2 }) : "-" },
                { data: 'IsQuality', render: d => d === 'Yes' ? '<span class="badge bg-success">Yes</span>' : '<span class="badge bg-danger">No</span>' }
            ],
            ordering: false,
            // Pass true for isChildTable
            buttons: exportButtons('GRN Items', true)
        });
    }

    // ---------------- LOAD TOTAL GRN ----------------
    function loadTotalGRN(fromDate, toDate) {
        $.ajax({
            url: '@Url.Action("GRNPieChartPSM","GRN")',
            type: 'GET',
            data: { fromDate: fromDate || null, toDate: toDate || null },
            success: function (response) {
                var totalGRN = (response && response.TotalGRN !== undefined) ? parseInt(response.TotalGRN) : (Array.isArray(response) && response[0] && response[0].TotalGRN) ? parseInt(response[0].TotalGRN) : 0;
                $("#totalGRNDisplay").text(totalGRN.toLocaleString("en-IN"));
            },
            error: function () { $("#totalGRNDisplay").text("0"); }
        });
    }

    // ---------------- DOCUMENT READY ----------------
    $(document).ready(function () {
        initTable(null, null);
        loadTotalGRN(null, null);

        $(document).on("change", "#selectAll", function () {
            $(".rowCheckbox").prop("checked", this.checked);
        });
        $(document).on("change", ".rowCheckbox", function () {
            $("#selectAll").prop('checked', $(".rowCheckbox:checked").length === $(".rowCheckbox").length);
        });

        $(document).on("click", ".viewItemsBtn", function () {
            // Set the modal title with the GRN number
            $('#grnItemsModalLabel').text(`GRN Items List (GRN No: ${$(this).data("grn")})`);
            loadGRNItems($(this).data("grn"));
            $("#grnItemsModal").modal("show");
        });

        $(document).on("change", "#selectAllItems", function () {
            $(".rowCheckboxItem").prop("checked", this.checked);
        });
        $(document).on("change", ".rowCheckboxItem", function () {
            $("#selectAllItems").prop('checked', $(".rowCheckboxItem:checked").length === $(".rowCheckboxItem").length);
        });
    });
</script>
