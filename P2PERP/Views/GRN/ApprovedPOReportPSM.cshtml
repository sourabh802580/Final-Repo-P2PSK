@{
    ViewBag.Title = " ";
}

<div class="container">
    <div class="card shadow-lg border-0 rounded-4 p-4">

        <!-- Header with Datepicker -->
        <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
            <div class="mb-2">
                <div class="input-group" style="max-width: 340px;">
                    <span class="input-group-text bg-primary text-white">
                        <i class="bi bi-calendar-date"></i>
                    </span>
                    <input type="text" id="FirstreportrangePSM" class="form-control" readonly placeholder="Select Date" />
                </div>
            </div>

            <div class="flex-grow-1 text-center">
                <h4 class="text-primary fw-bold mb-0">
                    <i class="bi bi-pie-chart-fill me-2"></i> Approved PO Count by Vendor
                </h4>
            </div>

            <div class="mb-2" style="width:280px;"></div>
        </div>

        <!-- Donut Chart -->
        <div class="position-relative border rounded-3 p-3 shadow-sm mb-4">
            <div class="position-absolute top-0 end-0 p-3 text-end">
                <h6 class="text-muted mb-1">Total Approved POs</h6>
                <h2 id="poTotalCountPSM" class="text-success fw-bold mb-0">0</h2>
            </div>
            <div id="poDonutChartPSM" style="height:400px;"></div>
        </div>

        <!-- Approved PO List -->
        <h5 class="text-primary fw-bold text-center mb-3">Approved Purchase Orders</h5>
        <div class="table-responsive">
            <table id="approvedPOListTablePSM" class="table table-striped text-center table-bordered w-100">
                <thead class="table-dark text-center">
                    <tr>
                        <th><input type="checkbox" id="selectAll" /></th>
                        <th class="text-center">S.No</th>
                        <th class="text-center">PO Code</th>
                        <th class="text-center">RQ Code</th>
                        <th class="text-center">Vendor Name</th>
                        <th class="text-center">Company Name</th>
                        <th class="text-center">Approved Date</th>
                        <th class="text-center">Total Amount</th>
                        <th class="text-center">Status</th>
                        <th class="text-center">Action</th>
                    </tr>
                </thead>
                <tbody class="text-center"></tbody>
            </table>
        </div>
    </div>
</div>

<!-- PO Items Modal -->
<div class="modal fade" id="poItemsModal" tabindex="-1" aria-labelledby="poItemsModalLabel" data-bs-backdrop="true" data-bs-keyboard="false" aria-hidden="false">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title text-white fw-bold text-center w-100 pb-4" id="poItemsModalLabel">Approved PO Items</h5>
                <button type="button"
                        class="btn-close btn-close-white position-absolute top-0 end-0 m-3 fs-4"
                        data-bs-dismiss="modal"
                        aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table id="poItemsTablePSM" class="table table-striped text-center table-bordered w-100">
                    <thead class="table-dark text-center">
                        <tr>
                            <th><input type="checkbox" id="selectAllChild" /></th>
                            <th>S.No</th>
                            <th>Item Name</th>
                            <th>Cost Per Unit</th>
                            <th>Unit Quantity</th>
                            <th>Discount</th>
                            <th>Tax Rate</th>
                            <th>Quality Check</th>
                            <th>Final Amount</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div class="modal-footer d-flex flex-column gap-4 justify-content-end align-items-end">
                <button class="btn btn-secondary rounded-2 me-2 mb-4" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
var poTablePSM = null;
var poItemsTablePSM = null;

// Toastr config
toastr.options = {
    closeButton: true, progressBar: true, newestOnTop: true,
    positionClass: "toast-top-right", preventDuplicates: true, timeOut: 3000
};

//Datetime string for PDF export
function buildDatetimeString() {
    var now = new Date();
    return now.getFullYear() + '-' +
        ('0' + (now.getMonth() + 1)).slice(-2) + '-' +
        ('0' + now.getDate()).slice(-2) + ' ' +
        ('0' + now.getHours()).slice(-2) + ':' +
        ('0' + now.getMinutes()).slice(-2) + ':' +
        ('0' + now.getSeconds()).slice(-2);
}
function findTableNodeIndex(doc) {
    for (var i = 0; i < doc.content.length; i++) {
        if (doc.content[i] && doc.content[i].table) {
            return i;
        }
    }
    return -1;
}

// ---------------- PDF / Excel / Print Customization ----------------
function pdfCustomizeGeneric(doc, title) {
    try {
        doc.pageSize = 'A4';
        doc.pageMargins = [30, 60, 30, 40];
        doc.styles = doc.styles || {};
        doc.styles.tableHeader = { fillColor: '#2c3e50', color: 'white', bold: true };
        var datetime = buildDatetimeString();

        var tableIndex = findTableNodeIndex(doc);
        var headerBlock = [
            { text: title || '', alignment: 'center', fontSize: 14, bold: true, margin: [0, 0, 0, 6] },
            { text: 'Generated on: ' + datetime, alignment: 'center', fontSize: 9, margin: [0, 0, 0, 8] },
            { text: '\n' }
        ];

        if (tableIndex >= 0) {
            doc.content.splice(tableIndex, 0, ...headerBlock);
        } else {
            doc.content.unshift(...headerBlock);
        }

        doc.footer = function (currentPage, pageCount) {
            return {
                columns: [
                    { text: 'Generated on: ' + datetime, alignment: 'left', margin: [30, 0, 0, 0] },
                    { text: 'Page ' + currentPage + ' of ' + pageCount, alignment: 'right', margin: [0, 0, 30, 0] }
                ],
                fontSize: 9
            };
        };
    } catch (e) { console.error(e); }
}
function excelCustomize(xlsx, title) {
    try {
        var sheet = xlsx.xl.worksheets['sheet1.xml'];
        $('sheetData row:first', sheet).before(`<row r="1"><c t="inlineStr" r="A1"><is><t>${title}</t></is></c></row>`);
    } catch (e) { console.error(e); }
}
function printCustomize(win, title) {
    $(win.document.body).css('font-size', '12pt').prepend(`<h3 class="text-center mb-3">${title}</h3>`);
    $(win.document.body).find('table').addClass('compact table-bordered').css('font-size', 'inherit');
}

// ------------------- Export Button Factories -------------------
    function makeExportButton(type, text, selector, title) {
    let srCounter = 0;
    return {
        extend: type,
        text: text,
        action: function (e, dt, button, config) {
            if (selector && $(selector + ":checked").length === 0) {
                toastr.warning("Please select at least one row!", "Warning");
                return;
            }

            // FIX S.No for export
            dt.rows().every(function (rowIdx, tableLoop, rowLoop) {
                this.data()._ExportIndex = rowIdx + 1;
            });

            $.fn.dataTable.ext.buttons[type].action.call(this, e, dt, button, config);
        },
        exportOptions: {
            columns: ':visible:not(:first-child):not(:last-child)',
            rows: function (idx, data, node) {
                if (!selector) return true;
                return $(node).find(selector).is(':checked');
            },
            format: {
                body: function (data, row, column, node) {
                    if (column === 1) {
                        srCounter++;
                        return srCounter;
                    }
                    if (node instanceof HTMLElement) {
                        return $(node).text() || data;
                    }
                    return data;
                }
              }
            },
        customize: function (doc) {
            if (type === 'pdfHtml5') pdfCustomizeGeneric(doc, title);
        },
        customizeData: function (data) {
            if (type === 'excelHtml5') excelCustomize(data, title);
        },
        customizePrint: function (win) {
            if (type === 'print') printCustomize(win, title);
        }
    };
}

function makeChildExportButton(type, text, selector, title) {
    var btn = makeExportButton(type, text, selector, title);
    btn.exportOptions.columns = ':visible:not(:first-child)';
    return btn;
}

    // ------------------- DATE PICKER -------------------
    $(document).ready(function () {
        $('#FirstreportrangePSM').daterangepicker({
            autoUpdateInput: false,
            opens: "right",
            drops: "down",
            locale: {
                format: 'DD/MM/YYYY', // 👈 display format
                cancelLabel: 'Clear'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        },
            function (start, end) {
                // Show dd/MM/yyyy format in input
                $('#FirstreportrangePSM').val(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));

                // Pass yyyy-MM-dd format internally
                initPOTablePSM(start.format('YYYY-MM-DD'), end.format('YYYY-MM-DD'));
                loadPOChartPSM(start.format('YYYY-MM-DD'), end.format('YYYY-MM-DD'));
            });

        $('#FirstreportrangePSM').on('cancel.daterangepicker', function () {
            $(this).val('');
            initPOTablePSM();
            loadPOChartPSM();
        });

        initPOTablePSM();
        loadPOChartPSM();
    });

// ------------------- PARENT DATATABLE -------------------
function initPOTablePSM(fromDate, toDate) {
    if (poTablePSM) { poTablePSM.destroy(); $("#approvedPOListTablePSM tbody").empty(); }
    poTablePSM = $("#approvedPOListTablePSM").DataTable({
        dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center"i p>',
        responsive: true, processing: true,
        ajax: {
            url: '@Url.Action("ApprovedPOListsPSM", "GRN")',
            type: "GET", data: { startDate: fromDate || "", endDate: toDate || "" },
            dataSrc: "data"
        },
        columns: [
            { data: null, render: () => '<input type="checkbox" class="rowCheckbox"/>' },
            { data: null, render: (d, t, r, meta) => meta.row + 1 }, // S.No
            { data: 'POCode' }, { data: 'RQNO' }, { data: 'VendorName' }, { data: 'VendorCompanyName' },
            { data: 'ApprovedRejectedDate', render: d => d ? new Date(d).toLocaleDateString("en-GB") : "" },
            { data: 'TotalAmount', render: d => d ? `<i class="bi bi-currency-rupee"></i> ${d}` : "-" },
            { data: 'StatusName', render: d => d ? `<span class="badge bg-success">${d}</span>` : "" },
            { data: null, render: d => `<button class="btn btn-sm btn-primary btnViewPO" data-pocode="${d.POCode}"><i class="bi bi-eye"></i></button>` }
        ],
        ordering: false,
        buttons: [
            makeExportButton('print', '<i class="bi bi-printer-fill text-dark fs-5"></i>', ".rowCheckbox", "Approved PO List"),
            makeExportButton('pdfHtml5', '<i class="bi bi-file-earmark-pdf-fill text-danger fs-5"></i>', ".rowCheckbox", "Approved PO List"),
            makeExportButton('excelHtml5', '<i class="bi bi-file-earmark-excel text-success fs-5"></i>', ".rowCheckbox", "Approved PO List"),
            makeExportButton('csvHtml5', '<i class="bi bi-filetype-csv text-success fs-5"></i>', ".rowCheckbox", "Approved PO List")
        ]
    });

    $(document).off('change', '#selectAll').on('change', '#selectAll', function () {
        $('#approvedPOListTablePSM tbody input.rowCheckbox').prop('checked', $(this).is(':checked'));
    });
}

// ------------------- CHILD DATATABLE -------------------
function loadPOItems(poCode) {
    if (poItemsTablePSM) { poItemsTablePSM.destroy(); $("#poItemsTablePSM tbody").empty(); }
    poItemsTablePSM = $("#poItemsTablePSM").DataTable({
        dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center"i p>',
        responsive: true, processing: true,
        ajax: {
            url: '@Url.Action("ApprovedPOItemsPSM", "GRN")',
            type: 'GET', data: { poCode: poCode }, dataSrc: "data"
        },
        columns: [
            { data: null, render: () => '<input type="checkbox" class="rowCheckboxChild"/>' },
            { data: null, render: (d, t, r, meta) => meta.row + 1 },
            { data: 'ItemName' },
            { data: "CostPerUnit", render: d => d ? `<i class="bi bi-currency-rupee"></i> ${parseFloat(d).toLocaleString("en-IN", { minimumFractionDigits: 2 })}` : "-" },
            { data: 'UnitQuantity', render: $.fn.dataTable.render.number(',', '.', 2) },
            { data: 'Discount' },
            { data: 'TaxRate' },
            { data: 'IsQuality', render: d => d === 'Yes' ? '<span class="badge bg-success">Yes</span>' : '<span class="badge bg-danger">No</span>' },
            { data: 'FinalAmount', render: d => d ? `<i class="bi bi-currency-rupee"></i> ${parseFloat(d).toLocaleString("en-IN", { minimumFractionDigits: 2 })}` : "-" }
        ],
        ordering: false,
        buttons: [
            makeChildExportButton('print', '<i class="bi bi-printer-fill text-dark fs-5"></i>', ".rowCheckboxChild", "Approved PO Items"),
            makeChildExportButton('pdfHtml5', '<i class="bi bi-file-earmark-pdf-fill text-danger fs-5"></i>', ".rowCheckboxChild", "Approved PO Items"),
            makeChildExportButton('excelHtml5', '<i class="bi bi-file-earmark-excel text-success fs-5"></i>', ".rowCheckboxChild", "Approved PO Items"),
            makeChildExportButton('csvHtml5', '<i class="bi bi-filetype-csv text-success fs-5"></i>', ".rowCheckboxChild", "Approved PO Items")
        ]
    });

    $(document).off('change', '#selectAllChild').on('change', '#selectAllChild', function () {
        $('#poItemsTablePSM tbody input.rowCheckboxChild').prop('checked', $(this).is(':checked'));
    });
}

// ------------------- VIEW MODAL -------------------
$(document).off('click', '.btnViewPO').on('click', '.btnViewPO', function () {
    var poCode = $(this).data('pocode');
    if (!poCode) return;
    $('#poItemsModal').modal('show');
    loadPOItems(poCode);
});

// ------------------- DONUT CHART -------------------
function loadPOChartPSM(fromDate, toDate) {
    $.getJSON('@Url.Action("ApprovedPOChartPSM", "GRN")', { startDate: fromDate || "", endDate: toDate || "" }, function (res) {
        var totalCount = res?.data?.reduce((s, r) => s + r.Count, 0) || 0;
        $("#poTotalCountPSM").text(totalCount);
        Highcharts.chart('poDonutChartPSM', {
            chart: { type: 'pie', height: 400 },
            title: { text: totalCount ? '' : 'No Data Available' },
            subtitle: totalCount ? { text: 'Total POs: <b>' + totalCount + '</b>', align: 'left', floating: true, style: { fontSize: '14px', fontWeight: 'bold', color: '#28a745' } } : null,
            plotOptions: {
                pie: {
                    innerSize: '60%',
                    dataLabels: { enabled: true, format: '{point.name}: {point.y}' },
                    point: {
                        events: {
                            click: function () { poTablePSM.column(4).search(this.name).draw(); }
                        }
                    }
                }
            },
            series: [{ name: 'Approved POs', colorByPoint: true, data: res?.data?.map(r => ({ name: r.VendorName, y: r.Count })) || [] }],
            credits: { enabled: false }
        });
    });
}
</script>
