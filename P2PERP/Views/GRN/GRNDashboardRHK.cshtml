<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GRN Dashboard</title>
    <!--
      GRN Dashboard - Main View
      This dashboard displays Key Performance Indicators (KPIs), charts, and recent GRN records.
      Features include date filtering, modal views for detailed data, and export functionality.
    -->



    <style>
        #reqTable th,
        #reqTable td {
            text-align: center;
            vertical-align: middle;
        }

        #ListTable th,
        #ListTable td {
            text-align: center;
            vertical-align: middle;
        }

        /* Improved charts container */
        .charts-container {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .chart-card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .chart-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
        }

        .chart-header {
/*            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);*/
            color: white !important;
            border-radius: 12px 12px 0 0 !important;
            padding: 1rem 1.5rem;
            border: none;
        }

        .chart-body {
            padding: 1.5rem;
            background-color: #f8f9fa;
        }

        /* KPI Cards improvements */
        .kpi-card {
            transition: all 0.3s ease;
            border: none;
            border-radius: 12px;
            overflow: hidden;
        }

        .kpi-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1) !important;
        }

        .kpi-icon {
            background: rgba(255, 255, 255, 0.2) !important;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Floating button improvements */
        #dateFilterBtn {
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
        }

        #dateFilterBtn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
        }

        /* Table improvements */
        .table-card {
            border: none;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .table-card .card-header {
            background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
            color: white;
            border-radius: 12px 12px 0 0 !important;
            padding: 1rem 1.5rem;
            border: none;
        }


        /* Make chart header titles and text white */
        .card-header.chart-header h5,
        .chart-header h5,
        .chart-header .mb-0 {
            color: white !important;
        }

        .chart-header .badge {
            color: #f8f9fa !important;
            background-color: rgba(255, 255, 255, 0.2) !important;
        }


    </style>

</head>
<body>
    <div class="container-fluid py-4 main-content">
        <!--
      MAIN DASHBOARD CONTAINER
      Contains all dashboard components including KPIs, charts, and data tables
    -->
        <!-- FLOATING DATE FILTER BUTTON -->
        <button id="dateFilterBtn"
                class="btn btn-primary rounded-circle shadow-lg position-fixed"
                style="top: 70px; right: 20px; width: 60px; height: 60px; z-index: 1050;">
            <i class="bi bi-calendar-date fs-4"></i>
            <!--
          This floating button triggers the date range picker for filtering dashboard data
          Positioned fixed for easy access from anywhere on the page
        -->
        </button>





        <!-- KPI CARDS SECTION -->
        <div class="row g-4 mb-4">
            <!-- Total GRNs Card -->
            <div class="col-md-4 col-lg-3">
                <div class="card text-center shadow-sm kpi-card" id="TotalCountCard" style="cursor: pointer; background: linear-gradient(4135deg, burlywood, burlywood); color: white; ">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="card-title">Total GRNs</h5>
                                <h2 id="TotalGRNCount">0</h2>
                            </div>
                            <div class="kpi-icon">
                                <i class="bi bi-clipboard-data bi-2x text-white"></i>
                            </div>
                        </div>
                        <p class="mb-0 mt-2 small opacity-75 text-white">All time GRN count</p>
                    </div>
                </div>
            </div>

            <!-- Total GRN Items Card -->
            <div class="col-md-4 col-lg-3">
                <div class="card text-center shadow-sm kpi-card" id="GRNItemsCountCard" style="cursor: pointer; background: linear-gradient(4135deg, aquamarine 100%, aquamarine); color: white;">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="card-title">Total GRN Items</h5>
                                <h2 id="TotalGRNItemCount">0</h2>
                            </div>
                            <div class="kpi-icon">
                                <i class="bi bi-boxes bi-2x text-white"></i>
                            </div>
                        </div>
                        <p class="mb-0 mt-2 small opacity-75 text-white">All received items</p>
                    </div>
                </div>
            </div>

            <!-- QC Assigned Card -->
            <div class="col-md-4 col-lg-3">
                <div class="card text-center shadow-sm kpi-card" id="QCCountCard" style="cursor:pointer; background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%); color: white;">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="card-title">QC Assigned</h5>
                                <h2 id="QCAssignedCount">0</h2>
                            </div>
                            <div class="kpi-icon">
                                <i class="bi bi-clipboard-check bi-2x text-white"></i>
                            </div>
                        </div>
                        <p class="mb-0 mt-2 small opacity-75 text-white">Items for quality check</p>
                    </div>
                </div>
            </div>

            <!-- Upcoming Items Card -->
            <div class="col-md-4 col-lg-3">
                <div class="card text-center shadow-sm kpi-card" id="UpcomingItemCard" style="cursor:pointer; background: linear-gradient(135deg, #0dcaf0 0%, #0ba6c8 100%); color: white;">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="card-title">Upcoming Items</h5>
                                <h2 id="UpcomingItemCount">0</h2>
                            </div>
                            <div class="kpi-icon">
                                <i class="bi bi-hourglass bi-2x text-white"></i>
                            </div>
                        </div>
                        <p class="mb-0 mt-2 small opacity-75 text-white">Upcoming Items from PO</p>
                    </div>
                </div>
            </div>
        </div>
        <!-- END KPI CARDS SECTION -->


        <!-- CHARTS SECTION -->
        



        <!-- IMPROVED CHARTS SECTION -->
        <div class="charts-container">

            <div class="card chart-card shadow-sm">
                <div class="card-header chart-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-pie-chart me-2"></i>Quality Check Status Distribution</h5>
                  
                </div>
                <div class="card-body chart-body">
                    <div id="statusChart" style="height: 400px;"></div>
                </div>
            </div>

            <div class="card chart-card shadow-sm">
                <div class="card-header chart-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-graph-up me-2"></i>GRN Trends Over Time</h5>
                    <span class="badge bg-light text-dark">Date Range: <span id="selectedRangeBadge">This Year</span></span>
                </div>
                <div class="card-body chart-body">
                    <div id="trendChart" style="height: 400px;"></div>
                </div>
            </div>
        </div>
        <!-- END CHARTS SECTION -->



        <!-- RECENT GRNs TABLE SECTION -->
        <div class="card mt-4 shadow-sm">
            <div class="card-header chart-header py-3">
                <h5 class="mb-0"><i class="bi bi-clock-history me-2"></i>Recent GRNs</h5>
            </div>

            <div class="card-body">
                <div class="table-responsive">
                    <!-- TABLE HEADER WITH FILTERS AND EXPORT BUTTONS -->
                    <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
                        <!-- Date Range Filter -->
                        <div class="input-group" style="height: 40px; max-width: 280px;">
                            <span class="input-group-text bg-primary text-white" style="height: 100%;">
                                <i class="bi bi-calendar-date"></i>
                            </span>
                            <input type="text" id="reportrange" class="form-control" placeholder="Select date range" readonly style="height: 100%;" />
                            <!--
                          Date range input for filtering the recent GRNs table
                          Uses daterangepicker plugin for selection
                        -->
                        </div>

                        <!-- Export Buttons Container -->
                        <div class="d-flex align-items-center gap-3 ms-auto">
                            <div id="exportContainer" class="d-flex" style="height: 40px; align-items: center;">
                                <!--
                              DataTable export buttons will be injected here
                              Includes Print, PDF, Excel, and CSV export options
                            -->
                            </div>
                        </div>
                    </div>

                    <!-- RECENT GRNs DATA TABLE -->
                    <table id="reqTable" class="table table-bordered table-striped table-hover align-middle" style="width:100%">
                        <thead class="table-dark">
                            <tr>
                                <th><input type="checkbox" id="selectAll1"></th>
                                <!-- Select all checkbox for batch operations -->
                                <th>Sr.No</th>
                                <th>GRN Code</th>
                                <th>PO Code</th>
                                <th>Vendor</th>
                                <th>Invoice No</th>

                                <th>Added By</th>
                                <th>Added Date</th>
                               
                            </tr>
                        </thead>
                        <tbody id="tblRecent">
                            <tr>
                                <td colspan="9" class="text-center">
                                    <div class="spinner-container">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                    <!-- Loading spinner displayed while table data is being fetched -->
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>


            </div>
        </div>
        <!-- END RECENT GRNs TABLE SECTION -->

    </div>
    <!-- END container-fluid -->



    <!-- REUSABLE MODAL FOR DETAILED VIEWS -->
    <div class="modal fade" id="itemsModal" data-bs-backdrop="true" tabindex="-1" aria-labelledby="itemsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">

                <div class="modal-header bg-primary text-white position-relative">
                    <div class="w-100 text-center">
                        <h5 class="modal-title text-white fw-bold mb-0" id="itemsModalLabel">Details</h5>
                    </div>

                    <button type="button" class="btn-close btn-close-white position-absolute end-0 me-3" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body" id="modalContent">
                    <div class="spinner-container text-center">
                        <div class="spinner-border text-primary" role="status"></div>
                    </div>
                    <!--
                      Modal content area - dynamically loaded with partial views
                      Shows detailed information when KPI cards or chart segments are clicked
                    -->
                </div>
            </div>
        </div>
    </div>


    <!-- END REUSABLE MODAL -->
    <!-- JAVASCRIPT SECTION -->
    <script>


        // GLOBAL VARIABLES
        let dataTable;          // DataTable instance for the recent GRNs table
        let selectedStartDate = ''; // Start date for filtering
        let selectedEndDate = '';   // End date for filtering
        let statusChart, trendChart; // Highcharts chart instances
        let tableStartDate = null; // Start date for table filtering
        let tableEndDate = null;   // End date for table filtering







        // DOCUMENT READY FUNCTION - Initializes the dashboard when page is loaded
        $(document).ready(function () {

            
            // Initialize date range picker for the floating button
            initDateRangePicker();

            // Set up click event handlers for KPI cards
            $("#TotalCountCard").click(() => openModalWithPartial("/GRN/GetGRNListPartialRHK", "All GRNs"));
            $("#GRNItemsCountCard").click(() => openModalWithPartial("/GRN/GetGRNItemsPartialRHK", "GRN Items"));
            $("#QCCountCard").click(() => openModalWithPartial("/GRN/GetQCListPartialRHK", "QC Assigned Items"));
            $("#UpcomingItemCard").click(() => openModalWithPartial("/GRN/GetUpcomingItemPartialRHK", "Upcoming Items"));
            // Load initial data
            loadRecentGRNs(selectedStartDate, selectedEndDate);
        });



        function initDateRangePicker1() {
            $('#reportrange').daterangepicker({
                autoUpdateInput: false,
                locale: {
                    cancelLabel: 'Clear',
                    format: 'DD-MM-YYYY'
                },
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            });

            // Apply date range when user selects
            $('#reportrange').on('apply.daterangepicker', function (ev, picker) {
                tableStartDate = picker.startDate;
                tableEndDate = picker.endDate;
                $(this).val(tableStartDate.format('DD-MM-YYYY') + ' - ' + tableEndDate.format('DD-MM-YYYY'));

                // Filter the table based on date range
                filterTableByDate();
            });

            // Clear date range on cancel
            $('#reportrange').on('cancel.daterangepicker', function (ev, picker) {
                tableStartDate = null;
                tableEndDate = null;
                $(this).val('');
                dataTable.draw(); // Reset filtering
            });
        }

        function filterTableByDate() {
            if (tableStartDate && tableEndDate) {
                // Custom filtering function for date range
                $.fn.dataTable.ext.search.push(
                    function (settings, data, dataIndex) {
                        var date = moment(data[7], 'DD-MM-YYYY'); // Assuming date is in 4th column (index 3)

                        if ((tableStartDate === null && tableEndDate === null) ||
                            (tableStartDate === null && date <= tableEndDate) ||
                            (tableStartDate <= date && tableEndDate === null) ||
                            (tableStartDate <= date && date <= tableEndDate)) {
                            return true;
                        }
                        return false;
                    }
                );
            }

            dataTable.draw();

            // Remove the custom filter function after drawing
            $.fn.dataTable.ext.search.pop();
        }







        // INITIALIZE DATE RANGE PICKER FOR DASHBOARD FILTERING
        function initDateRangePicker() {
            const start = moment().startOf('year'); // Default: last 7 days
            const end = moment().endOf('year');

            // Update dashboard with selected date range
            function updateDashboard(start, end) {
                selectedStartDate = start.format('YYYY-MM-DD');
                selectedEndDate = end.format('YYYY-MM-DD');

                // Update the display
                $('#dateFilterBtn span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
                $('#selectedRangeBadge').text(start.format('MMM D') + ' - ' + end.format('MMM D'));

                // Refresh all dashboard components with new date range
                loadKPIData(selectedStartDate, selectedEndDate);
                loadStatusData(selectedStartDate, selectedEndDate);
                loadTrendData(selectedStartDate, selectedEndDate);
                loadRecentGRNs(selectedStartDate, selectedEndDate);
            }



            // Initialize the date range picker on floating button
            $('#dateFilterBtn').daterangepicker({
                startDate: start,
                endDate: end,
                locale: {
                    cancelLabel: 'Clear',
                    format: 'DD-MM-YYYY'
                },
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                    'This Year': [moment().startOf('year'), moment().endOf('year')]

                },
                alwaysShowCalendars: true,
                autoApply: false
            }, function (start, end) {
                updateDashboard(start, end);
            });

               // Clear date range on cancel
   $('#reportrange').on('cancel.daterangepicker', function (ev, picker) {
       tableStartDate = null;
       tableEndDate = null;
       $(this).val('');
       dataTable.draw(); // Reset filtering
   });

            // Clear date range on cancel (Clear button)
            $('#dateFilterBtn').on('cancel.daterangepicker', function (ev, picker) {
                // Reset selected dates
                selectedStartDate = "";
                selectedEndDate = "";

                // Clear the button text
                $('#dateFilterBtn span').html('All Data');
                $('#selectedRangeBadge').text('All');

                // Reload full dashboard without date filter
                loadKPIData(null, null);
                loadStatusData(null, null);
                loadTrendData(null, null);
                loadRecentGRNs(null, null);
            });


            // Trigger initial load with default date range
            updateDashboard(start, end);
        }






        // LOAD KPI DATA WITH DATE PARAMETERS
        function loadKPIData(startDate, endDate) {
            // Show loading states
            $("#TotalGRNCount").html('<span class="spinner-border spinner-border-sm"></span>');
            $("#TotalGRNItemCount").html('<span class="spinner-border spinner-border-sm"></span>');
            $("#QCAssignedCount").html('<span class="spinner-border spinner-border-sm"></span>');
            $("#UpcomingItemCount").html('<span class="spinner-border spinner-border-sm"></span>');

            // Load each KPI with date parameters
            $.getJSON("/GRN/GetTotalGRNRHK", { startDate: startDate, endDate: endDate }, function (data) {
                $("#TotalGRNCount").text(data.count || 0);
            }).fail(function () {
                $("#TotalGRNCount").text("Error");
            });

            $.getJSON("/GRN/GetTotalGRNItemRHK", { startDate: startDate, endDate: endDate }, function (data) {
                $("#TotalGRNItemCount").text(data.count || 0);
            }).fail(function () {
                $("#TotalGRNItemCount").text("Error");
            });

            $.getJSON("/GRN/GetQCAssignedCountRHK", { startDate: startDate, endDate: endDate }, function (data) {
                $("#QCAssignedCount").text(data.count || 0);
            }).fail(function () {
                $("#QCAssignedCount").text("Error");
            });

            $.getJSON("/GRN/GetUpcomingItemCountRHK", { startDate: startDate, endDate: endDate }, function (data) {
                $("#UpcomingItemCount").text(data.count || 0);
            }).fail(function () {
                $("#UpcomingItemCount").text("Error");
            });
        }





        // LOAD STATUS DATA FOR PIE CHART
        function loadStatusData(startDate, endDate) {
            $.getJSON("/GRN/GetApproveCountRHK", { startDate: startDate, endDate: endDate }, function (res1) {
                $.getJSON("/GRN/GetRejectedGRNCountRHK", { startDate: startDate, endDate: endDate }, function (res2) {
                    $.getJSON("/GRN/GetPendingCountRHK", { startDate: startDate, endDate: endDate }, function (res3) {
                        const approvedCount = res1.count || 0;
                        const rejectedCount = res2.count || 0;
                        const pendingCount = res3.count || 0;

                        createStatusChart(approvedCount, rejectedCount, pendingCount);
                    }).fail(function () {
                        createStatusChart(0, 0, 0);
                    });
                }).fail(function () {
                    createStatusChart(0, 0, 0);
                });
            }).fail(function () {
                createStatusChart(0, 0, 0);
            });
        }



        // CREATE STATUS CHART (PIE CHART)
        function createStatusChart(approvedCount, rejectedCount, pendingCount) {
            // Destroy existing chart instance if it exists
            if (statusChart) {
                statusChart.destroy();
            }

            // Create new Highcharts pie chart
            statusChart = Highcharts.chart('statusChart', {
                chart: {
                    type: 'pie',
                    backgroundColor: 'transparent'
                },
                title: {
                    text: 'Quality Check Status',
                    style: { fontWeight: '600', fontSize: '18px' }
                },
                tooltip: {
                    pointFormat: '{series.name}: <b>{point.y}</b> ({point.percentage:.1f}%)'
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: true,
                        cursor: 'pointer',
                        dataLabels: {
                            enabled: true,
                            format: '<b>{point.name}</b>: {point.y}',
                            style: { fontWeight: '500' }
                        },
                        colors: ['#28a745', '#dc3545', '#ffc107'] // Green, Red, Yellow
                    }
                },
                series: [{
                    name: 'Items',
                    colorByPoint: true,
                    data: [
                        { name: 'Confirmed', y: approvedCount },
                        { name: 'Non-Confirmed', y: rejectedCount },
                        { name: 'Pending', y: pendingCount }
                    ],
                    point: {
                        events: {
                            click: function () {
                                // Open appropriate modal based on clicked segment
                                if (this.name === "Confirmed") {
                                    openModalWithPartial("/GRN/GetApprovedItemsPartialRHK", "Approved Items");
                                } else if (this.name === "Non-Confirmed") {
                                    openModalWithPartial("/GRN/GetRejectedItemsPartialRHK", "Rejected Items");
                                } else if (this.name === "Pending") {
                                    openModalWithPartial("/GRN/GetPendingItemsPartialRHK", "Pending Items");
                                } else {
                                    openModalWithPartial("/GRN/GetQCListPartialRHK", "QC Assigned Items");
                                }
                            }
                        }
                    }
                }],
                credits: { enabled: false }
            });
        }



        // LOAD TREND DATA WITH DATE RANGE
        function loadTrendData(startDate, endDate) {
            $.getJSON("/GRN/GetGRNTrendsRHK", { startdate: startDate, enddate: endDate }, function (res) {
                // Destroy existing chart if it exists
                if (trendChart) {
                    trendChart.destroy();
                }

                // Create new Highcharts line chart
                trendChart = Highcharts.chart('trendChart', {
                    chart: {
                        type: 'line',
                        backgroundColor: 'transparent'
                    },
                    title: {
                        text: 'GRN Trends',
                        style: { fontWeight: '600', fontSize: '18px' }
                    },
                    xAxis: {
                        categories: res.dates,
                        title: { text: 'Date' }
                    },
                    yAxis: {
                        title: { text: 'Number of GRNs' },
                        min: 0
                    },
                    series: [{
                        name: 'GRNs',
                        data: res.counts,
                        color: '#4361ee',
                        lineWidth: 3,
                        marker: {
                            radius: 5,
                            fillColor: '#ffffff',
                            lineWidth: 2,
                            lineColor: '#4361ee'
                        }
                    }],
                    credits: { enabled: false }
                });
            }).fail(function () {
                // Handle error case by creating empty chart
                if (trendChart) {
                    trendChart.destroy();
                }

                trendChart = Highcharts.chart('trendChart', {
                    chart: { type: 'line' },
                    title: { text: 'GRN Trends' },
                    series: [{ name: 'GRNs', data: [] }],
                    credits: { enabled: false }
                });
            });
        }



        // LOAD RECENT GRNs WITH DATE FILTERING


        function loadRecentGRNs(startDate, endDate) {
            $('#tableSpinner').removeClass('d-none');

            // AJAX call to fetch recent GRN data
            $.ajax({
                url: "/GRN/RecentGRNListRHK",
                success: function (response) {
                    console.log(response); // Debugging output

                    $('#tblRecent').empty();

                    if (response.data?.length > 0) {
                        let i = 1;
                        // Populate table with received data
                        response.data.forEach((d) => {

                        

                            $('#tblRecent').append(`
                            <tr>
                                <td><input type="checkbox" class="row-select" value="${d.GRNCode}"></td>
                                <td>${i}</td>
                                <td>${d.GRNCode || 'N/A'}</td>
                                <td>${d.POCode || 'N/A'}</td>
                                <td>${d.Vendor || 'N/A'}</td>
                                <td>${d.InvoiceNo || 'N/A'}</td>
                                <td>${d.AddedBy || 'N/A'}</td>
                               <td>${moment(d.AddedDate).format('DD/MM/YYYY')}</td>
                                
                            </tr>
                        `);
                            i++; // Increment counter after using it
                        });
                    } else {
                        $('#tblRecent').html('<tr><td colspan="9" class="text-center py-4">No recent GRNs</td></tr>');
                    }

                    // Initialize DataTable and date picker for table filtering
                    initDataTable();
                    initDateRangePicker1();
                    $('#tableSpinner').addClass('d-none'); // Hide spinner after load
                },
                error: function () {
                    $('#tblRecent').html('<tr><td colspan="9" class="text-center py-4 text-danger">Error loading data</td></tr>');
                    $('#tableSpinner').addClass('d-none');
                }
            });
        }

        // HELPER FUNCTION TO GET BADGE COLOR BASED ON STATUS
        function getStatusBadgeColor(status) {
            switch (status?.toLowerCase()) {
                case 'approved': return 'success';
                case 'rejected': return 'danger';
                case 'pending': return 'warning';
                default: return 'secondary';
            }
        }



        function initDataTable() {
            // Destroy existing DataTable instance if it exists
            if (dataTable) {
                dataTable.destroy();
            }


            let $table = $(".table");


            // Initialize DataTable with configuration
            dataTable = $('#reqTable').DataTable({
                pageLength: 10,
                paging: true,
                ordering: false,
                searching: true,
                dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
                buttons: [
                    // 🔹 Print
                    {
                        extend: 'print',
                        text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                        className: 'btn btn-sm btn-outline-dark',
                        title: 'Recent GRN',
                        messageTop: function () {
                            return '<h3 style="text-align:center">Generated Date: ' +
                                new Date().toLocaleDateString('en-GB') + '</h3>';
                        },
                        action: function (e, dt, button, config) {
                            if ($('#reqTable tbody input.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            columns: ':visible:not(:first-child)',
                            format: {
                                body: function (data, row, column, node) {
                                    if (column === 1)
                                        return $('#reqTable tbody input.row-select:checked')
                                            .index($(node).closest('tr').find('.row-select')) + 1;

                                    return typeof data === 'string'
                                        ? data.replace(/<[^>]*>/g, '').trim()
                                        : data;

                                }
                            }
                        },
                        customize: function (win) {
                            var $body = $(win.document.body);

                            $body.append(`
        <style>
            thead th {
                background-color: black !important;
                color: white !important;
                text-align: center !important;
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
            }
            table {
                border-collapse: collapse !important;
                width: 100% !important;
            }
            td, th {
                border: 1px solid #000 !important;
                padding: 6px !important;
                 text-align: center !important;
            }
        </style>
`);

                            $body.find('h1').css('text-align', 'center');



                            $body.find('table')
                                .addClass('table table-bordered table-striped')
                                .css('width', '100%');

                            $body.css('font-size', '12pt');
                        }
                    },
                    // 🔹 PDF
                    {
                        extend: 'pdfHtml5',
                        text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                        className: 'btn btn-sm btn-outline-danger',
                        title: "Recent GRN",
                        orientation: 'landscape',
                        pagesize: 'A4',
                        customize: function (doc) {

                            doc.content.splice(1, 0, {
                                text: 'Generated Date: ' + new Date().toLocaleDateString('en-GB'),
                                alignment: 'center',
                                margin: [0, 0, 0, 12]
                            });

                            // Center table
                            var table = doc.content[doc.content.length - 1].table;
                            table.widths = new Array(table.body[0].length).fill('*'); // equal widths
                            doc.content[doc.content.length - 1].alignment = 'center'; // ✅ Center table


                            doc.styles.tableHeader = { fillColor: '#000000', color: 'white', alignment: 'center' };

                            var objLayout = {};
                            objLayout['hLineWidth'] = function () { return 1; };
                            objLayout['vLineWidth'] = function () { return 1; };
                            objLayout['hLineColor'] = function () { return '#000'; };
                            objLayout['vLineColor'] = function () { return '#000'; };
                            objLayout['paddingLeft'] = function () { return 4; };
                            objLayout['paddingRight'] = function () { return 4; };
                            doc.content[doc.content.length - 1].layout = objLayout;

                            var tableBody = doc.content[doc.content.length - 1].table.body;
                            tableBody.forEach(function (row) {
                                row.forEach(function (cell) {
                                    cell.alignment = 'center';
                                });
                            });
                        },
                        action: function (e, dt, button, config) {
                            if ($('#reqTable tbody input.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            columns: ':visible:not(:first-child)',
                            format: {
                                body: function (data, row, column, node) {
                                    if (column === 1)
                                        return $('#reqTable tbody input.row-select:checked')
                                            .index($(node).closest('tr').find('.row-select')) + 1;
                                    return typeof data === 'string'
                                        ? data.replace(/<[^>]*>/g, '').trim()
                                        : data;
                                }
                            }
                        }
                    },
                    // 🔹 Excel
                    {
                        extend: 'excelHtml5',
                        text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                        className: 'btn btn-sm btn-outline-success',
                        title: "Recent GRN",
                        action: function (e, dt, button, config) {
                            if ($('#reqTable tbody input.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            columns: ':visible:not(:first-child)',
                            format: {
                                body: function (data, row, column, node) {
                                    if (column === 1)
                                        return $('#reqTable tbody input.row-select:checked')
                                            .index($(node).closest('tr').find('.row-select')) + 1;
                                    return typeof data === 'string'
                                        ? data.replace(/<[^>]*>/g, '').trim()
                                        : data;
                                }
                            }
                        }
                    },
                    // 🔹 CSV
                    {
                        extend: 'csvHtml5',
                        text: '<i class="bi bi-filetype-csv text-primary fs-5"></i>',
                        className: 'btn btn-sm btn-outline-primary',
                        title: "Recent GRN",
                        action: function (e, dt, button, config) {
                            if ($('#reqTable tbody input.row-select:checked').length === 0) {
                                showExportToast();
                                return;
                            }
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            rows: function (idx, data, node) {
                                return $(node).find('.row-select').prop('checked');
                            },
                            columns: ':visible:not(:first-child)',
                            format: {
                                body: function (data, row, column, node) {
                                    if (column === 1)
                                        return $('#reqTable tbody input.row-select:checked')
                                            .index($(node).closest('tr').find('.row-select')) + 1;
                                    return typeof data === 'string'
                                        ? data.replace(/<[^>]*>/g, '').trim()
                                        : data;
                                }
                            }
                        }
                    }
                ]
            });

            // --- SelectAll toggle ---
            $('#selectAll1').off('change').on('change', function () {
                $('#reqTable tbody .row-select').prop('checked', $(this).prop('checked'));
            });

            // --- Update SelectAll state ---
            $('#reqTable').off('change', '.row-select').on('change', '.row-select', function () {
                let total = $('#reqTable tbody .row-select').length;
                let checked = $('#reqTable tbody .row-select:checked').length;
                $('#selectAll1').prop('checked', total === checked);
            });

        }





        // OPEN MODAL WITH PARTIAL VIEW
        function openModalWithPartial(url, title) {
            $("#itemsModal").modal("show");
            $("#itemsModalLabel").text(title);
            $("#modalContent").html('<div class="spinner-container"><div class="spinner-border text-primary"></div></div>');

            // Pass date range to partial views
            const fullUrl = `${url}?startDate=${selectedStartDate}&endDate=${selectedEndDate}`;

            // Load partial view content
            $.get(fullUrl, function (html) {
                $("#modalContent").html(html);

                let $table = $("#ListTable");
              //  let $tblmain = $("#'#reqTable'")
                // Append datatable1 class only if data rows exist
                if ($table.find("tbody tr").length > 0 &&
                    !$table.find("tbody tr td").hasClass("text-center")) {
                    $table.addClass("datatable1");
                }

                // Initialize DataTable in modal if present
                if ($(".datatable1").length) {
                    let $table = $(".datatable1");

                    // ✅ Destroy existing DataTable if initialized
                    if ($.fn.DataTable.isDataTable($table)) {
                        $table.DataTable().destroy();
                    }

                    $table.DataTable({
                        pageLength: 10,
                        paging: true,
                        ordering: false,
                        searching: true,
                        
                        dom: '<"d-flex justify-content-between align-items-center mt-1 mb-2"Bf>rt<"d-flex justify-content-between mt-2"<"datatable-info"i><"datatable-pagination"p>>',
                        buttons: [
                            // 🔹 Print
                            {
                                extend: 'print',
                                text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                                className: 'btn btn-sm btn-outline-dark',
                                title: `${title}`,
                                messageTop: function () {
                                    return '<h3 style="text-align:center">Generated Date: ' +
                                        new Date().toLocaleDateString('en-GB') + '</h3>';
                                },
                                action: function (e, dt, button, config) {
                                    if ($('#ListTable tbody input.row-select:checked').length === 0) {
                                        showExportToast();
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-select').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            if (column === 1)
                                                return $('#ListTable tbody input.row-select:checked')
                                                    .index($(node).closest('tr').find('.row-select')) + 1;

                                            return typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;

                                        }
                                    }
                                },
                                customize: function (win) {
                                    var $body = $(win.document.body);

                                    $body.append(`
        <style>
            thead th {
                background-color: black !important;
                color: white !important;
                text-align: center !important;
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
            }
            table {
                border-collapse: collapse !important;
                width: 100% !important;
            }
            td, th {
                border: 1px solid #000 !important;
                padding: 6px !important;
                 text-align: center !important;
            }
        </style>
`);

                                    $body.find('h1').css('text-align', 'center');



                                    $body.find('table')
                                        .addClass('table table-bordered table-striped')
                                        .css('width', '100%');

                                    $body.css('font-size', '12pt');
                                }
                            },
                            // 🔹 PDF
                            {
                                extend: 'pdfHtml5',
                                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                                className: 'btn btn-sm btn-outline-danger',
                                title: `${title}`,
                                orientation: 'landscape',
                                pagesize: 'A4',
                                customize: function (doc) {

                                    doc.content.splice(1, 0, {
                                        text: 'Generated Date: ' + new Date().toLocaleDateString('en-GB'),
                                        alignment: 'center',
                                        margin: [0, 0, 0, 12]
                                    });

                                    // Center table
                                    var table = doc.content[doc.content.length - 1].table;
                                    table.widths = new Array(table.body[0].length).fill('*'); // equal widths
                                    doc.content[doc.content.length - 1].alignment = 'center'; // ✅ Center table


                                    doc.styles.tableHeader = { fillColor: '#000000', color: 'white', alignment: 'center' };

                                    var objLayout = {};
                                    objLayout['hLineWidth'] = function () { return 1; };
                                    objLayout['vLineWidth'] = function () { return 1; };
                                    objLayout['hLineColor'] = function () { return '#000'; };
                                    objLayout['vLineColor'] = function () { return '#000'; };
                                    objLayout['paddingLeft'] = function () { return 4; };
                                    objLayout['paddingRight'] = function () { return 4; };
                                    doc.content[doc.content.length - 1].layout = objLayout;

                                    var tableBody = doc.content[doc.content.length - 1].table.body;
                                    tableBody.forEach(function (row) {
                                        row.forEach(function (cell) {
                                            cell.alignment = 'center';
                                        });
                                    });
                                },
                                action: function (e, dt, button, config) {
                                    if ($('#ListTable tbody input.row-select:checked').length === 0) {
                                        showExportToast();
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-select').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            if (column === 1)
                                                return $('#ListTable tbody input.row-select:checked')
                                                    .index($(node).closest('tr').find('.row-select')) + 1;
                                            return typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                        }
                                    }
                                }
                            },
                            // 🔹 Excel
                            {
                                extend: 'excelHtml5',
                                text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                                className: 'btn btn-sm btn-outline-success',
                                title: `${title}`,
                                action: function (e, dt, button, config) {
                                    if ($('#ListTable tbody input.row-select:checked').length === 0) {
                                        showExportToast();
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-select').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            if (column === 1)
                                                return $('#ListTable tbody input.row-select:checked')
                                                    .index($(node).closest('tr').find('.row-select')) + 1;
                                            return typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                        }
                                    }
                                }
                            },
                            // 🔹 CSV
                            {
                                extend: 'csvHtml5',
                                text: '<i class="bi bi-filetype-csv text-primary fs-5"></i>',
                                className: 'btn btn-sm btn-outline-primary',
                                title: `${title}`,
                                action: function (e, dt, button, config) {
                                    if ($('#ListTable tbody input.row-select:checked').length === 0) {
                                        showExportToast();
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-select').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child)',
                                    format: {
                                        body: function (data, row, column, node) {
                                            if (column === 1)
                                                return $('#ListTable tbody input.row-select:checked')
                                                    .index($(node).closest('tr').find('.row-select')) + 1;
                                            return typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                        }
                                    }
                                }
                            }
                        ]
                    });

                    // --- SelectAll toggle ---
                    $('#selectAll').off('change').on('change', function () {
                        $('#ListTable tbody .row-select').prop('checked', $(this).prop('checked'));
                    });

                    // --- Update SelectAll state ---
                    $('#ListTable').off('change', '.row-select').on('change', '.row-select', function () {
                        let total = $('#ListTable tbody .row-select').length;
                        let checked = $('#ListTable tbody .row-select:checked').length;
                        $('#selectAll').prop('checked', total === checked);
                    });

                }








            }).fail(function () {
                // Handle error case
                $("#modalContent").html(
                    '<div class="alert alert-danger text-center mt-3">Failed to load data. Please try again.</div>'
                );
            });
        }





        // ✅ Configure toastr once
        toastr.options = {
            closeButton: true,
            progressBar: true,
            newestOnTop: true,
            positionClass: "toast-top-right",
            preventDuplicates: true,
            timeOut: 3000,
            extendedTimeOut: 1000,
            showDuration: 300,
            hideDuration: 300,
            showMethod: "slideDown",
            hideMethod: "fadeOut"
        };

        // ✅ Helper function for warning toast
        function showExportToast() {
            toastr.warning("Please select at least one row before exporting.");
        }


    </script>
</body>
</html>