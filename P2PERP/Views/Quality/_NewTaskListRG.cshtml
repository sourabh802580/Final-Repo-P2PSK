@{
    ViewBag.Title = "GRN Task List";
}
<style>
    #taskTabsContent {
        box-shadow: none;
    }
</style>
<!-- 🔹 Wrap Whole Partial in One Card Only -->
<div class="card shadow-lg rounded-4 border-0">
    <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between">
        <div class="flex-grow-1 text-center position-relative">
            <h5 class="mb-0 fw-bold text-white">GRN Task List</h5>
        </div>
        <button type="button"
                class="btn btn-primary btn-sm ms-2"
                onclick="location.href='/Quality/IndexRG'">
            <i class="bi bi-arrow-left"></i> Back
        </button>
    </div>
</div>


<div class="card-body">

    <!-- GRN Info -->
    <div class="d-flex align-items-center mb-3 mt-4">
        <label for="grnno" class="fw-semibold me-2 mb-0">GRN No:</label>
        <input type="text" id="grnno" value="@ViewBag.GRN" name="GRNCode" class="form-control w-auto" readonly />
    </div>

    <!-- Task Grid -->
   
    <div class="table-responsive">
        <table id="newTaskTable" class="table table-striped table-hover table-bordered align-middle text-center mb-0">
            <thead class="table-dark">
                <tr>
                    <th><input type="checkbox" id="selectAllNewTask" /></th>
                    <th>Sr.No</th>
                    <th>GRNItemCode</th>
                    <th>Item Code</th>
                    <th>Item Name</th>
                    <th>Item Type</th>
                    <th>Inspection Type</th>
                    <th>Plan Name</th>
                    <th>Assigned Date</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

</div>


<!-- Modal for Inspection Form -->
<div class="modal fade" id="inspecModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content shadow-lg rounded-4 bg-white">
            <div class="modal-header bg-primary text-white position-relative">
                <h4 class="modal-title text-white mx-auto">Inspection Form</h4>
                <button type="button"
                        class="btn  position-absolute top-50 end-0 translate-middle-y btn-lg fw-bold text-white"
                        style="width:40px; height:40px; font-size:24px; line-height:1;"
                        data-bs-dismiss="modal"
                        aria-label="Close">
                    &times;
                </button>
            </div>
            <div class="modal-body" id="inspecModalBody">
                <div class="text-center text-muted">Loading...</div>
            </div>
        </div>
    </div>
</div>



<script>
    /* this function returns toastmessage */

    //  Toast function
    function showToast(message, type = 'error') {
        // Map to Bootstrap contextual colors
        let icon = '';
        let progressColor = '';

        switch (type) {
            case 'success':
                icon = '<i class="bi bi-check-circle-fill me-2"></i>';
                progressColor = 'bg-light';
                break;
            case 'warning':
                icon = '<i class="bi bi-exclamation-triangle-fill me-2"></i>';
                progressColor = 'bg-dark';
                break;
            case 'info':
                icon = '<i class="bi bi-info-circle-fill me-2"></i>';
                progressColor = 'bg-light';
                break;
            default: // error
                icon = '<i class="bi bi-x-circle-fill me-2"></i>';
                progressColor = 'bg-light';
        }

        const toastId = `toast-${Date.now()}`;

        //  Toast HTML with white text for all
        const toastHTML = `
<div id="${toastId}" class="toast align-items-center bg-${type} border-0 mb-2 shadow-lg"
                 role="alert" aria-live="assertive" aria-atomic="true"
                 data-bs-delay="3000" data-bs-animation="true">
                <div class="d-flex">
                    <div class="toast-body d-flex align-items-center text-white">
                        ${icon} ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto"
                            data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="progress" style="height: 3px; margin:0; background: rgba(255,255,255,0.3);">
            <div class="progress-bar" role="progressbar"></div>
</div>

</div>`;

        const $toast = $(toastHTML);
        $('#toastContainer').prepend($toast); // newestOnTop

        //  Initialize bootstrap toast
        const toast = new bootstrap.Toast($toast[0], { delay: 3000 });
        toast.show();

        //  Animate progress bar
        $toast.find('.progress-bar')
            .css({
                width: "100%",
                float: "right",
                backgroundColor: "grey"
            })
            .animate(
                { width: "0%" },
                { duration: 3000, easing: "linear" }
            );



        //  Auto-remove
        $toast.on('hidden.bs.toast', function () {
            $(this).remove();
        });
    }

    //this is used for showing data in grid
    $(document).ready(function () {
        var id = $('#grnno').val();
        console.log("GRN ID:", id);

        if (id && id.trim() !== "") {
            var table = $('#newTaskTable').DataTable({
                ajax: {
                    url: '/Quality/ItemByGRNRG',
                    type: 'GET',
                    data: { id: id },
                    dataSrc: '' // controller returns List<>

                },

                columns: [
                    {
                        data: null,
                        orderable: false,
                        className: 'select-checkbox text-center',
                        render: function (data, type, row, meta) {
                            return `<input type="checkbox" class="row-select" value="${row.ItemCode}">`;
                        }
                    },
                    {
                        data: null,
                        render: function (data, type, row, meta) {
                            return meta.row + 1; // ✅ Sr.No
                        }
                    },
                    { data: 'GrnItemCode' },

                    { data: 'ItemCode' },
                    { data: 'ItemName' },
                    { data: 'ItemType' },
                    { data: 'InspectionType' },
                    { data: 'PlanName' },
                    {
                        data: 'strAddedDate',
                        render: function (data, type, row) {
                            if (!data) return "";
                            // Try to parse both "YYYY-MM-DD" and "DD-MM-YYYY"
                            let date = moment(data, ["YYYY-MM-DD", "DD-MM-YYYY", "DD/MM/YYYY"]);
                            return date.isValid() ? date.format("DD/MM/YYYY") : data;
                        }
                    },
                    {
                        data: 'GrnItemcode',
                        render: function (data, type, row) {
                            return `<button class="btn btn-sm btn-primary open-inspec"
                            onclick="openInspecForm('${row.GrnItemCode}')"
                            data-bs-toggle="tooltip"
                            title="Open Inspection Form">
                      <i class="bi bi-box-arrow-up-right me-1"></i>
                    </button>`;
                        }
                    }
                ],
                columnDefs: [
                    { targets: "_all", className: "text-center" }
                ],
                layout: {
                    topStart: {
                        buttons: [

                            //code for Print
                            {
                                extend: 'print',
                                text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                                titleAttr: 'Print Selected',
                                attr: {
                                    'data-bs-toggle': 'tooltip',
                                    'data-bs-placement': 'bottom',
                                    'title': 'Export to print'
                                },
                                action: function (e, dt, button, config) {
                                    if ($('#newTaskTable tbody .row-select:checked').length === 0) {
                                        showToast("Please select at least one row to print!", "warning");
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                    dt.processing(false);
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-select').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child):not(:last-child)',
                                    format: {
                                        body: (function () {
                                            let counter = 0;
                                            return function (data, row, column, node) {
                                                data = typeof data === 'string'
                                                    ? data.replace(/<[^>]*>/g, '').trim()
                                                    : data;

                                                // For SR.NO column (first visible after checkbox)
                                                if (column === 1) {
                                                    counter++;
                                                    return counter;
                                                }
                                                return data;
                                            };
                                        })()
                                    }
                                },
                                title: '', // leave blank because we are prepending our own title
                                customize: function (win) {
                                    // Remove any default title
                                    $(win.document.body).find('h1').remove();

                                    // Prepend centered title and generated date
                                    $(win.document.body).prepend(`
                                            <div style="text-align:center; width:100%;">
                                                <h2 style="margin:0; font-size:20pt; font-weight:bold;">GRN List</h2>
                                                <div style="font-size:12pt; font-style:italic; margin-bottom:15px;">
                                                    Generated on: ${new Date().toLocaleDateString()}
                                                </div>
                                            </div>
                                        `);

                                    // Table styles (header colors and alignment remain intact)
                                    var css = `
                                            page {
                                                margin: 0 !important;
                                            }
                                            body {
                                                margin: 0 !important;
                                                padding: 0 !important;
                                            }
                                            table.dataTable thead th {
                                                background-color: black !important;
                                                color: white !important;
                                                font-weight: bold !important;
                                                text-align: center !important;
                                                -webkit-print-color-adjust: exact !important;
                                                print-color-adjust: exact !important;
                                            }
                                            table.dataTable tbody td {
                                                text-align: center !important;
                                            }
                                        `;
                                    $(win.document.head).append('<style>' + css + '</style>');
                                }
                            },

                            //code for Pdf

                            {
                                extend: 'pdfHtml5',
                                text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                                titleAttr: 'Export to PDF',
                                attr: {
                                    'data-bs-toggle': 'tooltip',
                                    'data-bs-placement': 'bottom',
                                    'title': 'Export to PDF'
                                },
                                action: function (e, dt, button, config) {
                                    if ($('#newTaskTable .row-select:checked').length === 0) {
                                        showToast("Please select at least one row to export!", "warning");
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                    dt.processing(false); // ✅ force remove buffering spinner
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-select').prop('checked');
                                    },
                                    columns: ':visible:not(:first-child):not(:last-child)',
                                    format: {
                                        body: (function () {
                                            let counter = 0;
                                            return function (data, row, column, node) {
                                                data = typeof data === 'string'
                                                    ? data.replace(/<[^>]*>/g, '').trim()
                                                    : data;
                                                if (column === 1) {
                                                    counter++;
                                                    return counter;
                                                }
                                                return data;
                                            };
                                        })()
                                    }
                                },
                                title: 'GRN List',
                                filename: function () {
                                    return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                                },
                                customize: function (doc) {
                                    doc.styles.title = {
                                        fontSize: 16,
                                        bold: true,
                                        alignment: 'center',
                                        color: 'black',

                                    };

                                    doc.content.splice(1, 0, {
                                        text: 'Generated on: ' + new Date().toLocaleDateString(),
                                        fontSize: 12,
                                        italics: true,
                                        alignment: 'center',
                                        margin: [0, 0, 0, 10]
                                    });
                                    var tableNode = doc.content[doc.content.length - 1].table;
                                    var headerCells = tableNode.body[0];
                                    headerCells.forEach(function (cell) {
                                        cell.fillColor = 'black';
                                        cell.color = 'white';
                                        cell.bold = true;
                                        cell.alignment = 'center';
                                    });
                                    for (var i = 1; i < tableNode.body.length; i++) {
                                        tableNode.body[i].forEach(function (cell) {
                                            if (cell.text) {
                                                cell.alignment = 'center'; // Center all rows
                                            }
                                        });
                                    }
                                    tableNode.layout = {
                                        paddingLeft: () => 30, paddingLeft: () => 6,

                                    };
                                    var colCount = tableNode.body[0].length;
                                    tableNode.widths = new Array(colCount).fill('*'); // distribute evenly
                                }
                            },
                            //code for excel

                            {
                                extend: 'excelHtml5',
                                text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                                titleAttr: 'Export to Excel',
                                attr: {
                                    'data-bs-toggle': 'tooltip',
                                    'data-bs-placement': 'bottom',
                                    'title': 'Export to Excel'
                                },
                                action: function (e, dt, button, config) {
                                    if ($('#newTaskTable  .row-select:checked').length === 0) {
                                        showToast("Please select at least one row to export!", "warning");
                                        return;
                                    }
                                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                    dt.processing(false); // ✅ force remove buffering spinner
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $('input.row-select', node).is(':checked');
                                    },
                                    columns: ':visible:not(:last-child)',
                                    format: {
                                        body: (function () {
                                            let counter = 0;
                                            return function (data, row, column, node) {
                                                data = typeof data === 'string'
                                                    ? data.replace(/<[^>]*>/g, '').trim()
                                                    : data;
                                                if (column === 1) {
                                                    counter++;
                                                    return counter;
                                                }
                                                return data;
                                            };
                                        })()
                                    }
                                },
                                title: '',
                                filename: function () {
                                    return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                                },
                                customize: function (xlsx) {
                                    var sheet = xlsx.xl.worksheets['sheet1.xml'];
                                    var $sheet = $(sheet);

                                    // Count number of columns
                                    var colCount = $('row:first c', sheet).length;
                                    if (colCount === 0) colCount = 5; // fallback

                                    // Title & date text
                                    var title = 'New Task List';
                                    var generatedDate = 'Generated on: ' + moment().format('DD/MM/YYYY');

                                    // 🔹 Shift all existing rows down by 2 (to make space for title + date)
                                    $sheet.find('sheetData row').each(function () {
                                        var r = parseInt($(this).attr('r'));
                                        $(this).attr('r', r + 2);

                                        $(this).find('c').each(function () {
                                            var cellRef = $(this).attr('r');
                                            var col = cellRef.replace(/[0-9]/g, '');
                                            var rowNum = parseInt(cellRef.replace(/[A-Z]/g, '')) + 2;
                                            $(this).attr('r', col + rowNum);
                                        });
                                    });

                                    // 🔹 Create Title row
                                    var titleRow = `
       <row r="1">
      <c t="inlineStr" r="A1" s="2"><is><t>${title}</t></is></c>
        </row>`;

                                    // 🔹 Create Date row
                                    var dateRow = `
         <row r="2">
          <c t="inlineStr" r="A2" s="0"><is><t>${generatedDate}</t></is></c>
            </row>`;

                                    // Prepend title + date rows
                                    $sheet.find('sheetData').prepend(titleRow + dateRow);

                                    // 🔹 Merge cells for title & date across all columns
                                    var mergeCells = $sheet.find('mergeCells');
                                    if (mergeCells.length === 0) {
                                        mergeCells = $('<mergeCells count="0"></mergeCells>');
                                        $sheet.append(mergeCells);
                                    }

                                    mergeCells.append(`<mergeCell ref="A1:${String.fromCharCode(64 + colCount)}1"/>`);
                                    mergeCells.append(`<mergeCell ref="A2:${String.fromCharCode(64 + colCount)}2"/>`);
                                    mergeCells.attr('count', mergeCells.find('mergeCell').length);
                                }
                            },
                            //code for csv

                            {
                                extend: 'csvHtml5',
                                text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                                titleAttr: 'Export to CSV',

                                attr: {
                                    'data-bs-toggle': 'tooltip',
                                    'data-bs-placement': 'bottom',
                                    'title': 'Export to CSV'
                                },
                                action: function (e, dt, button, config) {
                                    if ($('#newTaskTable  .row-select:checked').length === 0) {
                                        showToast("Please select at least one row to export!", "warning");
                                        return;
                                    }
                                    window.__srnoCounter = 0; // reset counter after export

                                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                    dt.processing(false); // ✅ force remove buffering spinner
                                },
                                exportOptions: {
                                    rows: function (idx, data, node) {
                                        return $(node).find('.row-select').prop('checked'); // ✅ only checked rows
                                    },
                                    columns: ':visible',
                                    format: {
                                        body: (function () {
                                            let counter = 0;
                                            return function (data, row, column, node) {
                                                data = typeof data === 'string'
                                                    ? data.replace(/<[^>]*>/g, '').trim()
                                                    : data;
                                                if (column === 1) {
                                                    if (!window.__srnoCounter) window.__srnoCounter = 0;
                                                    return ++window.__srnoCounter;
                                                }
                                                if (column === 3) {
                                                    // Convert to proper DD-MM-YYYY
                                                    if (moment(data, 'DD-MM-YYYY', true).isValid()) {
                                                        return moment(data, 'DD-MM-YYYY').format('DD-MM-YYYY');
                                                    }
                                                    if (moment(data).isValid()) {
                                                        return moment(data).format('DD-MM-YYYY'); // only date
                                                    }
                                                    return data;
                                                }
                                                return data;
                                            };
                                        })()
                                    }
                                },
                                title: null, // disable default single-line title
                                filename: function () {
                                    return 'GRN_List_' + new Date().toISOString().slice(0, 10); // date only
                                },
                                customize: function (csv) {
                                    const title = 'GRN List';
                                    const generatedDate = 'Generated on: ' + moment().format('DD/MM/YYYY'); // only date

                                    // Estimate spaces to center (adjust if needed)
                                    const spaces = '          '; // 10 spaces for rough centering
                                    return spaces + title + '\n' + spaces + generatedDate + '\n' + csv;
                                }
                            }
                        ]
                    }
                },
                responsive: true,
                paging: true,
                searching: true,
                ordering: false
            });

            //  Master checkbox (select all)
            $('#selectAllNewTask').on('click', function () {
                var checked = this.checked;
                $('.row-select').prop('checked', checked);
            });


            $('#newTaskTable').on('draw.dt', function () {
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            });

            // 🔹 Initialize tooltips for export buttons
            $('#exportContainer [data-bs-toggle="tooltip"]').tooltip({
                template: '<div class="tooltip" role="tooltip"><div class="tooltip-inner bg-dark text-white"></div></div>'
            });

            table.on('buttons-action.dt', function () {
                $('#exportContainer [data-bs-toggle="tooltip"]').tooltip({
                    template: '<div class="tooltip" role="tooltip"><div class="tooltip-inner bg-dark text-white"></div></div>'
                });
            });

        } else {
            console.warn("No GRN ID provided, skipping DataTable init.");
        }
    });


    //this function used to  open modal of new task inspectionfrom is shown

    function openInspecForm(itemCode) {
        var inspecModal = new bootstrap.Modal(document.getElementById('inspecModal'));
        inspecModal.show();

        $('#inspecModalBody').html('<div class="text-center text-muted">Loading...</div>');
        $.ajax({
            url: '/Quality/InspecFormRG',
            type: 'GET',
            data: { id: itemCode },
            success: function (res) {
                $('#inspecModalBody').html(res);

                var item = $('#inspecModalBody').find('#itemcode').val();
                loadParameters(item);
            },
            error: function () {
                $('#inspecModalBody').html('<div class="text-danger text-center">Failed to load form.</div>');
            }
        });
    }

    //this function for load parameters
    function loadParameters(itemcode) {
        if (!itemcode) {
            console.warn('loadParameters: itemcode is empty');
            $('#inspecModalBody #tbody').html('<tr><td colspan="2" class="text-center text-muted">No item code</td></tr>');

            return;
        }

        console.log("Loading parameters for:", itemcode);


        //this is parameter grid load
        $.ajax({
            url: '/Quality/ParameterTableRG',
            type: 'GET',
            dataType: 'json',
            data: { id: itemcode },
            success: function (res) {
                var $tbody = $('#inspecModalBody').find('#tbody');
                $tbody.empty();

                if (res && res.length > 0) {
                    res.forEach(function (item, idx) {
                        var param = item.Parameters || item.Parameter || '';
                        $tbody.append(
                            '<tr><td class="text-center">' + (idx + 1) + '</td>' +
                            '<td>' + param + '</td></tr>');
                    });
                } else {
                    $tbody.append('<tr><td colspan="2" class="text-center text-muted">No parameters found</td></tr>');
                }
            },
            error: function (xhr, status, err) {
                console.error('ParameteRTable error:', err);
                var $tbody = $('#inspecModalBody').find('#tbody');
                $tbody.html('<tr><td colspan="2" class="text-danger text-center">Failed to load parameters</td></tr>');
            },


        });
    }




</script>
