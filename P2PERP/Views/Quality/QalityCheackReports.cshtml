<style>
    body {
        background: #f8f9fa;
    }

    .chart-card {
        background: #fff;
        border-radius: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        padding: 20px;
        transition: transform 0.2s ease-in-out;
        width: 100%;
    }

        .chart-card:hover {
            transform: translateY(-5px);
        }

    h4 {
        font-weight: 600;
    }

    /* 🔹 Tabs styling */
    .nav-pills .nav-link {
        padding: 6px 14px;
        font-size: 14px;
        border-radius: 8px;
    }

    .nav-item.card {
        margin: 0 6px;
    }

    .tab-section {
        margin-top: 20px;
    }

    #conConfirmedItemTable tbody td,
    #conConfirmedItemTable thead th,
    #nonConConfirmedItemTable tbody td,
    #nonConConfirmedItemTable thead th,
    #pendingItemTable tbody td,
    #pendingItemTable thead th {
        text-align: center;
        vertical-align: middle;
    }

    #conConfirmedItemTable thead th,
    #nonConConfirmedItemTable thead th,
    #pendingItemTable thead th {
        background-color: black !important;
        color: white !important;
        text-align: center;
        vertical-align: middle;
    }

    .modal-header .modal-title {
        margin: 0 auto;
        text-align: center;
        width: 100%;
    }

    /* Chart container centering */
    .chart-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
    }

    #qualityChart {
        width: 100%;
        max-width: 400px;
        height: 300px;
        margin: 0 auto;
    }

    .legend-container {
        display: flex;
        justify-content: center;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }

    .legend-item {
        margin: 0 15px;
    }

    /* ✅ FIXED Checkbox Styling */
    input[type="checkbox"] {
        width: 18px;
        height: 18px;
        cursor: pointer;
    }

        input[type="checkbox"]:indeterminate {
            background-color: #007bff;
            border-color: #007bff;
        }

    .modal-backdrop.show {
        backdrop-filter: blur(5px);
        -webkit-backdrop-filter: blur(5px);
        background-color: rgba(0, 0, 0, 0.4) !important;
    }

    /* Smaller checkbox styling */
    .small-checkbox {
        width: 14px !important;
        height: 14px !important;
        transform: scale(0.85);
    }

    /* Modal positioning - ADDED */
    .modal-dialog-centered {
        display: flex;
        align-items: center;
        min-height: calc(100% - 1rem);
    }

    /* Modal header centering - ADDED */
    .modal-header.justify-content-center {
        position: relative;
    }

    .modal-header .btn-close.position-absolute {
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
    }
</style>

<!-- ✅ Combined Charts Container -->
<div class="col-12 d-flex">
    <div class="chart-card w-100">

        <!-- 🔹 Header with Date Picker -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h4 class="mb-0 text-center" style="color:cornflowerblue;">Quality Check Reports</h4>

            <!-- 🔹 Date Range Picker -->
            <div class="input-group" style="max-width: 280px;">
                <span class="input-group-text bg-primary text-white">
                    <i class="bi bi-calendar-event"></i>
                </span>
                <input type="text" id="qualityDateRange" class="form-control" readonly placeholder="Select Date Range" />
            </div>
        </div>

        <!-- 🔹 Single Chart Centered -->
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-6">
                <!-- Confirmed Item Modal -->
                <div class="modal fade" id="conModal" tabindex="-1" aria-labelledby="conModalLabel" aria-hidden="true" data-bs-backdrop="True" data-bs-keyboard="false">
                    <div class="modal-dialog modal-lg modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header bg-primary text-white justify-content-center py-3">
                                <h5 class="modal-title text-white text-center w-100" id="conModalLabel">Confirmed Item List</h5>
                                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-1 mt-2 mb-2" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <table id="conConfirmedItemTable" class="table table-striped table-bordered" style="width:100%">
                                    <thead class="bg-black text-white">
                                        <tr>
                                            <th><input type="checkbox" id="conSelectAll" /></th>
                                            <th>Sr. No.</th>
                                            <th>GRN Code</th>
                                            <th>Item Code</th>
                                            <th>Item Name</th>
                                            <th>Added Date</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Non-Confirmed Modal -->
                <div class="modal fade" id="nonConModal" tabindex="-1" aria-labelledby="nonConModalLabel" aria-hidden="true" data-bs-backdrop="True" data-bs-keyboard="false">
                    <div class="modal-dialog modal-lg modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header bg-primary text-white justify-content-center py-3">
                                <h5 class="modal-title text-white text-center w-100" id="nonConModalLabel">Non-Confirmed Item List</h5>
                                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-1 mt-2 mb-2" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <table id="nonConConfirmedItemTable" class="table table-striped justify-content-center table-bordered" style="width:100%">
                                    <thead style="background-color:black; color:white;">
                                        <tr>
                                            <th><input type="checkbox" id="nonConSelectAll" /></th>
                                            <th>Sr. No.</th>
                                            <th>GRN Code</th>
                                            <th>Item Code</th>
                                            <th>Item Name</th>
                                            <th>Description</th>
                                            <th>Added Date</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Pending Item Modal - FIXED VERSION -->
                <div class="modal fade" id="pendingModal" tabindex="-1" aria-labelledby="pendingModalLabel" aria-hidden="true" data-bs-backdrop="True" data-bs-keyboard="false">
                    <div class="modal-dialog modal-lg modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header bg-primary text-white justify-content-center py-3">
                                <h5 class="modal-title text-white text-center w-100" id="pendingModalLabel">Pending Item List</h5>
                                <button type="button" class="btn-close btn-close-white position-absolute end-0 me-1 mt-2 mb-2" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <table id="pendingItemTable" class="table table-striped table-bordered" style="width:100%">
                                    <thead class="bg-black text-white">
                                        <tr>
                                            <th><input type="checkbox" id="pendingSelectAll" /></th>
                                            <th>Sr. No.</th>
                                            <th>GRN Code</th>
                                            <th>Item Code</th>
                                            <th>Item Name</th>
                                            <th>Added Date</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Data yahan load hoga -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Centered Chart: Confirm vs Non-Confirm vs Pending -->
                <div class="text-center">
                    <h6 class="text-center mb-3">Quality Status Distribution</h6>
                    <div class="legend-container">
                        <div class="d-flex align-items-center me-3 legend-item" id="confirmLegend" style="cursor: pointer;">
                            <span style="width:15px; height:15px; background:skyblue; display:inline-block; margin-right:6px; border-radius:50%;"></span>
                            <span>Confirm</span>
                        </div>
                        <div class="d-flex align-items-center me-3 legend-item" id="nonConfirmLegend" style="cursor: pointer;">
                            <span style="width:15px; height:15px; background:darkblue; display:inline-block; margin-right:6px; border-radius:50%;"></span>
                            <span>Non-Confirm</span>
                        </div>
                        <div class="d-flex align-items-center legend-item" id="pendingLegend" style="cursor: pointer;">
                            <span style="width:15px; height:15px; background:#FFA500; display:inline-block; margin-right:6px; border-radius:50%;"></span>
                            <span>Pending</span>
                        </div>
                    </div>
                    <div class="chart-container">
                        <div id="qualityChart"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- ✅ Tabs Section -->
<div class="tab-section">
    <ul class="nav nav-pills" id="stockTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="current-tab" data-bs-toggle="tab" data-bs-target="#current" type="button" role="tab">
                ConfirmItem
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="nonmoving-tab" data-bs-toggle="tab" data-bs-target="#nonmoving" type="button" role="tab">
                Non-ConfirmItem
            </button>
        </li>
    </ul>
</div>

<div class="tab-content mt-3">
    <div class="tab-pane fade show active" id="current" role="tabpanel">
        @Html.Partial("_ConfirmItemPR")
    </div>
    <div class="tab-pane fade" id="nonmoving" role="tabpanel">
        @Html.Partial("_NonConfirmItemPR")
    </div>
</div>

<script>
    $(document).ready(function () {
        // Global Toastr options
        toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "timeOut": "3000"
        };

        let startDate = null;
        let endDate = null;
        let currentModalTitle = "";

        // ✅ UPDATED: Date Range Picker with DD-MM-YYYY format
        $('#qualityDateRange').daterangepicker({
            autoUpdateInput: false,
            alwaysShowCalendars: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'DD-MM-YYYY',
                applyLabel: 'Apply',
                customRangeLabel: 'Custom Range'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        }, function (start, end, label) {
            // This function is called when the date range is applied
            console.log('New date range selected: ' + start.format('DD-MM-YYYY') + ' to ' + end.format('DD-MM-YYYY'));

            // Update the input field with the selected range
            $('#qualityDateRange').val(start.format('DD-MM-YYYY') + ' - ' + end.format('DD-MM-YYYY'));

            // Store the dates
            startDate = start.format('YYYY-MM-DD');
            endDate = end.format('YYYY-MM-DD');

            // Reload the chart with the new date range
            loadQualityChart(startDate, endDate);
        });

        // Apply button event handler
        $('#qualityDateRange').on('apply.daterangepicker', function (ev, picker) {
            // This event is triggered when the Apply button is clicked
            console.log('Date range applied');
        });

        // Clear logic
        $('#qualityDateRange').on('cancel.daterangepicker', function (ev, picker) {
            $(this).val('Select Date Range');
            startDate = null;
            endDate = null;
            loadQualityChart(null, null);
        });

        // Set initial placeholder value
        $('#qualityDateRange').val('Select Date Range');

        // Fixed color mapping for statuses
        const statusColorMap = {
            'Confirmed': '#87CEEB',      // skyblue
            'Non-Confirmed': '#00008B',  // darkblue
            'Pending': '#FFA500'         // orange
        };

        // Load Quality Chart - UPDATED WITH PROPER DATE FILTERING
        function loadQualityChart(start = null, end = null) {
            console.log("Loading quality chart...");
            console.log("Date range:", start, end);

            // Show loading state
            $('#qualityChart').html('<div class="text-center"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">Loading chart data...</p></div>');

            const url = '/Quality/QualityCheakPR';

            const params = {};
            if (start && end) {
                params.startDate = start;
                params.endDate = end;
                console.log("✅ Sending date filter to API:", params);
            } else {
                console.log("⚠️ No date filter applied - loading all data");
            }

            console.log("Chart API Params:", params);

            $.ajax({
                url: url,
                type: 'GET',
                data: params,
                dataType: 'json',
                success: function (response) {
                    console.log("API Response:", response);

                    const qualityData = response.data || [];
                    console.log("Quality Data:", qualityData);

                    // ✅ DEBUG: Check what data is being returned
                    qualityData.forEach(item => {
                        console.log(`Status: ${item.StatusName}, Count: ${item.TotalQc}`);
                    });

                    // Create chart data with fixed colors
                    const chartData = qualityData.map(item => {
                        const statusName = item.StatusName || 'Unknown';
                        return {
                            name: statusName,
                            y: item.TotalQc || 0,
                            count: item.TotalQc || 0,
                            color: statusColorMap[statusName] || '#6A5ACD' // default color if status not found
                        };
                    });

                    console.log("Final Chart Data:", chartData);

                    // Update legend dynamically
                    updateLegend(chartData);

                    // Render chart
                    try {
                        Highcharts.chart('qualityChart', {
                            chart: {
                                type: 'pie',
                                backgroundColor: 'transparent',
                                margin: [20, 0, 20, 0],
                                spacing: [10, 10, 10, 10]
                            },
                            title: {
                                text: null
                            },
                            tooltip: {
                                pointFormat: '<b>{point.y}</b> items ({point.percentage:.1f}%)',
                                headerFormat: '<span style="font-size: 13px">{point.key}</span><br/>'
                            },
                            legend: {
                                enabled: false
                            },
                            plotOptions: {
                                pie: {
                                    allowPointSelect: true,
                                    cursor: 'pointer',
                                    innerSize: '50%',
                                    dataLabels: {
                                        enabled: true,
                                        format: '{point.y}',
                                        style: {
                                            fontWeight: 'bold',
                                            fontSize: '14px',
                                            textOutline: 'none'
                                        },
                                        distance: -30
                                    },
                                    showInLegend: false,
                                    point: {
                                        events: {
                                            click: function () {
                                                openStatusModal(this.name);
                                            }
                                        }
                                    }
                                }
                            },
                            series: [{
                                name: 'Quality Reports',
                                colorByPoint: true,
                                data: chartData
                            }],
                            credits: {
                                enabled: false
                            }
                        });

                        console.log("Chart rendered successfully");

                    } catch (chartError) {
                        console.error("Error rendering chart:", chartError);
                        $('#qualityChart').html('<p class="text-center text-danger">Error rendering chart</p>');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error loading chart data:", error);
                    $('#qualityChart').html(`
                        <div class="text-center text-danger">
                            <i class="bi bi-exclamation-triangle fs-1"></i>
                            <p class="mt-2">Failed to load chart data</p>
                            <button class="btn btn-primary btn-sm mt-2" onclick="loadQualityChart(null, null)">Retry</button>
                        </div>
                    `);
                }
            });
        }

        // Update legend dynamically based on statuses
        function updateLegend(chartData) {
            const $legendContainer = $('.legend-container');
            $legendContainer.empty();

            chartData.forEach((item) => {
                const legendItem = `
                    <div class="d-flex align-items-center me-3 legend-item" data-status="${item.name}" style="cursor: pointer;">
                        <span style="width:15px; height:15px; background:${item.color}; display:inline-block; margin-right:6px; border-radius:50%;"></span>
                        <span>${item.name}</span>
                    </div>
                `;
                $legendContainer.append(legendItem);
            });

            // Add click handlers to new legend items
            $('.legend-item').off('click').on('click', function () {
                const statusName = $(this).data('status');
                openStatusModal(statusName);
            });
        }

        //  SIMPLIFIED STATUS MAPPING - Only your required statuses
        function getStatusConfig(statusName) {
            switch (statusName) {
                case 'Confirmed':
                    return {
                        modal: '#conModal',
                        tableId: '#conConfirmedItemTable',
                        api: '/Quality/ConfirmedItemDetailsPSR',
                        cols: 6,
                        title: 'Confirmed Item List'
                    };
                case 'Non-Confirmed':
                    return {
                        modal: '#nonConModal',
                        tableId: '#nonConConfirmedItemTable',
                        api: '/Quality/FailedItemsGraphPR',
                        cols: 7,
                        title: 'Non-Confirmed Item List'
                    };
                case 'Pending':
                    return {
                        modal: '#pendingModal',
                        tableId: '#pendingItemTable',
                        api: '/Quality/PendingItemsGraphPR',
                        cols: 6,
                        title: 'Pending Item List'
                    };
                default:
                    console.error(`Unknown status: ${statusName}`);
                    return null;
            }
        }

        // Open modal based on status name - UPDATED WITH DATE FILTERING
        function openStatusModal(statusName) {
            console.log("Opening modal for status:", statusName);
            console.log("Current date range:", startDate, endDate);

            const statusConfig = getStatusConfig(statusName);
            if (!statusConfig) {
                toastr.error(`Unknown status: ${statusName}`);
                return;
            }

            // Store the current modal title for exports
            currentModalTitle = statusConfig.title;

            // Update modal title
            $(`${statusConfig.modal} .modal-title`).text(statusConfig.title);

            // Show modal
            $(statusConfig.modal).modal('show');

            const params = {};
            if (startDate && endDate) {
                params.startDate = startDate;
                params.endDate = endDate;
                console.log(`✅ Applying date filter for ${statusName}:`, params);
            } else {
                console.log(`⚠️ No date filter for ${statusName}`);
            }

            // Load data for the specific status
            loadModalData(statusConfig.tableId, statusConfig.api, params, statusConfig.cols, statusName);
        }

        // Common function to load modal data - UPDATED WITH BETTER LOGGING
        function loadModalData(tableId, url, params, colCount, statusName) {
            console.log(`Loading modal data from: ${url}`, params);

            $.ajax({
                url: url,
                type: 'GET',
                data: params,
                dataType: 'json',
                success: function (data) {
                    const items = Array.isArray(data) ? data : (data?.data || []);
                    const $tbody = $(`${tableId} tbody`);

                    // Destroy existing DataTable if any
                    if ($.fn.DataTable.isDataTable(tableId)) {
                        $(tableId).DataTable().destroy();
                    }

                    $tbody.empty();

                    if (items.length > 0) {
                        console.log(`✅ Loaded ${items.length} ${statusName} items`);
                        
                        items.forEach((item, index) => {
                            let row = '';
                            if (colCount === 6) {
                                // Confirmed OR Pending items format (6 columns)
                                const dateToShow = item.QualityCheckDate || item.ItemAddedDate || item.AddedDate || '';
                                row = `<tr>
                                    <td><input type="checkbox" class="row-select small-checkbox" /></td>
                                    <td>${index + 1}</td>
                                    <td>${item.GRNCode || ''}</td>
                                    <td>${item.ItemCode || ''}</td>
                                    <td>${item.ItemName || ''}</td>
                                    <td>${dateToShow}</td>
                                </tr>`;
                            } else if (colCount === 7) {
                                // Non-Confirmed items format (7 columns - with Reason)
                                row = `<tr>
                                    <td><input type="checkbox" class="row-select small-checkbox" /></td>
                                    <td>${index + 1}</td>
                                    <td>${item.GRNCode || ''}</td>
                                    <td>${item.ItemCode || ''}</td>
                                    <td>${item.ItemName || ''}</td>
                                    <td>${item.Reason || item.Status || statusName || ''}</td>
                                    <td>${item.AddedDate || ''}</td>
                                </tr>`;
                            }
                            $tbody.append(row);
                        });
                    } else {
                        console.log(`❌ No ${statusName} items found for selected date range`);
                        $tbody.append(`<tr><td colspan="${colCount}" class="text-center text-muted">No ${statusName} records found for selected date range</td></tr>`);
                    }

                    // Initialize DataTable with export buttons
                    initializeDataTableWithButtons(tableId, statusName, colCount);

                    // ✅ Initialize checkbox handlers for this table
                    const selectAllId = getSelectAllId(tableId);
                    initializeCheckboxHandlers(tableId, selectAllId);

                    // Reset select all checkbox
                    $(selectAllId).prop('checked', false).prop('indeterminate', false);

                },
                error: function (xhr, status, error) {
                    console.error("Error loading modal data:", error);
                    const $tbody = $(`${tableId} tbody`);
                    $tbody.empty().append(`<tr><td colspan="${colCount}" class="text-center text-danger">Error loading ${statusName} data</td></tr>`);
                }
            });
        }

        // PERFECT CHECKBOX FUNCTIONALITY - WITH SMALLER SIZE
        function initializeCheckboxHandlers(tableId, selectAllId) {
            const $table = $(tableId);
            const $selectAll = $(selectAllId);
            const $tbody = $table.find('tbody');

            // Apply smaller checkbox size
            $tbody.find('.row-select').addClass('small-checkbox');
            $selectAll.addClass('small-checkbox');

            // Select All functionality
            $selectAll.off('change').on('change', function () {
                const isChecked = $(this).prop('checked');
                $tbody.find('.row-select').prop('checked', isChecked);
                updateSelectAllState(tableId, selectAllId);
            });

            // Individual row checkbox functionality
            $tbody.off('change', '.row-select').on('change', '.row-select', function () {
                updateSelectAllState(tableId, selectAllId);
            });
        }

        //  Update Select All checkbox state - FIXED BEHAVIOR
        function updateSelectAllState(tableId, selectAllId) {
            const $table = $(tableId);
            const $selectAll = $(selectAllId);
            const totalRows = $table.find('tbody .row-select').length;
            const checkedRows = $table.find('tbody .row-select:checked').length;

            console.log(`Table: ${tableId}, Total: ${totalRows}, Checked: ${checkedRows}`);

            // Clear indeterminate state first
            $selectAll.prop('indeterminate', false);

            if (checkedRows === 0) {
                // No rows selected
                $selectAll.prop('checked', false);
            } else if (checkedRows === totalRows) {
                // All rows selected
                $selectAll.prop('checked', true);
            } else {
                // Some rows selected - select all should be unchecked
                $selectAll.prop('checked', false);
            }
        }

        //  Helper function to get select all ID from table ID
        function getSelectAllId(tableId) {
            const tableMap = {
                '#conConfirmedItemTable': '#conSelectAll',
                '#nonConConfirmedItemTable': '#nonConSelectAll',
                '#pendingItemTable': '#pendingSelectAll'
            };
            return tableMap[tableId] || '#conSelectAll';
        }

        //  Initialize all checkbox handlers
        function initializeAllCheckboxHandlers() {
            initializeCheckboxHandlers('#conConfirmedItemTable', '#conSelectAll');
            initializeCheckboxHandlers('#nonConConfirmedItemTable', '#nonConSelectAll');
            initializeCheckboxHandlers('#pendingItemTable', '#pendingSelectAll');
        }

        // Initialize DataTable with export buttons
        function initializeDataTableWithButtons(tableId, title, columnCount) {
            $(tableId).DataTable({
                ordering: false,
                pageLength: 5,
                responsive: true,
                dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center mt-2"ip>',
                buttons: getTableButtons(title, tableId, columnCount)
            });
        }

        // Common table buttons configuration
        function getTableButtons(title, tableId, columnCount) {
            return [
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    title: currentModalTitle,
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    const selectedRows = $(tableId).find('tbody tr').filter(function () {
                                        return $(this).find('.row-select').prop('checked');
                                    });
                                    const currentRowIndex = selectedRows.index(node.parentNode);
                                    return currentRowIndex + 1;
                                }
                                return data;
                            }
                        }
                    },
                    customize: function (win) {
                        $(win.document.body).find('h1').css('text-align', 'center');
                        $(win.document.body).find('h1').css('font-size', '18px');
                        $(win.document.body).find('h1').css('margin-bottom', '20px');
                    },
                    action: function (e, dt, button, config) {
                        const selected = $(`${tableId} input.row-select:checked`).length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    }
                },
                {
                    extend: 'pdf',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    title: currentModalTitle,
                    filename: currentModalTitle.replace(/\s+/g, '_'),
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    const selectedRows = $(tableId).find('tbody tr').filter(function () {
                                        return $(this).find('.row-select').prop('checked');
                                    });
                                    const currentRowIndex = selectedRows.index(node.parentNode);
                                    return currentRowIndex + 1;
                                }
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        const selected = $(`${tableId} input.row-select:checked`).length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    customize: function (doc) {
                        doc.pageMargins = [40, 60, 40, 40];
                        doc.styles.title = {
                            fontSize: 16,
                            bold: true,
                            alignment: 'center',
                            margin: [0, 0, 0, 10]
                        };

                        doc.content.splice(1, 0, {
                            text: `Generated on: ${moment().format("DD-MM-YYYY")}`,
                            alignment: 'center',
                            margin: [0, 0, 0, 10],
                            fontSize: 10,
                            italics: true
                        });

                        const table = doc.content.find(n => n.table);
                        if (table) {
                            table.table.widths = Array(table.table.body[0].length).fill('*');
                            table.layout = {
                                hLineWidth: () => 0.5,
                                vLineWidth: () => 0.5,
                                hLineColor: () => '#aaa',
                                vLineColor: () => '#aaa',
                                fillColor: (i) => i === 0 ? '#343a40' : null,
                                paddingLeft: () => 5,
                                paddingRight: () => 5
                            };

                            table.table.body[0].forEach(cell => {
                                cell.fillColor = '#343a40';
                                cell.color = 'white';
                                cell.alignment = 'center';
                                cell.fontSize = 11;
                                cell.bold = true;
                            });

                            table.table.body.forEach((row, rowIndex) => {
                                if (rowIndex > 0) {
                                    row.forEach(cell => {
                                        cell.alignment = 'center';
                                    });
                                }
                            });

                            table.alignment = 'center';
                        }

                        doc.defaultStyle = {
                            alignment: 'center'
                        };
                    }
                },
                {
                    extend: 'excel',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    title: currentModalTitle,
                    filename: currentModalTitle.replace(/\s+/g, '_'),
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    const selectedRows = $(tableId).find('tbody tr').filter(function () {
                                        return $(this).find('.row-select').prop('checked');
                                    });
                                    const currentRowIndex = selectedRows.index(node.parentNode);
                                    return currentRowIndex + 1;
                                }
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        const selected = $(`${tableId} input.row-select:checked`).length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                },
                {
                    extend: 'csv',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    title: currentModalTitle,
                    filename: currentModalTitle.replace(/\s+/g, '_'),
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':not(:first-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 1) {
                                    const selectedRows = $(tableId).find('tbody tr').filter(function () {
                                        return $(this).find('.row-select').prop('checked');
                                    });
                                    const currentRowIndex = selectedRows.index(node.parentNode);
                                    return currentRowIndex + 1;
                                }
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        const selected = $(`${tableId} input.row-select:checked`).length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    }
                }
            ];
        }

        //  Initialize all checkbox handlers on document ready
        initializeAllCheckboxHandlers();

        // Initial load
        loadQualityChart(null, null);

        // Add retry button functionality to window object
        window.loadQualityChart = loadQualityChart;
    });
</script>