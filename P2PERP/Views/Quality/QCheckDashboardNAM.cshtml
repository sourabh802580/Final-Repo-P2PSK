
@{
    ViewBag.Title = "QCheckDashboardNAM";
}



<style>
    .stat-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 250px;
        height: 120px;
        border-radius: 12px;
        font-weight: bold;
        text-align: center;
        transition: transform 0.2s, box-shadow 0.2s;
        cursor: pointer;
        margin: auto;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

        .stat-card:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 18px rgba(0,0,0,0.25);
        }

        .stat-card .count {
            font-size: 32px;
            margin-bottom: 6px;
            color: #000;
        }

        .stat-card .label {
            font-size: 14px;
            font-weight: 500;
        }


    .pending {
        background-color: #ffb700;
        color: white;
    }

    .confirm {
        background-color: #007bff;
        color: white;
    }

    .nonconfirm {
        background-color: #ff0000;
        color: white;
    }

    .dt-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
    }

    .dt-left {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .chart-container {
        position: relative;
        flex: 1 1 45%;
        max-width: 600px;
        margin: 0 auto;
        height: 300px;
    }


    .chartparent {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        gap: 20px;
        margin-top: 20px;
    }

    .Confirm-list-body, .Nonconfirm-list-body {
        max-height: 400px;
        overflow-y: auto;
        overflow-x: auto;
        padding: 10px 15px;
    }

        .Confirm-list-body table, .Nonconfirm-list-body table {
            width: 700%;
            table-layout: fixed;
        }

        .Confirm-list-body td, .Nonconfirm-list-body td {
            word-wrap: break-word;
            white-space: normal;
        }

    #reportrange {
        font-size: 14px;
    }

    .visually-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        border: 0;
    }

    .confirm-list-body,
    .nonconfirm-list-body {
        max-height: 400px;
        overflow-y: auto;
        overflow-x: auto;
        padding: 15px;
    }

    .calendar-btn {
        background-color: #6f42c1;
        color: white;
        border: none;
        border-radius: 6px;
        padding: 10px 14px;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .calendar-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);
        }




    #confirmModal .btn-close,
    #NonconfirmModal .btn-close {
        filter: invert(1); /* turns black × to white */
        opacity: 1 !important; /* full visibility */
    }

    #toastContainer {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 2000;
    }

    /* Define your purple header background */
    .bg-purple {
        background-color: #6f42c1 !important;
    }

    /* Ensure header always displays properly */
    .modal-header {
        display: flex !important;
        align-items: center;
        justify-content: center;
        position: relative;
        z-index: 1056;
    }


    /* Fix if header hidden due to overflow */
    .modal-content {
        overflow: visible !important;
        position: relative;
        z-index: 1055;
    }

    /* Ensure white text stays visible */
    .modal-title {
        color: #fff !important;
    }
</style>
<div class="container bg-white shadow-lg rounded-4 p-5 my-4" style="max-width: 95%;">

    <div class="row g-4 justify-content-center">
        <div class="col-md-3 d-flex justify-content-center">
            <div class="stat-card pending">
                <div class="mb-2"><i class="bi bi-hourglass-split fs-3"></i></div>
                <div class="count" id="pending">0</div>
                <div class="label">Pending Count</div>
            </div>
        </div>
        <div class="col-md-3 d-flex justify-content-center">
            <div class="stat-card confirm">
                <div class="mb-2"><i class="bi bi-check-circle fs-3"></i></div>
                <div class="count" id="confirm">0</div>
                <div class="label">Confirm Items Count</div>
            </div>
        </div>
        <div class="col-md-3 d-flex justify-content-center">
            <div class="stat-card nonconfirm">
                <div class="mb-2"><i class="bi bi-x-circle fs-3"></i></div>
                <div class="count" id="nonconfirm">0</div>
                <div class="label">NonConfirm Items Count</div>
            </div>
        </div>
        </div>
        <!-- Date Button (fixed position) -->
        <button id="calendarTrigger"
                class="btn btn-primary rounded-circle shadow-lg position-fixed"
                style="top: 70px; right: 20px; width: 60px; height: 60px; z-index: 1050;">
            <i class="bi bi-calendar-date fs-4"></i>
        </button>

        <!-- Hidden input used for daterangepicker -->
        <input type="text" id="reportrange" class="form-control position-fixed"
               style="top: 70px; right: 20px; width: 1px; height: 1px; opacity: 0; z-index: -1;" />

        <!-- Only one toast container -->
        <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 2000;"></div>

        <div class="chartparent">
            <div class="chart-container" id="doughnutChart"></div>
        </div>
    </div>


<!-- Confirm Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" style="max-width: 1200px; width: 95%; min-height: 600px;">
        <div class="modal-content" style="min-height: 600px;">

            <!-- Modal Header -->
            <div class="modal-header bg-purple justify-content-center">
                <h5 class="modal-title w-100 text-center text-white">Confirm List</h5>
                <button type="button" class="btn-close position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body Confirm-list-body" style="max-height: 500px; overflow-y: auto;">
                <!-- Date Filter Container -->
                <div id="confirmDateFilterContainer" class="mb-3"></div>
                <!-- Table -->
                <div class="table-responsive">
                    <table class="table table-striped table-hover table-bordered" id="confirmTable">
                        <thead class="table-dark">
                            <tr>
                                <th class="text-center"><input type="checkbox" id="selectAllConfirm" /></th>
                                <th class="text-center">Sr.No</th>
                                <th class="text-center">QualityCheckCode</th>
                                <th class="text-center">ItemName</th>
                                <th class="text-center">Quantity</th>
                                <th class="text-center">Added By</th>
                                <th class="text-center">Added Date</th>
                            </tr>
                        </thead>
                        <tbody id="confirmListTable"></tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
</div>



<!-- NonConfirm Modal -->
<div class="modal fade" id="NonconfirmModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" style="max-width: 1200px; width: 95%; min-height: 600px;">
        <div class="modal-content" style="min-height: 600px;">

            <!-- Modal Header -->
            <div class="modal-header bg-purple justify-content-center">
                <h5 class="modal-title w-100 text-center text-white">Non-Confirm List</h5>
                <button type="button" class="btn-close position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body Nonconfirm-list-body" style="max-height: 500px; overflow-y: auto;">
                <!-- Date Filter Container -->
                @*<div id="NonconfirmDateFilterContainer" class="mb-3"></div>*@
                <!-- Table -->
                <div class="table-responsive">
                    <table class="table table-striped table-hover table-bordered" id="NonconfirmTable">
                        <thead class="table-dark">
                            <tr>
                                <th class="text-center"><input type="checkbox" id="selectAllNonConfirm" /></th>
                                <th class="text-center">Sr.No</th>
                                <th class="text-center">QualityCheckCode</th>
                                <th class="text-center">ItemName</th>
                                <th class="text-center">Quantity</th>
                                <th class="text-center">Added By</th>
                                <th class="text-center">Added Date</th>
                            </tr>
                        </thead>
                        <tbody id="NonconfirmListTable"></tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        loadDashboardData(); // initial load
        initDateRangePicker();

        // Open datepicker on calendar button click
        $('#calendarTrigger').on('click', function () {
            $('#reportrange').data('daterangepicker').show();
        });
    });

    // Toast Notification
    function showToast(message, type = 'warning') {
        // Map to Bootstrap contextual colors
        let icon = '';
        let progressColor = '';

        switch (type) {
            case 'success':
                icon = '<i class="bi bi-check-circle-fill me-2"></i>';
                progressColor = 'bg-light';
                break;
            case 'warning':
                icon = '<i class="bi bi-exclamation-triangle-fill me-2"></i>';
                progressColor = 'bg-dark';
                break;
            case 'info':
                icon = '<i class="bi bi-info-circle-fill me-2"></i>';
                progressColor = 'bg-light';
                break;
            default: // error
                icon = '<i class="bi bi-x-circle-fill me-2"></i>';
                progressColor = 'bg-light';
        }

        const toastId = `toast-${Date.now()}`;

        // ✅ Toast HTML with white text for all
        const toastHTML = `
<div id="${toastId}" class="toast align-items-center bg-${type} border-0 mb-2 shadow-lg"
                         role="alert" aria-live="assertive" aria-atomic="true"
                         data-bs-delay="3000" data-bs-animation="true">
                        <div class="d-flex">
                            <div class="toast-body d-flex align-items-center text-white">
                                ${icon} ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto"
                                    data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="progress" style="height: 3px; margin:0; background: rgba(255,255,255,0.3);">
                    <div class="progress-bar" role="progressbar"></div>
</div>

</div>`;

        const $toast = $(toastHTML);
        $('#toastContainer').prepend($toast); // newestOnTop

        // ✅ Initialize bootstrap toast
        const toast = new bootstrap.Toast($toast[0], { delay: 3000 });
        toast.show();

        // ✅ Animate progress bar
        $toast.find('.progress-bar')
            .css({
                width: "100%",
                float: "right",
                backgroundColor: "black"
            })
            .animate(
                { width: "0%" },
                { duration: 3000, easing: "linear" }
            );



        // ✅ Auto-remove
        $toast.on('hidden.bs.toast', function () {
            $(this).remove();
        });
    }

    // === Dashboard Data ===
    function loadDashboardData(startDate = null, endDate = null) {
        let requestData = {};
        if (startDate && endDate) {
            requestData = { startDate: startDate, endDate: endDate };
        }
        $.ajax({
            url: '/Quality/GetConfirmCountNAM',
            type: 'GET',
            data: requestData,
            success: function (data) {
                if (data) {
                    $('#confirm').text(data.ConfirmCount);
                    $('#nonconfirm').text(data.NonConfirmCount);
                    $('#pending').text(data.PendingCount );
                    renderDoughnutChart(data.ConfirmCount, data.NonConfirmCount, data.PendingCount );

                  
                }
            }
        });
    }

    // === Pie Chart ===
    function renderDoughnutChart(c, n, p) {
        Highcharts.chart('doughnutChart', {
            chart: { type: 'pie' },
            title: { text: 'Pending / Confirm / NonConfirm' },
            plotOptions: {
                pie: {
                    cursor: 'pointer',
                    dataLabels: { enabled: true, format: '{point.name}: {point.y}' },
                    point: {
                        events: {
                            click: function () {
                                if (this.name === 'Confirm') loadConfirmList();
                                else if (this.name === 'Non Confirm') loadNonConfirmList();
                                else if (this.name === 'Pending');

                            }
                        }
                    }
                }
            },
            series: [{
                data: [
                    { name: 'Confirm', y: c, color: '#007bff' },
                    { name: 'Non Confirm', y: n, color: '#ff0000' },
                    { name: 'Pending', y: p, color: '#ff0000' }

                ]
            }]
        });
    }
  // Attach Date Filter
    function attachDateFilter(container, tableId, table, colIndex) {
        $(container).html(`<div class="input-group" style="max-width:280px;">
     <span class="input-group-text bg-primary text-white"><i class="bi bi-calendar-date"></i></span>
     <input type="text" class="form-control dateFilterInput" placeholder="Select date range" readonly />
 </div>`);
        $(container + ' .dateFilterInput').daterangepicker({ autoUpdateInput: false, locale: { cancelLabel: 'Clear' } }, function (start, end) {
            $(container + ' .dateFilterInput').val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));
            $.fn.dataTable.ext.search.push((s, data) => { if (s.nTable.id !== tableId.substring(1)) return true; return moment(data[colIndex], 'DD/MM/YYYY').isBetween(start, end, undefined, '[]'); });
            table.draw();
            $.fn.dataTable.ext.search.pop();
        });
        $(container + ' .dateFilterInput').on('cancel.daterangepicker', function () { $(this).val(''); table.draw(); });
    }

    function loadNonConfirmList() {
        $.get('/Quality/GetNonConfirmedListNAM',

            d => {
                var r = '';
                if (d && d.length) {
                    $.each(d, (i, x) => {
                        r += `<tr>
      <td class="text-center"><input type="checkbox" class="Nonconfirm-row-select" value="${x.QualityCheckCode}" /></td>
      <td class="text-center">${i + 1}</td>
      <td class="text-center">${x.QualityCheckCode}</td>
      <td class="text-center">${x.ItemName}</td>
      <td class="text-center">${x.Quantity}</td>
      <td class="text-center">${x.AddedBy}</td>
                                <td>${moment(x.AddedDate).format('DD/MM/YYYY')}</td>
    </tr>`;
                    });
                }
                else r = '<tr><td colspan="6" class="text-center">No Records</td></tr>';
                $('#NonconfirmListTable').html(r);
                if ($.fn.DataTable.isDataTable('#NonconfirmTable')) $('#NonconfirmTable').DataTable().destroy();
                let t = $('#NonconfirmTable').DataTable({
                    dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>>',
                    ordering: false,
                  
                    buttons: [
                        // Print button
                        {
                            extend: 'print',
                            text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                            titleAttr: 'Print Selected',
                            action: function (e, dt, button, config) {
                                if ($('#NonconfirmTable .Nonconfirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to print!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.Nonconfirm-row-select').prop('checked');
                                },
                                columns: ':visible:not(:first-child):not(:last-child)',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'Non-confirmlist ',
                            customize: function (win) {
                                // 🔹 Change title style
                                $(win.document.body).find('h1')
                                    .css('text-align', 'center')
                                    .css('font-size', '16pt')
                                    .css('font-weight', 'bold')
                                    .css('color', 'black');

                                // 🔹 Add generated date below title
                                $(win.document.body).prepend(
                                    `<div style="text-align:center; font-size:12pt; font-style:italic; margin-bottom:10px;">
                                                         Generated on: ${new Date().toLocaleString()}
                                                      </div>`
                                );

                                // 🔹 Style table headers
                                $(win.document.body).find('table thead th')
                                    .css('background-color', 'black')
                                    .css('color', 'white')
                                    .css('font-weight', 'bold')
                                    .css('text-align', 'center');
                            }
                        },
                        // PDF export button
                        {
                            extend: 'pdfHtml5',
                            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                            titleAttr: 'Export to PDF',
                            action: function (e, dt, button, config) {
                                if ($('#NonconfirmTable .Nonconfirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.Nonconfirm-row-select').prop('checked');
                                },
                                columns: ':visible:not(:first-child):not(:last-child)',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'Non-confirmlist',
                            filename: function () {
                                return 'GRN_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            },
                            customize: function (doc) {
                                doc.styles.title = {
                                    fontSize: 16,
                                    bold: true,
                                    alignment: 'center',
                                    color: 'black',

                                };

                                doc.content.splice(1, 0, {
                                    text: 'Generated on: ' + new Date().toLocaleDateString(),
                                    fontSize: 12,
                                    italics: true,
                                    alignment: 'center',
                                    margin: [0, 0, 0, 10]
                                });
                                var tableNode = doc.content[doc.content.length - 1].table;
                                var headerCells = tableNode.body[0];
                                headerCells.forEach(function (cell) {
                                    cell.fillColor = 'black';
                                    cell.color = 'white';
                                    cell.bold = true;
                                    cell.alignment = 'center';
                                });
                                tableNode.layout = {
                                    paddingLeft: () => 30, paddingLeft: () => 6,

                                };
                                var colCount = tableNode.body[0].length;
                                tableNode.widths = new Array(colCount).fill('*'); // distribute evenly
                            }
                        },

                        // Excel export button
                        {
                            extend: 'excelHtml5',
                            text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                            titleAttr: 'Export to Excel',
                            action: function (e, dt, button, config) {
                                if ($('#NonconfirmTable .Nonconfirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.Nonconfirm-row-select').prop('checked');
                                },
                                columns: ':visible',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'Nonconfirmlist',
                            filename: function () {
                                return 'non-confirm_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            },
                            customize: function (xlsx) {
                                var sheet = xlsx.xl.worksheets['sheet1.xml'];
                                $('row:first c', sheet).attr('s', '2'); // ✅ bold header
                            }
                        },
                        // CSV export button
                        {
                            extend: 'csvHtml5',
                            text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                            titleAttr: 'Export to CSV',
                            action: function (e, dt, button, config) {
                                if ($('#NonconfirmTable .Nonconfirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.Nonconfirm-row-select').prop('checked');
                                },
                                columns: ':visible',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            if (column === 3) {
                                                // Convert to proper DD-MM-YYYY
                                                if (moment(data, 'DD-MM-YYYY', true).isValid()) {
                                                    return moment(data, 'DD-MM-YYYY').format('DD-MM-YYYY');
                                                }
                                                // fallback if data is ISO or DB format
                                                if (moment(data).isValid()) {
                                                    return moment(data).format('DD-MM-YYYY');
                                                }
                                                return data; // leave unchanged if not a date
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'NonConfirm-List',
                            filename: function () {
                                return 'nonconfirm_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            }
                        }
                    ],
                });

                attachDateFilter('#NonconfirmDateFilterContainer', '#NonconfirmTable', t, 5);
                $("#NonconfirmModal").modal("show");
            });
        $('#selectAllNonConfirm').on('click', function () {
            var checked = this.checked;
            $('#NonconfirmTable .Nonconfirm-row-select').prop('checked', checked);
        });
    }



    // Load Confirm List
    function loadConfirmList() {
        $.get('/Quality/GetConfirmedListNAM',

            d => {
                var r = '';
                if (d && d.length) {
                    $.each(d, (i, x) => {
                        r += `<tr>
         <td class="text-center"><input type="checkbox" class="confirm-row-select" value="${x.QualityCheckCode}" /></td>
         <td class="text-center">${i + 1}</td>
         <td class="text-center">${x.QualityCheckCode}</td>
         <td class="text-center">${x.ItemName}</td>
         <td class="text-center">${x.Quantity}</td>
         <td class="text-center">${x.AddedBy}</td>
                                <td>${moment(x.AddedDate).format('DD/MM/YYYY')}</td>
       </tr>`;
                    });
                }
                else r = '<tr><td colspan="6" class="text-center">No Records</td></tr>';
                $('#confirmListTable').html(r);
                if ($.fn.DataTable.isDataTable('#confirmTable')) $('#confirmTable').DataTable().destroy();
                let t = $('#confirmTable').DataTable({
                    dom: '<"dt-toolbar"<"dt-left"B><"dt-search"f>>rt<"bottom d-flex justify-content-between align-items-center"ip>>',
                    ordering: false,
                    buttons: [
                        // Print button
                        {
                            extend: 'print',
                            text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                            titleAttr: 'Print Selected',
                            action: function (e, dt, button, config) {
                                if ($('#confirmTable .confirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to print!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.confirm-row-select').prop('checked');
                                },
                                columns: ':visible:not(:first-child):not(:last-child)',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'Confirm-list',
                            customize: function (win) {
                                // 🔹 Change title style
                                $(win.document.body).find('h1')
                                    .css('text-align', 'center')
                                    .css('font-size', '16pt')
                                    .css('font-weight', 'bold')
                                    .css('color', 'black');

                                // 🔹 Add generated date below title
                                $(win.document.body).prepend(
                                    `<div style="text-align:center; font-size:12pt; font-style:italic; margin-bottom:10px;">
                                                            Generated on: ${new Date().toLocaleString()}
                                                         </div>`
                                );

                                // 🔹 Style table headers
                                $(win.document.body).find('table thead th')
                                    .css('background-color', 'black')
                                    .css('color', 'white')
                                    .css('font-weight', 'bold')
                                    .css('text-align', 'center');
                            }
                        },
                        // PDF export button
                        {
                            extend: 'pdfHtml5',
                            text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                            titleAttr: 'Export to PDF',
                            action: function (e, dt, button, config) {
                                if ($('#confirmTable .confirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.confirm-row-select').prop('checked');
                                },
                                columns: ':visible:not(:first-child):not(:last-child)',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'Confirm List',
                            filename: function () {
                                return 'confirm_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            },
                            customize: function (doc) {
                                doc.styles.title = {
                                    fontSize: 16,
                                    bold: true,
                                    alignment: 'center',
                                    color: 'black',

                                };

                                doc.content.splice(1, 0, {
                                    text: 'Generated on: ' + new Date().toLocaleDateString(),
                                    fontSize: 12,
                                    italics: true,
                                    alignment: 'center',
                                    margin: [0, 0, 0, 10]
                                });
                                var tableNode = doc.content[doc.content.length - 1].table;
                                var headerCells = tableNode.body[0];
                                headerCells.forEach(function (cell) {
                                    cell.fillColor = 'black';
                                    cell.color = 'white';
                                    cell.bold = true;
                                    cell.alignment = 'center';
                                });
                                tableNode.layout = {
                                    paddingLeft: () => 30, paddingLeft: () => 6,

                                };
                                var colCount = tableNode.body[0].length;
                                tableNode.widths = new Array(colCount).fill('*'); // distribute evenly
                            }
                        },

                        // Excel export button
                        {
                            extend: 'excelHtml5',
                            text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                            titleAttr: 'Export to Excel',
                            action: function (e, dt, button, config) {
                                if ($('#confirmTable .confirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.confirm-row-select:checked').prop('checked');
                                },
                                columns: ':visible',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'Confirm-list',
                            filename: function () {
                                return 'confirm_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            },
                            customize: function (xlsx) {
                                var sheet = xlsx.xl.worksheets['sheet1.xml'];
                                $('row:first c', sheet).attr('s', '2'); // ✅ bold header
                            }
                        },
                        // CSV export button
                        {
                            extend: 'csvHtml5',
                            text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                            titleAttr: 'Export to CSV',
                            action: function (e, dt, button, config) {
                                if ($('#confirmTable .confirm-row-select:checked').length === 0) {
                                    showToast("Please select at least one row to export!", "warning");
                                    return;
                                }
                                $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                dt.processing(false); // ✅ force remove buffering spinner
                            },
                            exportOptions: {
                                rows: function (idx, data, node) {
                                    return $(node).find('.confirm-row-select:checked').prop('checked');
                                },
                                columns: ':visible',
                                format: {
                                    body: (function () {
                                        let counter = 0;
                                        return function (data, row, column, node) {
                                            data = typeof data === 'string'
                                                ? data.replace(/<[^>]*>/g, '').trim()
                                                : data;
                                            if (column === 1) {
                                                counter++;
                                                return counter;
                                            }
                                            if (column === 3) {
                                                // Convert to proper DD-MM-YYYY
                                                if (moment(data, 'DD-MM-YYYY', true).isValid()) {
                                                    return moment(data, 'DD-MM-YYYY').format('DD-MM-YYYY');
                                                }
                                                // fallback if data is ISO or DB format
                                                if (moment(data).isValid()) {
                                                    return moment(data).format('DD-MM-YYYY');
                                                }
                                                return data; // leave unchanged if not a date
                                            }
                                            return data;
                                        };
                                    })()
                                }
                            },
                            title: 'Confirm List',
                            filename: function () {
                                return 'confirm_List_' + new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
                            }
                        }
                    ],
                });
                attachDateFilter('#confirmDateFilterContainer', '#confirmTable', t, 5);
                $("#confirmModal").modal("show");

            });
        $('#selectAllConfirm').on('click', function () {
            var checked = this.checked;
            $('#confirmTable .confirm-row-select').prop('checked', checked);
        });
    }


    // Date Range Picker for Dashboard
    function initDateRangePicker() {
        var start = moment().subtract(29, 'days');
        var end = moment();
        function cb(start, end) {
            $('#reportrange').val(start.format('YYYY-MM-DD') + ' - ' + end.format('YYYY-MM-DD'));
            loadDashboardData(start.format("YYYY-MM-DD"), end.format("YYYY-MM-DD"));
        }
        $('#reportrange').daterangepicker({
            startDate: start, endDate: end, autoUpdateInput: false,
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            },
            locale: { cancelLabel: 'Clear' }
        }, cb);

        $('#reportrange').on('cancel.daterangepicker', function () {
            $(this).val('');
            loadDashboardData();
        });
    }
    
</script>
