@{
    ViewBag.Title = "Inspection Form";
    Layout = null; // Important for modal partial
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewBag.Title</title>

    <style>


        #ncModal.show::before {
            display: block;
        }

        #ncModal .modal-dialog {
            z-index: 1050;
        }
    </style>
</head>
<body>
    <div class="container py-3">

        <div class="card shadow-lg border-0 rounded-4">
            <div class="card-body p-4">
                <form class="row g-4">
                    <input type="hidden" id="itemcode" value="@ViewBag.ItemCode" />
                    <input type="hidden" id="GRNItemCode" value="@ViewBag.GRNItemCode" />

                    <!-- GRN & Item Type -->
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">GRN No</label>
                        <input type="text" class="form-control" id="GRN" value="@ViewBag.GRN" readonly>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Item Type</label>
                        <input type="text" class="form-control" value="@ViewBag.ItemType" readonly>
                    </div>

                    <!-- Item & Plan -->
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Item Name</label>
                        <input type="text" class="form-control" value="@ViewBag.ItemName" readonly>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Plan Name</label>
                        <input type="text" class="form-control" value="@ViewBag.PlanName"readonly>
                    </div>

                    <!-- Parameters & Inspection -->
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Parameters</label>
                        <input type="text" class="form-control" id="parameter" value="@ViewBag.Parameters"readonly>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Inspection Type</label>
                        <input type="text" class="form-control" value="@ViewBag.InspectionType"readonly>
                    </div>

                    <!-- Assigned Date -->
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Assigned Date</label>
                        <input type="text" class="form-control" value="@ViewBag.AddedDate" readonly>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Quantity</label>
                        <input type="text"id="txtQuantity" class="form-control" value="@ViewBag.Quantity" readonly>
                    </div>

                    <!-- Frequency & Sample -->
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Inspection Frequency<span class="text-danger">*</span></label>
                        <input type="number" id="txtinspfreq" class="form-control" placeholder="Enter Inspection Frequency" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Sample Quality Checked <span class="text-danger">*</span></label>
                        <input type="number" id="txtSamplequalitycheck" class="form-control" placeholder="Enter Sample Quality" />
                        <span id="sampleError" class="text-danger small mt-1 d-none">Sample checked cannot be greater than Quantity.</span>
                    </div>

                    <!-- Parameter Table -->
                    <div class="col-12">
                        <div class="table-responsive mt-3">
                            <table class="table table-striped table-hover table-bordered align-middle text-center" id="paramTable">
                                <thead class="table-dark">
                                    <tr>
                                        <th style="width:10%">Sr No</th>
                                        <th>Parameter</th>
                                    </tr>
                                </thead>
                                <tbody id="tbody"></tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Buttons -->
                    <div class="col-12 d-flex justify-content-end gap-2 mt-3">
                        <button type="button" class="btn btn-success px-4" onclick="confirmModal()">
                            <i class="bi bi-check-circle me-1"></i> Confirm
                        </button>
                        <button type="button" class="btn btn-warning text-white px-4" onclick="InitiateNc()">
                            <i class="bi bi-exclamation-triangle me-1"></i> Initiate NC
                        </button>
                      
                    </div>
                </form>
            </div>
        </div>

        <!-- NonConfirm Modal -->
        <div class="modal fade" data-bs-backdrop="false" id="ncModal" tabindex="-1" aria-labelledby="ncModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content shadow-lg rounded-4">
                    <div class="modal-header bg-primary text-white position-relative">
                        <h4 class="modal-title w-100 text-center text-white" id="ncModalLabel">
                            Non Confirmation Form
                        </h4>
                        <button type="button"
                                class="btn  position-absolute top-50 end-0 translate-middle-y btn-lg fw-bold text-white"
                                style="width:40px; height:40px; font-size:24px; line-height:1;"
                                data-bs-dismiss="modal"
                                aria-label="Close">
                            &times;
                        </button>
                    </div>
                    <div class="modal-body" id="ncModalBody">
                        <div class="text-center text-muted">Loading...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Scripts *@
    <script>
        // (Your existing jQuery/AJAX scripts here...)
    </script>
    <script>
        // Load parameter list
        $(document).ready(function () {
            var id = $('#itemcode').val();

         /*   validations*/

            $('#txtSamplequalitycheck').on('input', function () {
                const $this = $(this);
                const sampleChecked = parseFloat($this.val()) || 0;
                const quantity = parseFloat($('#txtQuantity').val()) || 0;

                if (sampleChecked > quantity) {
                    // Reset to max allowed value
                    $this.val(quantity);

                    // Show red message
                    $('#sampleError')
                        .text(`⚠️ Sample checked cannot be greater than Quantity (${quantity}).`)
                        .removeClass('d-none');

                    // Highlight input in red
                    $this.addClass('is-invalid');
                } else {
                    // Hide message when valid
                    $('#sampleError').addClass('d-none');
                    $this.removeClass('is-invalid');
                }
            });


            // 🔹 Inspection Frequency Validation
            $('#txtinspfreq').on('input', function () {
                const $this = $(this);
                let freq = parseFloat($this.val()) || 0;
                const quantity = parseFloat($('#txtQuantity').val()) || 0;

                // Prevent negative value
                if (freq < 0) {
                    $this.val(0);
                    Swal.fire("⚠️ Invalid Input", "Inspection frequency cannot be negative.", "warning");
                    freq = 0;
                }

                /* Prevent exceeding quantity*/
                if (freq > quantity) {
                    $this.val(quantity);
                    if ($('#freqError').length === 0) {
                        $this.after('<span id="freqError" class="text-danger small mt-1 d-block">⚠️ Inspection frequency cannot be greater than Quantity (' + quantity + ').</span>');
                    } else {
                        $('#freqError').text(`⚠️ Inspection frequency cannot be greater than Quantity (${quantity}).`).removeClass('d-none');
                    }
                    $this.addClass('is-invalid');
                } else {
                    $('#freqError').addClass('d-none');
                    $this.removeClass('is-invalid');
                }
            });


            $.ajax({
                url: '/Quality/ParameterTableRG',
                type: 'GET',
                dataType: 'json',
                data: { id: id },
                success: function (res) {
                    $('#tbody').empty();

                    if (res && res.length > 0) {
                        res.forEach((item, index) => {
                            $('#tbody').append(`
                                <tr>
                                    <td class="text-center">${index + 1}</td>
                                    <td>${item.Parameters || ''}</td>
                                </tr>
                            `);
                        });
                    } else {
                        $('#tbody').append('<tr><td colspan="2" class="text-center text-muted">No parameters found</td></tr>');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching parameters:", error);
                    $('#tbody').html(`<tr><td colspan="2" class="text-danger text-center">Failed to load parameters</td></tr>`);
                }
            });
        });

        // Confirm QC
        function confirmModal() {
            var id = $('#GRNItemCode').val();
            var sqc = $('#txtSamplequalitycheck').val();
            var Inf = $('#txtinspfreq').val();
            var GRNCode = $('#GRN').val();

            if (!sqc || !Inf) {
                Swal.fire("⚠️ Missing Data", "Please enter Inspection Frequency and Sample Quality Checked.", "warning");
                return;
            }

            $.ajax({
                url: '/Quality/qualitycheckitemRG',
                type: 'POST',
                data: { id: id, sqc: sqc, Inf: Inf, GRNCode: GRNCode },
                success: function () {
                    Swal.fire({
                        icon: 'success',
                        title: 'Updated Successfully',
                        showConfirmButton: false,
                        timer: 1500,
                        timerProgressBar: true
                    });

                    setTimeout(() => {
                        // 1️⃣ Close modal
                        closeModal();

                        // 2️⃣ Refresh GRN table
                        initGrnTable();

                        const grnCode = $("#GRN").val();
                        if (grnCode) {
                            $("#grnGridSection").hide();
                            $("#taskSection").show();

                            // ✅ Directly load Completed tab with GRNCode
                            new bootstrap.Tab($('#completed-task-tab')).show();
                            $("#completedTaskContent").load(`/Quality/CompletedTaskListRG?id=${grnCode}`);
                        }

                    }, 1500);
                },
                error: function () {
                    Swal.fire("❌ Error", "Failed to update.", "error");
                }
            });
        }


        function InitiateNc() {
            const GRIcode = $('#GRNItemCode').val();
            const sqc = $('#txtSamplequalitycheck').val();
            const Inf = $('#txtinspfreq').val();
            const itemcode = $('#itemcode').val();
            const grnnumber = $('#GRN').val();
            if (!sqc || !Inf) {
                Swal.fire("⚠️ Missing Data", "Please enter Inspection Frequency and Sample Quality Checked before initiating NC.", "warning");
                return;
            }

            // Step 1: Close current Inspection Form modal
            const parentModalEl = window.parent.document.getElementById('inspecModal');
            const parentModal = parentModalEl ? bootstrap.Modal.getInstance(parentModalEl) : null;

            if (parentModal) {
                parentModal.hide();
            }

            // Step 2: Small delay to let hide animation complete
            setTimeout(() => {
                $.ajax({
                    url: '/Quality/NonconfirmRG',
                    type: 'GET',
                    dataType: 'html',
                    data: { GRIcode, sqc, Inf, itemcode, grnnumber },
                    success: function (resp) {
                        $('#ncModalBody').html(resp);

                        // Destroy any previous instance (clean up)
                        const old = bootstrap.Modal.getInstance(document.getElementById('ncModal'));
                        if (old) old.dispose();

                        // Create and show NC modal
                        const ncModal = new bootstrap.Modal(document.getElementById('ncModal'), {
                            backdrop: 'static',
                            keyboard: false
                        });
                        ncModal.show();
                    },
                    error: function () {
                        Swal.fire("❌ Error", "Failed to load Non-confirmation form.", "error");
                    }
                });
            }, 400); // slight delay = enough for parent modal to fully close
        }





        // Close both modals if open
        function closeModal() {
            var inspecModalEl = window.parent.document.getElementById('inspecModal');
            if (inspecModalEl) {
                var inspecModal = bootstrap.Modal.getInstance(inspecModalEl);
                if (inspecModal) inspecModal.hide();
            }

            var ncModalEl = document.getElementById('ncModal');
            if (ncModalEl) {
                var ncModal = bootstrap.Modal.getInstance(ncModalEl);
                if (ncModal) ncModal.hide();
            }
        }


    </script>

    <script>
        // Multiple modal backdrop fix
        $(document).on('hidden.bs.modal', '.modal', function () {
            if ($('.modal.show').length) {
                $('body').addClass('modal-open');
            }
        });

        // Ensure z-index for stacked modals
        $(document).on('show.bs.modal', '.modal', function () {
            const zIndex = 1050 + (10 * $('.modal:visible').length);
            $(this).css('z-index', zIndex);
            setTimeout(() => {
                $('.modal-backdrop')
                    .not('.modal-stack')
                    .css('z-index', zIndex - 1)
                    .addClass('modal-stack');
            }, 0);
        });
    </script>
</body>
</html>
