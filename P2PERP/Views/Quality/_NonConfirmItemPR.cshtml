<!-- Non-Confirm Item List Table Container -->
<div class="container mt-4 card shadow-sm">

    <div class="row align-items-center my-3">
        <!--  Date Range Picker (Left aligned) -->
        <div class="col-md-3">
            <div class="input-group" style="max-width: 280px;">
                <span class="input-group-text bg-primary text-white">
                    <i class="bi bi-calendar-event"></i>
                </span>
                <input type="text" id="Tabledate" class="form-control" readonly placeholder="Select Date Range" />
            </div>
        </div>

        <!--  Centered Heading -->
        <div class="col-md-6 text-center">
            <h4 class="mb-0 text-primary">Non-Confirm Item List</h4>
        </div>

        <!-- Empty right column (optional) -->
        <div class="col-md-3"></div>
    </div>


    <table id="Non-confirmItemTable" class="table table-striped table-bordered wrap" style="width:100%">
        <thead class="table-dark">
            <tr>
                <th><input type="checkbox" id="selectAllNonConfirm" class="small-checkbox" /></th>
                <th>Sr No</th>
                <th>GRN Code</th>
                <th>Vendor Name</th>
                <th>Add Date</th>             
                <th class="dt-center ">Action</th>
            </tr>
        </thead>
    </table>
</div>

<!-- Bootstrap Modal for Viewing Details -->
<div class="modal fade" id="viewDetailsModal" tabindex="-1" aria-labelledby="viewDetailsModalLabel" aria-hidden="true" data-bs-backdrop="True">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <!-- Added modal-dialog-centered class -->
        <div class="modal-content">

            <!--  Modal Header with Centered Title -->
            <div class="modal-header bg-primary text-white justify-content-center py-3">
                <!-- Added py-3 for vertical padding -->
                <h5 class="modal-title text-white fw-bold text-center w-100" id="viewDetailsModalLabel">Non-Confirm Items</h5> <!-- Added text-center and w-100 -->
                <button type="button" class="btn-close btn-close-white position-absolute end-0me-1 mt-2 mb-2" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- GRN Code in Box -->
            <div class="px-4 py-3">
                <div class="border rounded bg-light p-2 d-inline-block">
                    <strong>GRN Code:</strong>
                    <span id="modalGRNCodeNonConfirm" class="text-black fw-bold"></span>
                </div>
            </div>

            <div class="modal-body">
                <!-- Dynamic Item Details Table -->
                <table class="table table-bordered" id="itemDetailsTableNonConfirm">
                    <thead class="table-dark">
                        <tr>
                            <th><input type="checkbox" id="selectAllItemDetails" class="small-checkbox" /></th>
                            <th>Sr No</th>
                            <th>Item Code</th>
                            <th>Item Name</th>
                            <th>Failure Reason</th>
                            <th>Failed QC Code</th>
                            <th>QualityCheackDate</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

                <div id="noDataMessageNonConfirm" class="text-center text-muted" style="display:none;">
                    No item details found for this GRN Code.
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    h4 {
        font-weight: 600;
        margin-bottom: 0;
    }

    /* Optional spacing and alignment */
    div.dataTables_wrapper .dt-buttons {
        margin-bottom: 0 !important;
    }

    /* Center checkboxes */
    td.dt-center, th.dt-center {
        text-align: center;
        vertical-align: middle;
    }

    #itemDetailsTableNonConfirm th,
    #itemDetailsTableNonConfirm td {
        vertical-align: middle;
        text-align: center;
    }

    /* Table heading aur cell content center mein */
    #Non-confirmItemTable th,
    #Non-confirmItemTable td,
    #itemDetailsTableNonConfirm th,
    #itemDetailsTableNonConfirm td {
        text-align: center;
        vertical-align: middle !important;
    }

    /* ✅ SMALLER CHECKBOX STYLING FOR ALL CHECKBOXES */
    .small-checkbox {
        width: 14px !important;
        height: 14px !important;
        transform: scale(0.85);
        margin: 0 auto;
        display: block;
    }

    /* Ensure proper alignment for checkbox columns */
    #Non-confirmItemTable th:first-child,
    #Non-confirmItemTable td:first-child,
    #itemDetailsTableNonConfirm th:first-child,
    #itemDetailsTableNonConfirm td:first-child {
        width: 30px !important;
        text-align: center !important;
    }

    /* Modal positioning */
    .modal-dialog-centered {
        display: flex;
        align-items: center;
        min-height: calc(100% - 1rem);
    }
</style>

<script>
    $(document).ready(function () {

        // Toastr Config
        toastr.options = {
            "closeButton": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "timeOut": "3000"
        };

        // ✅ UPDATED: Date Range Picker with DD-MM-YYYY format
        $('#Tabledate').daterangepicker({
            autoUpdateInput: false,
            alwaysShowCalendars: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'DD-MM-YYYY',
                applyLabel: 'Apply',
                customRangeLabel: 'Custom Range'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 1 Month': [moment().subtract(1, 'months').startOf('day'), moment()],
                'Last 3 Months': [moment().subtract(3, 'months').startOf('day'), moment()],
                'Last 1 Year': [moment().subtract(12, 'months').startOf('day'), moment()]
            }
        }, function (start, end) {
            // Set the date range in the input field
            $('#Tabledate').val(start.format('DD-MM-YYYY') + ' - ' + end.format('DD-MM-YYYY'));

            // Store the dates in data attributes for filtering
            $('#Tabledate').data('start', start);
            $('#Tabledate').data('end', end);

            // Trigger table redraw
            $('#Non-confirmItemTable').DataTable().draw();
        });

        // Handle cancel event
        $('#Tabledate').on('cancel.daterangepicker', function () {
            $(this).val('Select Date Range');
            $(this).removeData('start').removeData('end');
            $('#Non-confirmItemTable').DataTable().draw();
        });

        // Set initial placeholder value
        $('#Tabledate').val('Select Date Range');

        // FIXED: Custom Search Filter for BOTH AddDate AND QualityCheckDate - UPDATED for DD-MM-YYYY
        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            if (settings.nTable.id !== 'Non-confirmItemTable') return true;

            const start = $('#Tabledate').data('start');
            const end = $('#Tabledate').data('end');

            // If no date range selected, show all rows
            if (!start || !end) return true;

            // Get both date columns
            const addDateStr = data[4]; // Add Date column (index 4)
            const qualityCheckDateStr = data[5]; // Quality Check Date column (index 5)

            //  Check if EITHER AddDate OR QualityCheckDate falls within the selected range
            let addDateInRange = false;
            let qualityCheckDateInRange = false;

            // Check Add Date - PRIORITIZE DD-MM-YYYY format
            if (addDateStr && addDateStr.trim() !== '') {
                const addDate = moment(addDateStr, ['DD-MM-YYYY', 'YYYY-MM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY', 'YYYY/MM/DD'], true);
                if (addDate.isValid()) {
                    addDateInRange = addDate.isSameOrAfter(start) && addDate.isSameOrBefore(end);
                }
            }

            // Check Quality Check Date - PRIORITIZE DD-MM-YYYY format
            if (qualityCheckDateStr && qualityCheckDateStr.trim() !== '') {
                const qualityCheckDate = moment(qualityCheckDateStr, ['DD-MM-YYYY', 'YYYY-MM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY', 'YYYY/MM/DD'], true);
                if (qualityCheckDate.isValid()) {
                    qualityCheckDateInRange = qualityCheckDate.isSameOrAfter(start) && qualityCheckDate.isSameOrBefore(end);
                }
            }

            //  Return true if EITHER date falls within the range
            return addDateInRange || qualityCheckDateInRange;
        });

        // 🔹 Main DataTable Initialization
        var table = $('#Non-confirmItemTable').DataTable({
            processing: true,
            serverSide: false,
            responsive: true,
            dom: '<"d-flex justify-content-between align-items-center mb-2"Bf>rt<"d-flex justify-content-between align-items-center mt-2"ip>',
            ajax: {
                url: '@Url.Action("nonConfirmItemsPR", "Quality")',
                type: "GET",
                datatype: "json",
                error: function (xhr) {
                    console.log("Ajax Error:", xhr.responseText);
                    alert("Error: " + xhr.status + " - " + xhr.statusText);
                }
            },
            columns: [
                {
                    data: null,
                    orderable: false,
                    searchable: false,
                    className: 'dt-center',
                    render: function (data, type, row) {
                        return `<input type="checkbox" class="row-select small-checkbox" value="${row.GRNCode}" />`;
                    }
                },
                {
                    data: null,
                    title: 'Sr No',
                    orderable: false ,
                    className: 'dt-center',
                    render: function (data, type, row, meta) {
                        return meta.row + 1;
                    }
                },
                { data: "GRNCode", orderable: false },
                { data: "VenderName", orderable: false },
                { data: "AddDate", orderable: false },

                {
                    data: null,
                    className: "dt-center",
                    orderable: false,
                    render: function (data, type, row) {
                        return `<button class="btn btn-sm btn-primary view-details-btn"
                data-grn="${row.GRNCode}"
                data-bs-toggle="tooltip"
                data-bs-placement="top"
                title="View Details">
            <i class="bi bi-eye-fill"></i>
        </button>`;
                    }
                }
            ],
            buttons: [
                // PRINT - Main Table
                {
                    extend: 'print',
                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                    title: '',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':not(:first-child):not(:last-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 0) {
                                    const $node = $(node);
                                    if ($node.find('.row-select').prop('checked')) {
                                        const selectedRows = $('input.row-select:checked');
                                        const currentIndex = selectedRows.index($node.closest('tr').find('.row-select'));
                                        return currentIndex + 1;
                                    }
                                }
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        const selected = $('input.row-select:checked').length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                    },
                    customize: function (win) {
                        var $body = $(win.document.body);
                        $body.append(`
            <style>
                thead th {
                    background-color: black !important;
                    color: white !important;
                    text-align: center !important;
                    vertical-align: middle !important;
                    -webkit-print-color-adjust: exact !important;
                    print-color-adjust: exact !important;
                    font-weight: bold !important;
                    padding: 8px !important;
                }
                table {
                    border-collapse: collapse !important;
                    width: 100% !important;
                    margin: 0 auto !important;
                }
                td, th {
                    border: 1px solid #000 !important;
                    padding: 6px !important;
                    text-align: center !important;
                    vertical-align: middle !important;
                }
                tbody td {
                    text-align: center !important;
                    vertical-align: middle !important;
                }
                h3, p {
                    text-align: center !important;
                }
            </style>
        `);
                        $body.prepend(`
            <h3>Non-Confirm Item List</h3>
            <p>Generated on: ${moment().format("DD-MM-YYYY")}</p>
        `);
                        $body.css({
                            'font-size': '12pt',
                            'font-family': 'Arial, sans-serif'
                        });
                        const $table = $body.find('table');
                        $table.find('tbody tr').each(function (index) {
                            $(this).find('td:first').text(index + 1);
                        });
                    }
                },

                // PDF - Main Table
                {
                    extend: 'pdfHtml5',
                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                    title: 'Non-Confirm Item List',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':not(:first-child):not(:last-child)',
                        format: {
                            body: function (data, row, column, node) {
                                if (column === 0) {
                                    const $node = $(node);
                                    if ($node.find('.row-select').prop('checked')) {
                                        const selectedRows = $('input.row-select:checked');
                                        const currentIndex = selectedRows.index($node.closest('tr').find('.row-select'));
                                        return currentIndex + 1;
                                    }
                                }
                                return data;
                            }
                        }
                    },
                    action: function (e, dt, button, config) {
                        const selected = $('input.row-select:checked').length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                    },
                    customize: function (doc) {
                        doc.pageMargins = [40, 60, 40, 40];
                        doc.styles.title = {
                            fontSize: 16,
                            bold: true,
                            alignment: 'center',
                            margin: [0, 0, 0, 10]
                        };
                        doc.content.splice(1, 0, {
                            text: `Generated on: ${moment().format("DD-MM-YYYY")}`,
                            alignment: 'center',
                            margin: [0, 0, 0, 10],
                            fontSize: 10,
                            italics: true
                        });
                        const table = doc.content.find(n => n.table);
                        if (table) {
                            table.table.widths = Array(table.table.body[0].length).fill('*');
                            table.layout = {
                                hLineWidth: () => 0.5,
                                vLineWidth: () => 0.5,
                                hLineColor: () => '#aaa',
                                vLineColor: () => '#aaa',
                                fillColor: (i) => i === 0 ? '#343a40' : null,
                                paddingLeft: () => 5,
                                paddingRight: () => 5
                            };
                            table.table.body[0].forEach(cell => {
                                cell.fillColor = '#343a40';
                                cell.color = 'white';
                                cell.alignment = 'center';
                                cell.fontSize = 11;
                                cell.bold = true;
                            });
                            table.table.body.forEach((row, rowIndex) => {
                                if (rowIndex > 0) {
                                    row[0].text = rowIndex;
                                    row.forEach(cell => {
                                        cell.alignment = 'center';
                                    });
                                }
                            });
                            table.alignment = 'center';
                        }
                        doc.defaultStyle = {
                            alignment: 'center'
                        };
                    }
                },

                // EXCEL
                {
                    extend: 'excelHtml5',
                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                    title: 'Non-Confirm Item List',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':not(:first-child):not(:last-child)'
                    },
                    action: function (e, dt, button, config) {
                        const selected = $('input.row-select:checked').length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                },

                // CSV
                {
                    extend: 'csvHtml5',
                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                    title: 'Non-Confirm Item List',
                    exportOptions: {
                        rows: function (idx, data, node) {
                            return $(node).find('.row-select').prop('checked');
                        },
                        columns: ':not(:first-child):not(:last-child)'
                    },
                    action: function (e, dt, button, config) {
                        const selected = $('input.row-select:checked').length;
                        if (selected === 0) {
                            toastr.warning('Please select at least one row before exporting.');
                            return;
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    }
                }
            ]
        });

        // Initialize Bootstrap tooltips on page load
        $('body').tooltip({
            selector: '[data-bs-toggle="tooltip"]'
        });

        // Re-initialize tooltips on every DataTable draw
        $('#Non-confirmItemTable').on('draw.dt', function () {
            $('[data-bs-toggle="tooltip"]').tooltip();
        });

        // 🔹 Select/Deselect All Rows in Main Table
        $('#selectAllNonConfirm').on('click', function () {
            $('.row-select').prop('checked', this.checked);
        });

        $('#Non-confirmItemTable tbody').on('change', '.row-select', function () {
            const allChecked = $('.row-select').length === $('.row-select:checked').length;
            $('#selectAllNonConfirm').prop('checked', allChecked);
        });

        // 🔹 Modal View: Fetch Details via AJAX
        $('#Non-confirmItemTable').on('click', '.view-details-btn', function () {
            const grnCode = $(this).data('grn');
            $('#modalGRNCodeNonConfirm').text(grnCode);
            const tbody = $('#itemDetailsTableNonConfirm tbody');
            const tableId = '#itemDetailsTableNonConfirm';
            tbody.empty().append('<tr><td colspan="6" class="text-center">Loading...</td></tr>');

            $.ajax({
                url: '@Url.Action("FailedItemsDetailsPR", "Quality")',
                type: 'GET',
                data: { grnCode },
                success: function (response) {
                    tbody.empty();

                    if (response.success && response.data.length > 0) {

                        if ($.fn.DataTable.isDataTable(tableId)) {
                            $(tableId).DataTable().clear().destroy();
                        }

                        response.data.forEach((item, index) => {
                            tbody.append(`
                                <tr>
                                    <td class="dt-center"><input type="checkbox" class="item-row-select small-checkbox" value="${item.ItemCode}" /></td>
                                    <td>${index + 1}</td>
                                    <td>${item.ItemCode}</td>
                                    <td>${item.ItemName}</td>
                                    <td>${item.Reason}</td>
                                    <td>${item.FailedQCCode}</td>
                                    <td>${item.AddedDate}</td>
                                </tr>
                            `);
                        });

                        $(tableId).DataTable({
                            paging: true,
                            searching: false,
                            ordering: false,
                            lengthChange: false,
                            pageLength: 5,
                            responsive: true,
                            destroy: true,
                            dom: "<'row mb-2'<'col-sm-12 d-flex justify-content-start'B>>" +
                                "tr" +
                                "<'row mt-2'<'col-md-6'i><'col-md-6 text-end'p>>",
                            buttons: [
                                // PRINT - Modal Table
                                {
                                    extend: 'print',
                                    text: '<i class="bi bi-printer-fill text-dark fs-5"></i>',
                                    title: '',
                                    exportOptions: {
                                        rows: function (idx, data, node) {
                                            return $(node).find('.item-row-select').prop('checked');
                                        },
                                        columns: ':not(:first-child)'
                                    },
                                    action: function (e, dt, button, config) {
                                        const selected = $('.item-row-select:checked').length;
                                        if (selected === 0) {
                                            toastr.warning('Please select at least one row before exporting.');
                                            return;
                                        }
                                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, button, config);
                                    },
                                    customize: function (win) {
                                        var $body = $(win.document.body);
                                        $body.append(`
            <style>
                thead th {
                    background-color: black !important;
                    color: white !important;
                    text-align: center !important;
                    vertical-align: middle !important;
                    -webkit-print-color-adjust: exact !important;
                    print-color-adjust: exact !important;
                    font-weight: bold !important;
                    padding: 8px !important;
                }
                table {
                    border-collapse: collapse !important;
                    width: 100% !important;
                    margin: 0 auto !important;
                }
                td, th {
                    border: 1px solid #000 !important;
                    padding: 6px !important;
                    text-align: center !important;
                    vertical-align: middle !important;
                }
                tbody td {
                    text-align: center !important;
                    vertical-align: middle !important;
                }
                h3, p {
                    text-align: center !important;
                }
            </style>
        `);
                                        $body.prepend(`
            <h3>Failed Items Details</h3>
            <p>GRN Code: <strong>${$('#modalGRNCodeNonConfirm').text()}</strong></p>
            <p>Generated on: ${moment().format("DD-MM-YYYY")}</p>
        `);
                                        $body.css({
                                            'font-size': '12pt',
                                            'font-family': 'Arial, sans-serif'
                                        });
                                        const $table = $body.find('table');
                                        $table.find('tbody tr').each(function (index) {
                                            $(this).find('td:first').text(index + 1);
                                        });
                                    }
                                },
                                // PDF - Modal Table
                                {
                                    extend: 'pdfHtml5',
                                    text: '<i class="bi bi-file-earmark-pdf text-danger fs-5"></i>',
                                    title: 'Failed Items Details',
                                    exportOptions: {
                                        rows: function (idx, data, node) {
                                            return $(node).find('.item-row-select').prop('checked');
                                        },
                                        columns: ':not(:first-child)'
                                    },
                                    action: function (e, dt, button, config) {
                                        const selected = $('.item-row-select:checked').length;
                                        if (selected === 0) {
                                            toastr.warning('Please select at least one row before exporting.');
                                            return;
                                        }
                                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                                    },
                                    customize: function (doc) {
                                        doc.pageMargins = [40, 80, 40, 40];
                                        doc.styles.title = {
                                            fontSize: 16,
                                            bold: true,
                                            alignment: 'center',
                                            margin: [0, 0, 0, 10]
                                        };
                                        doc.content.splice(1, 0,
                                            {
                                                text: `GRN Code: ${$('#modalGRNCodeNonConfirm').text()}`,
                                                alignment: 'center',
                                                margin: [0, 0, 0, 5],
                                                fontSize: 12,
                                                bold: true
                                            },
                                            {
                                                text: `Generated on: ${moment().format("DD-MM-YYYY")}`,
                                                alignment: 'center',
                                                margin: [0, 0, 0, 10],
                                                fontSize: 10,
                                                italics: true
                                            }
                                        );
                                        const table = doc.content.find(n => n.table);
                                        if (table) {
                                            table.table.widths = Array(table.table.body[0].length).fill('*');
                                            table.layout = {
                                                hLineWidth: () => 0.5,
                                                vLineWidth: () => 0.5,
                                                hLineColor: () => '#aaa',
                                                vLineColor: () => '#aaa',
                                                fillColor: (i) => i === 0 ? '#343a40' : null,
                                                paddingLeft: () => 5,
                                                paddingRight: () => 5
                                            };
                                            table.table.body[0].forEach(cell => {
                                                cell.fillColor = '#343a40';
                                                cell.color = 'white';
                                                cell.alignment = 'center';
                                                cell.fontSize = 11;
                                                cell.bold = true;
                                            });
                                            table.table.body.forEach((row, rowIndex) => {
                                                if (rowIndex > 0) {
                                                    row[0].text = rowIndex;
                                                    row.forEach(cell => {
                                                        cell.alignment = 'center';
                                                    });
                                                }
                                            });
                                            table.alignment = 'center';
                                        }
                                        doc.defaultStyle = {
                                            alignment: 'center'
                                        };
                                    }
                                },

                                // EXCEL
                                {
                                    extend: 'excelHtml5',
                                    text: '<i class="bi bi-file-earmark-excel text-success fs-5"></i>',
                                    title: 'Failed Items Details',
                                    exportOptions: {
                                        rows: function (idx, data, node) {
                                            return $(node).find('.item-row-select').prop('checked');
                                        },
                                        columns: ':not(:first-child)'
                                    },
                                    action: function (e, dt, button, config) {
                                        const selected = $('.item-row-select:checked').length;
                                        if (selected === 0) {
                                            toastr.warning('Please select at least one row before exporting.');
                                            return;
                                        }
                                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                                    }
                                },

                                // CSV
                                {
                                    extend: 'csvHtml5',
                                    text: '<i class="bi bi-filetype-csv text-success fs-5"></i>',
                                    title: 'Failed Items Details',
                                    exportOptions: {
                                        rows: function (idx, data, node) {
                                            return $(node).find('.item-row-select').prop('checked');
                                        },
                                        columns: ':not(:first-child)'
                                    },
                                    action: function (e, dt, button, config) {
                                        const selected = $('.item-row-select:checked').length;
                                        if (selected === 0) {
                                            toastr.warning('Please select at least one row before exporting.');
                                            return;
                                        }
                                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                                    }
                                }
                            ]
                        });

                        // Checkbox logic for details table
                        $('#selectAllItemDetails').prop('checked', false).off('click').on('click', function () {
                            $('.item-row-select').prop('checked', this.checked);
                        });

                        $('#itemDetailsTableNonConfirm tbody').off('change', '.item-row-select').on('change', function () {
                            const allChecked = $('.item-row-select').length === $('.item-row-select:checked').length;
                            $('#selectAllItemDetails').prop('checked', allChecked);
                        });

                    } else {
                        tbody.html('<tr><td colspan="6" class="text-center text-muted">No item details found for this GRN Code.</td></tr>');
                    }
                },
                error: function (xhr) {
                    tbody.empty().append('<tr><td colspan="6" class="text-danger text-center">Failed to load item details.</td></tr>');
                }
            });

            new bootstrap.Modal(document.getElementById('viewDetailsModal')).show();
        });

        //  Debug function to check date formats
        table.on('draw', function () {
            console.log('Table redrawn with date filter');
            const start = $('#Tabledate').data('start');
            const end = $('#Tabledate').data('end');
            if (start && end) {
                console.log('Active date filter:', {
                    start: start.format('DD-MM-YYYY'),
                    end: end.format('DD-MM-YYYY')
                });
            }
        });

    });
</script>